{"config":{"indexing":"full","lang":["ja"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"C++ Lambda Story - From C++98 to C++20 \u4ecb\u7ecd \u672c\u6587\u4e3a\u300aC++ Lambda Story\u300b\u7684\u4e2d\u6587\u7ffb\u8bd1\uff0c\u5982\u679c\u60a8\u89c9\u5f97\u6b64\u4e66\u6709\u4ef7\u503c\uff0c\u53ef\u4ee5\u5728 https://leanpub.com/cpplambda \u4e0a\u652f\u6301\u4e0b\u539f\u4f5c\u8005\u3002 \u6216\u8005\u5982\u679c\u60a8\u8ba4\u8bc6\u76f8\u5173\u7684\u7ffb\u8bd1\u5de5\u4f5c\u8005\u6216\u8005\u51fa\u7248\u793e\uff0c\u53ef\u4ee5\u79ef\u6781\u8054\u7cfb\u539f\u4f5c\u8005\u4e0e\u51fa\u7248\u793e\u8fdb\u884c\u6b63\u89c4\u7684\u4e2d\u6587\u7ffb\u8bd1\u5e76\u51fa\u7248\u3002 \u8bd1\u8005 Chapter Translator \u5173\u4e8e\u6b64\u4e66 @nolongerwait Lambda in C++98/03 @nolongerwait Lambda in C++11 @nolongerwait Lambda in C++14 @nolongerwait Lambda in C++17 @Dup4 Lambda in C++20 @nolongerwait","title":"Getting Started"},{"location":"#c-lambda-story---from-c98-to-c20","text":"","title":"C++ Lambda Story - From C++98 to C++20"},{"location":"#\u4ecb\u7ecd","text":"\u672c\u6587\u4e3a\u300aC++ Lambda Story\u300b\u7684\u4e2d\u6587\u7ffb\u8bd1\uff0c\u5982\u679c\u60a8\u89c9\u5f97\u6b64\u4e66\u6709\u4ef7\u503c\uff0c\u53ef\u4ee5\u5728 https://leanpub.com/cpplambda \u4e0a\u652f\u6301\u4e0b\u539f\u4f5c\u8005\u3002 \u6216\u8005\u5982\u679c\u60a8\u8ba4\u8bc6\u76f8\u5173\u7684\u7ffb\u8bd1\u5de5\u4f5c\u8005\u6216\u8005\u51fa\u7248\u793e\uff0c\u53ef\u4ee5\u79ef\u6781\u8054\u7cfb\u539f\u4f5c\u8005\u4e0e\u51fa\u7248\u793e\u8fdb\u884c\u6b63\u89c4\u7684\u4e2d\u6587\u7ffb\u8bd1\u5e76\u51fa\u7248\u3002","title":"\u4ecb\u7ecd"},{"location":"#\u8bd1\u8005","text":"Chapter Translator \u5173\u4e8e\u6b64\u4e66 @nolongerwait Lambda in C++98/03 @nolongerwait Lambda in C++11 @nolongerwait Lambda in C++14 @nolongerwait Lambda in C++17 @Dup4 Lambda in C++20 @nolongerwait","title":"\u8bd1\u8005"},{"location":"Chapter0/","text":"\u5173\u4e8e\u6b64\u4e66 \u6210\u4e66\u6e0a\u6e90 \u9605\u8bfb\u5bf9\u8c61 \u672c\u4e66\u9002\u7528\u4e8e\u6240\u6709\u559c\u6b22\u4e86\u89e3\u73b0\u4ee3 C++ \u7279\u6027\uff1aLambda \u8868\u8fbe\u5f0f \u7684 C++ \u5f00\u53d1\u4eba\u5458\u3002 \u8bfb\u8005\u53cd\u9988 \u5982\u679c\u60a8\u53d1\u73b0\u9519\u8bef\u3001\u62fc\u5199\u9519\u8bef\u3001\u8bed\u6cd5\u9519\u8bef\u2026\u2026\u6216\u5176\u4ed6\u4efb\u4f55\u9700\u8981\u66f4\u6b63\u7684\uff08\u7279\u522b\u662f\u903b\u8f91\u95ee\u9898\uff01\uff09\uff0c\u8bf7\u5c06\u60a8\u7684\u53cd\u9988\u53d1\u9001\u5230 bartlomiej.filipek@bfilipek.com \u3002 \u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u5730\u65b9\uff1a Leanpub Book \u7684\u53cd\u9988\u9875\u9762 - C++ Lambda Story \u66f4\u91cd\u8981\u7684\u662f\uff0c\u8fd9\u672c\u4e66\u5728 GoodReads \u4e0a\u6709\u4e00\u4e2a\u4e13\u95e8\u7684\u9875\u9762\u3002\u8bf7\u5728\u90a3\u91cc\u5206\u4eab\u60a8\u7684\u89c1\u89e3\uff1a C++ Lambda Story @GoodReads \u4ee3\u7801\u8bc1\u4e66 \u8fd9\u672c\u4e66\u7684\u4ee3\u7801\u5728 \u77e5\u8bc6\u5171\u4eab\u8bb8\u53ef\uff08Creative Commons License\uff09 \u4e0b\u53ef\u7528 \u4ee3\u7801\u683c\u5f0f \u8bed\u6cd5\u9ad8\u4eae\u9650\u5236 \u5728\u7ebf\u7f16\u8bd1\u5668 \u4f60\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e9b\u5728\u7ebf\u7f16\u8bd1\u5668\uff0c\u8fd9\u6837\u5c31\u4e0d\u7528\u5728\u672c\u5730\u521b\u5efa\u9879\u76ee\u6765\u5c1d\u8bd5\u8fd0\u884c\u548c\u89e3\u8bfb\u8fd9\u4e9b\u793a\u4f8b\u4ee3\u7801\u4e86\u3002 \u8fd9\u4e9b\u5728\u7ebf\u7f16\u8bd1\u5668\u63d0\u4f9b\u57fa\u7840\u7684\u6587\u672c\u7f16\u8f91\u5668\uff0c\u5e76\u4e14\u901a\u5e38\u5141\u8bb8\u4f60\u81ea\u884c\u7f16\u5199\u6e90\u6587\u4ef6\u8fdb\u884c\u7f16\u8bd1\u3002 \u5bf9\u4e8e\u4e00\u4e9b\u7b80\u77ed\u7684\u4ee3\u7801\u800c\u8a00\uff0c\u4f7f\u7528\u5728\u7ebf\u7f16\u8bd1\u5668\u6765\u8bf4\u662f\u5341\u5206\u65b9\u4fbf\u7684\uff0c\u53ef\u4ee5\u5feb\u901f\u67e5\u770b\u4ee3\u7801\u7684\u8fd0\u884c\u7ed3\u679c\uff0c\u751a\u81f3\u4f60\u53ef\u4ee5\u5feb\u901f\u5728\u4e0d\u540c\u7248\u672c\uff0c\u4e0d\u540c\u73af\u5883\uff0c\u4e0d\u540c\u7f16\u8bd1\u5668\u4e4b\u95f4\u8fdb\u884c\u5207\u6362\u4f7f\u7528\u3002 \u672c\u4e66\u4e2d\u5927\u90e8\u5206\u7684\u4ee3\u7801\u90fd\u9644\u6709\u5728\u7ebf\u7f16\u8bd1\u5668\u7684\u94fe\u63a5\uff0c\u5f53\u7136\uff0c\u4e0d\u540c\u7684\u4ee3\u7801\u4f7f\u7528\u7684\u4e0d\u540c\u7684\u7f16\u8bd1\u5668\u3002 \u8fd9\u662f\u672c\u4e66\u4e2d\u6240\u4f7f\u7528\u8fc7\u7684\u5168\u90e8\u5728\u7ebf\u7f16\u8bd1\u5668\u670d\u52a1\uff1a Coliru - \u4f7f\u7528 GCC 9.2.0 \u7248\u672c\uff08\u622a\u6b62 2020 \u5e74 06 \u6708\uff09\uff0c\u529f\u80fd\u7b80\u6d01\u4f46\u5341\u5206\u9ad8\u6548 Wandbox - \u63d0\u4f9b\u4e86\u5927\u90e8\u5206\u7684\u7f16\u8bd1\u5668\uff0c\u5305\u542b\u4e86\u7edd\u5927\u591a\u6570\u7684 Clang \u548c GCC \u7248\u672c\uff0c\u4f7f\u7528\u4e86 boost \u7684\u5e93\uff0c\u652f\u6301\u591a\u6587\u4ef6\u7f16\u8bd1\u3002\u5e76\u4e14\u4f60\u53ef\u4ee5\u751f\u6210\u94fe\u63a5\u6765\u5206\u4eab\u4f60\u7684\u4ee3\u7801\u3002 Compiler Explorer - \u63d0\u4f9b\u591a\u79cd\u7f16\u8bd1\u5668\uff0c\u663e\u793a\u751f\u6210\u7684\u6c47\u7f16\u4ee3\u7801\uff0c\u53ef\u4ee5\u6267\u884c\u4ee3\u7801\uff0c\u751a\u81f3\u8fdb\u884c\u9759\u6001\u4ee3\u7801\u5206\u6790\u3002 CppBench - \u53ef\u4ee5\u8fd0\u884c\u7b80\u5355\u7684 C++ \u6027\u80fd\u6d4b\u8bd5\uff08\u57fa\u4e8e Google Benchmark\uff09\u3002 C++ Insights - \u57fa\u4e8e Clang \u7684 \u6e90\u7801\u8f6c\u4e49\u5de5\u5177\uff0c\u53ef\u4ee5\u5c55\u793a\u7f16\u8bd1\u5668\u89c6\u89d2\u4e0b\u7684\u4ee3\u7801\uff0c\u6bd4\u5982\u5c06\u6e90\u4ee3\u7801\u8fdb\u884c\u9884\u7f16\u8bd1\u5c55\u5f00\u3002\u4f60\u53ef\u4ee5\u5728\u8fd9\u67e5\u770b Lambda \u8868\u8fbe\u5f0f\uff0cauto \u5173\u952e\u5b57\uff0c\u7ed3\u6784\u5316\u7ed1\u5b9a\uff0c\u6a21\u677f\u63a8\u65ad\uff0c\u53ef\u53d8\u53c2\u6570\u5305\uff0c\u8303\u56f4\u5f0f\u5faa\u73af\u7b49\u7684\u5c55\u5f00\u7ed3\u679c\u3002 \u5f53\u7136\uff0c\u5982\u679c\u60f3\u5c1d\u8bd5\u5176\u4ed6 C++ \u7684\u5728\u7ebf\u7f16\u8bd1\u5668\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5728\u8fd9\u4e2a\u7f51\u7ad9\u67e5\u770b\uff1a List of Online C++ Compilers by arnemertz \u5173\u4e8e\u4f5c\u8005 Bart\u0142omiej (Bartek) Filipekis \uff0c\u4e00\u4e2a\u62e5\u6709\u8d85\u8fc7 12 \u5e74\u4e13\u4e1a\u7ecf\u9a8c\u7684 C++ \u8f6f\u4ef6\u5f00\u53d1\u5de5\u7a0b\u5e08\u30022010 \u5e74\u5728 Cracow, Poland \u6bd5\u4e1a\u81ea Jagiellonian University\uff0c\u62e5\u6709\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u7855\u58eb\u5b66\u4f4d\u3002 \u73b0\u5c31\u804c\u4e8e Xara\uff0c\u8d1f\u8d23\u5f00\u53d1\u9ad8\u7ea7\u6587\u6863\u7f16\u8f91\u5668\u3002 \u540c\u65f6\uff0c\u62e5\u6709\u684c\u9762\u56fe\u5f62\u7a0b\u5e8f\u3001\u6e38\u620f\u5f00\u53d1\u3001\u5927\u578b\u822a\u7a7a\u7cfb\u7edf\u3001\u56fe\u5f62\u9a71\u52a8\u751a\u81f3\u751f\u7269\u53cd\u9988\u65b9\u9762\u7684\u5f00\u53d1\u7ecf\u9a8c\u3002 \u65e9\u524d\uff0c\u5728 Cracow \u5f53\u5730\u7684\u5927\u5b66\u4e2d\u6559\u6388\u7f16\u7a0b\uff08\u6e38\u620f\u7f16\u7a0b\u548c\u56fe\u5f62\u7f16\u7a0b\uff09\u8bfe\u7a0b\u3002 \u4ece 2011 \u5e74\u8d77\uff0cBartek \u5f00\u59cb\u5728 bfilipek.com \u4e0a\u64b0\u5199\u535a\u5ba2\u3002 \u8d77\u521d\uff0c\u535a\u6587\u4e3b\u9898\u56f4\u7ed5\u56fe\u5f62\u7f16\u7a0b\uff0c\u4f46\u662f\u73b0\u5728\u66f4\u591a\u805a\u7126\u4e8e C++ \u6838\u5fc3\u5185\u5bb9\u3002 \u540c\u65f6\uff0c\u4ed6\u4e5f\u662f Crocow C++ \u5f00\u53d1\u8005\u7ec4\u7ec7\u7684\u8054\u5408\u7ec4\u7ec7\u8005\u3002 \u4f60\u53ef\u4ee5\u5728 @CppCast \u627e\u5230\u4ed6\u5173\u4e8e C++17\uff0c\u535a\u5ba2\u548c\u6587\u672c\u5904\u7406\u76f8\u5173\u7684\u5185\u5bb9\u3002 \u4ece 2018 \u5e74 10 \u6708\u8d77\uff0cBartek \u5f00\u59cb\u5728 Polish National Body \u5c31\u4efb C++ \u4e13\u5bb6\u4e00\u804c\uff0c\u8fd9\u662f\u4e00\u5bb6\u76f4\u63a5\u4e0e ISO/IEC JTC 1/SC 22 (C++ Standardisation Committee) \u5de5\u4f5c\u7684\u516c\u53f8\u3002 \u540c\u6708\uff0cBartek \u83b7\u5f97\u4e86 Microsoft \u6388\u4e88\u7684 2019/2020 \u5e74\u5ea6\u7684 MVP \u5934\u8854\u8363\u8a89\u3002 \u5728\u7a7a\u95f2\u65f6\u95f4\uff0c\u559c\u6b22\u548c\u4ed6\u5fc3\u7231\u7684\u5c0f\u513f\u5b50\u4e00\u8d77\u6536\u96c6\u548c\u62fc\u88c5\u4e50\u9ad8\u6a21\u578b\u3002 Bartek \u4e5f\u662f\u300a C++ 17 In Detail \u300b\u7684\u4f5c\u8005\u3002 \u81f4\u8c22 \u5982\u679c\u6ca1\u6709 C++ \u4e13\u5bb6 Tomasz Kami\u0144ski \u7684\u5b9d\u8d35\u610f\u89c1\uff0c\u672c\u4e66\u5c31\u4e0d\u53ef\u80fd\u5b8c\u6210\uff08\u53c2\u89c1 Tomek \u5728 Linkedin \u4e0a\u7684\u7b80\u4ecb \uff09\u3002 Tomek \u5728\u6211\u4eec\u4f4d\u4e8e\u514b\u62c9\u79d1\u592b\u7684 Local C++ \u7528\u6237\u7ec4\u4e2d\u4e3b\u6301\u4e86\u5173\u4e8e Lambda\u201c\u5386\u53f2\u201d\u7684\u73b0\u573a\u7f16\u7801\u6f14\u793a\uff1a Lambdas: From C++11 to C++20 \u3002 \u672c\u4e66\u4e2d\u4f7f\u7528\u7684\u5f88\u591a\u4f8b\u5b50\u90fd\u6765\u81ea\u90a3\u6b21\u4f1a\u8bae\u3002 \u5c3d\u7ba1\u672c\u4e66\u7684\u521d\u7248\u76f8\u5bf9\u8f83\u77ed\uff0c\u4f46\u540e\u7eed\u6269\u5c55\u7248\u672c\uff08\u989d\u5916\u7684 100 \u9875\uff09\u662f\u6211\u4ece JFT\uff08John Taylor\uff09\u90a3\u5f97\u5230\u8fd4\u56de\u548c\u9f13\u52b1\u7684\u7ed3\u679c\u3002 John \u82b1\u8d39\u4e86\u5927\u91cf\u65f6\u95f4\u5bfb\u627e\u53ef\u4ee5\u6539\u8fdb\u548c\u6269\u5c55\u7684\u7ec6\u8282\u3002 \u6b64\u5916\uff0c\u6211\u8981\u5bf9\u63d0\u4f9b\u4e86\u5f88\u591a\u6709\u5173 Lambda \u8fd4\u56de\u5185\u5bb9\u7684 Dawid Pilarski \u8868\u793a\u611f\u8c22\u3002 \u6700\u540e\u4e5f\u662f\u76f8\u5f53\u91cd\u8981\u7684\uff0c\u6211\u4ece\u535a\u5ba2\u8bfb\u8005\u3001Patreon \u8bba\u575b\u4ee5\u53ca C++ Polska \u7684\u8ba8\u8bba\u4e2d\u83b7\u5f97\u4e86\u5927\u91cf\u53cd\u9988\u548c\u8bc4\u8bba\u3002 \u8c22\u8c22\u4f60\u4eec\uff01 \u6821\u9605\u5386\u53f2 2019 \u5e74 03 \u6708 25 \u65e5 - \u7b2c\u4e00\u7248\u4e0a\u7ebf\uff01 2020 \u5e74 01 \u6708 05 \u65e5 - \u8bed\u6cd5\u3001\u66f4\u597d\u7684\u4f8b\u5b50\u3001\u63aa\u8f9e\u3001IIFE \u90e8\u5206\u3001C++20 \u66f4\u65b0\u3002 2020 \u5e74 04 \u6708 17 \u65e5 - C++20 \u7ae0\u8282\u91cd\u5199\u3001\u8bed\u6cd5\u3001\u63aa\u8f9e\u3001\u5e03\u5c40\u3002 2020 \u5e74 04 \u6708 30 \u65e5 - \u4ece C++11\u3001C++17 \u548c C++20 \u4e2d\u7684 lambda \u6d3e\u751f 2020 \u5e74 06 \u6708 19 \u65e5 - \u4e3b\u8981\u66f4\u65b0\uff1a \u6539\u8fdb\u4e86 C++03 \u7ae0\u8282\uff0c\u6dfb\u52a0\u4e86\u6709\u5173\u6807\u51c6\u5e93\u4e2d\u7684\u8f85\u52a9\u51fd\u6570\u5bf9\u8c61\u7684\u90e8\u5206\u3002 \u6dfb\u52a0\u4e86\u6709\u5173\u5982\u4f55\u64cd\u4f5c\u7684\u65b0\u90e8\u5206\u4ece C++14 \u7ae0\u8282\u4e2d\u4e0d\u63a8\u8350\u4f7f\u7528\u7684 bind1stin \u8f6c\u6362\u4e3a\u73b0\u4ee3\u66ff\u4ee3\u65b9\u6848\u3002 C++11 \u548c C++17 \u7ae0\u8282\u4e2d\u6539\u8fdb\u548c\u6269\u5c55\u7684 IFFE \u90e8\u5206 \u5e26\u6709 lambda \u6280\u672f\u5217\u8868\u7684\u65b0\u9644\u5f55 \u5e26\u6709\u4e94\u5927 lambda \u529f\u80fd\u5217\u8868\u7684\u65b0\u9644\u5f55\uff0c\u6539\u7f16\u81ea\u535a\u5ba2\u6587\u7ae0 \u5e26\u6709\u66f4\u65b0\u526f\u6807\u9898\u7684\u65b0\u6807\u9898\u56fe\u7247 \u6574\u672c\u4e66\u7684\u8bb8\u591a\u8f83\u5c0f\u6539\u8fdb 2020 \u5e74 08 \u6708 03 \u65e5 - \u4e3b\u8981\u66f4\u65b0\uff0cKindle \u7248\u672c\u4e0a\u7ebf\u53ef\u7528\uff1a \u5927\u591a\u6570\u4ee3\u7801\u793a\u4f8b\u73b0\u5728\u5728\u6807\u9898\u4e2d\u90fd\u6709\u6307\u5411\u5728\u7ebf\u7f16\u8bd1\u5668\u7248\u672c\u7684\u94fe\u63a5 \u6539\u8fdb\u4e86 Lambda \u8bed\u6cd5\u7684\u63cf\u8ff0 \u5728 C++17 \u548c C++20 \u7ae0\u8282\u4e2d\u589e\u6dfb\u4e86\u65b0\u7684\u5185\u5bb9\u3002 \u65b0\u90e8\u5206\uff1a\u5982\u4f55\u5728\u5bb9\u5668\u4e2d\u5b58\u50a8 lambda\uff0cLambda \u548c\u5f02\u6b65\u6267\u884c\uff0c\u9012\u5f52 lambda\uff0c\u7c7b\u578b\u7cfb\u7edf\u4e2d\u7684\u5f02\u5e38\u89c4\u8303 \u66f4\u65b0\u4e86\u5173\u4e8e C++14 \u548c C++17 \u4e2d\u53ef\u53d8\u53c2\u6570\u6cdb\u578b lambda \u7684\u90e8\u5206 \u66f4\u65b0\u4e86\u5173\u4e8e C++11 \u548c C++20 \u4e2d\u53ef\u53d8\u53c2\u6570\u5305\u7684\u65b0\u90e8\u5206 \u5982\u679c\u53ef\u80fd\u7684\u8bdd\uff0c\u5728\u66f4\u957f\u7684\u4f8b\u5b50\u4e2d\u4f7f\u7528 const \u548c noexcept \u7ec6\u8282\u63cf\u8ff0\u4e0a\u7684\u63aa\u8bcd\u66f4\u6b63\u3001\u5168\u4e66\u76ee\u5f55\u7ed3\u6784\u5e03\u5c40\u7684\u5fae\u8c03\u3002","title":"\u5173\u4e8e\u6b64\u4e66"},{"location":"Chapter0/#\u5173\u4e8e\u6b64\u4e66","text":"","title":"\u5173\u4e8e\u6b64\u4e66"},{"location":"Chapter0/#\u6210\u4e66\u6e0a\u6e90","text":"","title":"\u6210\u4e66\u6e0a\u6e90"},{"location":"Chapter0/#\u9605\u8bfb\u5bf9\u8c61","text":"\u672c\u4e66\u9002\u7528\u4e8e\u6240\u6709\u559c\u6b22\u4e86\u89e3\u73b0\u4ee3 C++ \u7279\u6027\uff1aLambda \u8868\u8fbe\u5f0f \u7684 C++ \u5f00\u53d1\u4eba\u5458\u3002","title":"\u9605\u8bfb\u5bf9\u8c61"},{"location":"Chapter0/#\u8bfb\u8005\u53cd\u9988","text":"\u5982\u679c\u60a8\u53d1\u73b0\u9519\u8bef\u3001\u62fc\u5199\u9519\u8bef\u3001\u8bed\u6cd5\u9519\u8bef\u2026\u2026\u6216\u5176\u4ed6\u4efb\u4f55\u9700\u8981\u66f4\u6b63\u7684\uff08\u7279\u522b\u662f\u903b\u8f91\u95ee\u9898\uff01\uff09\uff0c\u8bf7\u5c06\u60a8\u7684\u53cd\u9988\u53d1\u9001\u5230 bartlomiej.filipek@bfilipek.com \u3002 \u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u5730\u65b9\uff1a Leanpub Book \u7684\u53cd\u9988\u9875\u9762 - C++ Lambda Story \u66f4\u91cd\u8981\u7684\u662f\uff0c\u8fd9\u672c\u4e66\u5728 GoodReads \u4e0a\u6709\u4e00\u4e2a\u4e13\u95e8\u7684\u9875\u9762\u3002\u8bf7\u5728\u90a3\u91cc\u5206\u4eab\u60a8\u7684\u89c1\u89e3\uff1a C++ Lambda Story @GoodReads","title":"\u8bfb\u8005\u53cd\u9988"},{"location":"Chapter0/#\u4ee3\u7801\u8bc1\u4e66","text":"\u8fd9\u672c\u4e66\u7684\u4ee3\u7801\u5728 \u77e5\u8bc6\u5171\u4eab\u8bb8\u53ef\uff08Creative Commons License\uff09 \u4e0b\u53ef\u7528","title":"\u4ee3\u7801\u8bc1\u4e66"},{"location":"Chapter0/#\u4ee3\u7801\u683c\u5f0f","text":"","title":"\u4ee3\u7801\u683c\u5f0f"},{"location":"Chapter0/#\u8bed\u6cd5\u9ad8\u4eae\u9650\u5236","text":"","title":"\u8bed\u6cd5\u9ad8\u4eae\u9650\u5236"},{"location":"Chapter0/#\u5728\u7ebf\u7f16\u8bd1\u5668","text":"\u4f60\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e9b\u5728\u7ebf\u7f16\u8bd1\u5668\uff0c\u8fd9\u6837\u5c31\u4e0d\u7528\u5728\u672c\u5730\u521b\u5efa\u9879\u76ee\u6765\u5c1d\u8bd5\u8fd0\u884c\u548c\u89e3\u8bfb\u8fd9\u4e9b\u793a\u4f8b\u4ee3\u7801\u4e86\u3002 \u8fd9\u4e9b\u5728\u7ebf\u7f16\u8bd1\u5668\u63d0\u4f9b\u57fa\u7840\u7684\u6587\u672c\u7f16\u8f91\u5668\uff0c\u5e76\u4e14\u901a\u5e38\u5141\u8bb8\u4f60\u81ea\u884c\u7f16\u5199\u6e90\u6587\u4ef6\u8fdb\u884c\u7f16\u8bd1\u3002 \u5bf9\u4e8e\u4e00\u4e9b\u7b80\u77ed\u7684\u4ee3\u7801\u800c\u8a00\uff0c\u4f7f\u7528\u5728\u7ebf\u7f16\u8bd1\u5668\u6765\u8bf4\u662f\u5341\u5206\u65b9\u4fbf\u7684\uff0c\u53ef\u4ee5\u5feb\u901f\u67e5\u770b\u4ee3\u7801\u7684\u8fd0\u884c\u7ed3\u679c\uff0c\u751a\u81f3\u4f60\u53ef\u4ee5\u5feb\u901f\u5728\u4e0d\u540c\u7248\u672c\uff0c\u4e0d\u540c\u73af\u5883\uff0c\u4e0d\u540c\u7f16\u8bd1\u5668\u4e4b\u95f4\u8fdb\u884c\u5207\u6362\u4f7f\u7528\u3002 \u672c\u4e66\u4e2d\u5927\u90e8\u5206\u7684\u4ee3\u7801\u90fd\u9644\u6709\u5728\u7ebf\u7f16\u8bd1\u5668\u7684\u94fe\u63a5\uff0c\u5f53\u7136\uff0c\u4e0d\u540c\u7684\u4ee3\u7801\u4f7f\u7528\u7684\u4e0d\u540c\u7684\u7f16\u8bd1\u5668\u3002 \u8fd9\u662f\u672c\u4e66\u4e2d\u6240\u4f7f\u7528\u8fc7\u7684\u5168\u90e8\u5728\u7ebf\u7f16\u8bd1\u5668\u670d\u52a1\uff1a Coliru - \u4f7f\u7528 GCC 9.2.0 \u7248\u672c\uff08\u622a\u6b62 2020 \u5e74 06 \u6708\uff09\uff0c\u529f\u80fd\u7b80\u6d01\u4f46\u5341\u5206\u9ad8\u6548 Wandbox - \u63d0\u4f9b\u4e86\u5927\u90e8\u5206\u7684\u7f16\u8bd1\u5668\uff0c\u5305\u542b\u4e86\u7edd\u5927\u591a\u6570\u7684 Clang \u548c GCC \u7248\u672c\uff0c\u4f7f\u7528\u4e86 boost \u7684\u5e93\uff0c\u652f\u6301\u591a\u6587\u4ef6\u7f16\u8bd1\u3002\u5e76\u4e14\u4f60\u53ef\u4ee5\u751f\u6210\u94fe\u63a5\u6765\u5206\u4eab\u4f60\u7684\u4ee3\u7801\u3002 Compiler Explorer - \u63d0\u4f9b\u591a\u79cd\u7f16\u8bd1\u5668\uff0c\u663e\u793a\u751f\u6210\u7684\u6c47\u7f16\u4ee3\u7801\uff0c\u53ef\u4ee5\u6267\u884c\u4ee3\u7801\uff0c\u751a\u81f3\u8fdb\u884c\u9759\u6001\u4ee3\u7801\u5206\u6790\u3002 CppBench - \u53ef\u4ee5\u8fd0\u884c\u7b80\u5355\u7684 C++ \u6027\u80fd\u6d4b\u8bd5\uff08\u57fa\u4e8e Google Benchmark\uff09\u3002 C++ Insights - \u57fa\u4e8e Clang \u7684 \u6e90\u7801\u8f6c\u4e49\u5de5\u5177\uff0c\u53ef\u4ee5\u5c55\u793a\u7f16\u8bd1\u5668\u89c6\u89d2\u4e0b\u7684\u4ee3\u7801\uff0c\u6bd4\u5982\u5c06\u6e90\u4ee3\u7801\u8fdb\u884c\u9884\u7f16\u8bd1\u5c55\u5f00\u3002\u4f60\u53ef\u4ee5\u5728\u8fd9\u67e5\u770b Lambda \u8868\u8fbe\u5f0f\uff0cauto \u5173\u952e\u5b57\uff0c\u7ed3\u6784\u5316\u7ed1\u5b9a\uff0c\u6a21\u677f\u63a8\u65ad\uff0c\u53ef\u53d8\u53c2\u6570\u5305\uff0c\u8303\u56f4\u5f0f\u5faa\u73af\u7b49\u7684\u5c55\u5f00\u7ed3\u679c\u3002 \u5f53\u7136\uff0c\u5982\u679c\u60f3\u5c1d\u8bd5\u5176\u4ed6 C++ \u7684\u5728\u7ebf\u7f16\u8bd1\u5668\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5728\u8fd9\u4e2a\u7f51\u7ad9\u67e5\u770b\uff1a List of Online C++ Compilers by arnemertz","title":"\u5728\u7ebf\u7f16\u8bd1\u5668"},{"location":"Chapter0/#\u5173\u4e8e\u4f5c\u8005","text":"Bart\u0142omiej (Bartek) Filipekis \uff0c\u4e00\u4e2a\u62e5\u6709\u8d85\u8fc7 12 \u5e74\u4e13\u4e1a\u7ecf\u9a8c\u7684 C++ \u8f6f\u4ef6\u5f00\u53d1\u5de5\u7a0b\u5e08\u30022010 \u5e74\u5728 Cracow, Poland \u6bd5\u4e1a\u81ea Jagiellonian University\uff0c\u62e5\u6709\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u7855\u58eb\u5b66\u4f4d\u3002 \u73b0\u5c31\u804c\u4e8e Xara\uff0c\u8d1f\u8d23\u5f00\u53d1\u9ad8\u7ea7\u6587\u6863\u7f16\u8f91\u5668\u3002 \u540c\u65f6\uff0c\u62e5\u6709\u684c\u9762\u56fe\u5f62\u7a0b\u5e8f\u3001\u6e38\u620f\u5f00\u53d1\u3001\u5927\u578b\u822a\u7a7a\u7cfb\u7edf\u3001\u56fe\u5f62\u9a71\u52a8\u751a\u81f3\u751f\u7269\u53cd\u9988\u65b9\u9762\u7684\u5f00\u53d1\u7ecf\u9a8c\u3002 \u65e9\u524d\uff0c\u5728 Cracow \u5f53\u5730\u7684\u5927\u5b66\u4e2d\u6559\u6388\u7f16\u7a0b\uff08\u6e38\u620f\u7f16\u7a0b\u548c\u56fe\u5f62\u7f16\u7a0b\uff09\u8bfe\u7a0b\u3002 \u4ece 2011 \u5e74\u8d77\uff0cBartek \u5f00\u59cb\u5728 bfilipek.com \u4e0a\u64b0\u5199\u535a\u5ba2\u3002 \u8d77\u521d\uff0c\u535a\u6587\u4e3b\u9898\u56f4\u7ed5\u56fe\u5f62\u7f16\u7a0b\uff0c\u4f46\u662f\u73b0\u5728\u66f4\u591a\u805a\u7126\u4e8e C++ \u6838\u5fc3\u5185\u5bb9\u3002 \u540c\u65f6\uff0c\u4ed6\u4e5f\u662f Crocow C++ \u5f00\u53d1\u8005\u7ec4\u7ec7\u7684\u8054\u5408\u7ec4\u7ec7\u8005\u3002 \u4f60\u53ef\u4ee5\u5728 @CppCast \u627e\u5230\u4ed6\u5173\u4e8e C++17\uff0c\u535a\u5ba2\u548c\u6587\u672c\u5904\u7406\u76f8\u5173\u7684\u5185\u5bb9\u3002 \u4ece 2018 \u5e74 10 \u6708\u8d77\uff0cBartek \u5f00\u59cb\u5728 Polish National Body \u5c31\u4efb C++ \u4e13\u5bb6\u4e00\u804c\uff0c\u8fd9\u662f\u4e00\u5bb6\u76f4\u63a5\u4e0e ISO/IEC JTC 1/SC 22 (C++ Standardisation Committee) \u5de5\u4f5c\u7684\u516c\u53f8\u3002 \u540c\u6708\uff0cBartek \u83b7\u5f97\u4e86 Microsoft \u6388\u4e88\u7684 2019/2020 \u5e74\u5ea6\u7684 MVP \u5934\u8854\u8363\u8a89\u3002 \u5728\u7a7a\u95f2\u65f6\u95f4\uff0c\u559c\u6b22\u548c\u4ed6\u5fc3\u7231\u7684\u5c0f\u513f\u5b50\u4e00\u8d77\u6536\u96c6\u548c\u62fc\u88c5\u4e50\u9ad8\u6a21\u578b\u3002 Bartek \u4e5f\u662f\u300a C++ 17 In Detail \u300b\u7684\u4f5c\u8005\u3002","title":"\u5173\u4e8e\u4f5c\u8005"},{"location":"Chapter0/#\u81f4\u8c22","text":"\u5982\u679c\u6ca1\u6709 C++ \u4e13\u5bb6 Tomasz Kami\u0144ski \u7684\u5b9d\u8d35\u610f\u89c1\uff0c\u672c\u4e66\u5c31\u4e0d\u53ef\u80fd\u5b8c\u6210\uff08\u53c2\u89c1 Tomek \u5728 Linkedin \u4e0a\u7684\u7b80\u4ecb \uff09\u3002 Tomek \u5728\u6211\u4eec\u4f4d\u4e8e\u514b\u62c9\u79d1\u592b\u7684 Local C++ \u7528\u6237\u7ec4\u4e2d\u4e3b\u6301\u4e86\u5173\u4e8e Lambda\u201c\u5386\u53f2\u201d\u7684\u73b0\u573a\u7f16\u7801\u6f14\u793a\uff1a Lambdas: From C++11 to C++20 \u3002 \u672c\u4e66\u4e2d\u4f7f\u7528\u7684\u5f88\u591a\u4f8b\u5b50\u90fd\u6765\u81ea\u90a3\u6b21\u4f1a\u8bae\u3002 \u5c3d\u7ba1\u672c\u4e66\u7684\u521d\u7248\u76f8\u5bf9\u8f83\u77ed\uff0c\u4f46\u540e\u7eed\u6269\u5c55\u7248\u672c\uff08\u989d\u5916\u7684 100 \u9875\uff09\u662f\u6211\u4ece JFT\uff08John Taylor\uff09\u90a3\u5f97\u5230\u8fd4\u56de\u548c\u9f13\u52b1\u7684\u7ed3\u679c\u3002 John \u82b1\u8d39\u4e86\u5927\u91cf\u65f6\u95f4\u5bfb\u627e\u53ef\u4ee5\u6539\u8fdb\u548c\u6269\u5c55\u7684\u7ec6\u8282\u3002 \u6b64\u5916\uff0c\u6211\u8981\u5bf9\u63d0\u4f9b\u4e86\u5f88\u591a\u6709\u5173 Lambda \u8fd4\u56de\u5185\u5bb9\u7684 Dawid Pilarski \u8868\u793a\u611f\u8c22\u3002 \u6700\u540e\u4e5f\u662f\u76f8\u5f53\u91cd\u8981\u7684\uff0c\u6211\u4ece\u535a\u5ba2\u8bfb\u8005\u3001Patreon \u8bba\u575b\u4ee5\u53ca C++ Polska \u7684\u8ba8\u8bba\u4e2d\u83b7\u5f97\u4e86\u5927\u91cf\u53cd\u9988\u548c\u8bc4\u8bba\u3002 \u8c22\u8c22\u4f60\u4eec\uff01","title":"\u81f4\u8c22"},{"location":"Chapter0/#\u6821\u9605\u5386\u53f2","text":"2019 \u5e74 03 \u6708 25 \u65e5 - \u7b2c\u4e00\u7248\u4e0a\u7ebf\uff01 2020 \u5e74 01 \u6708 05 \u65e5 - \u8bed\u6cd5\u3001\u66f4\u597d\u7684\u4f8b\u5b50\u3001\u63aa\u8f9e\u3001IIFE \u90e8\u5206\u3001C++20 \u66f4\u65b0\u3002 2020 \u5e74 04 \u6708 17 \u65e5 - C++20 \u7ae0\u8282\u91cd\u5199\u3001\u8bed\u6cd5\u3001\u63aa\u8f9e\u3001\u5e03\u5c40\u3002 2020 \u5e74 04 \u6708 30 \u65e5 - \u4ece C++11\u3001C++17 \u548c C++20 \u4e2d\u7684 lambda \u6d3e\u751f 2020 \u5e74 06 \u6708 19 \u65e5 - \u4e3b\u8981\u66f4\u65b0\uff1a \u6539\u8fdb\u4e86 C++03 \u7ae0\u8282\uff0c\u6dfb\u52a0\u4e86\u6709\u5173\u6807\u51c6\u5e93\u4e2d\u7684\u8f85\u52a9\u51fd\u6570\u5bf9\u8c61\u7684\u90e8\u5206\u3002 \u6dfb\u52a0\u4e86\u6709\u5173\u5982\u4f55\u64cd\u4f5c\u7684\u65b0\u90e8\u5206\u4ece C++14 \u7ae0\u8282\u4e2d\u4e0d\u63a8\u8350\u4f7f\u7528\u7684 bind1stin \u8f6c\u6362\u4e3a\u73b0\u4ee3\u66ff\u4ee3\u65b9\u6848\u3002 C++11 \u548c C++17 \u7ae0\u8282\u4e2d\u6539\u8fdb\u548c\u6269\u5c55\u7684 IFFE \u90e8\u5206 \u5e26\u6709 lambda \u6280\u672f\u5217\u8868\u7684\u65b0\u9644\u5f55 \u5e26\u6709\u4e94\u5927 lambda \u529f\u80fd\u5217\u8868\u7684\u65b0\u9644\u5f55\uff0c\u6539\u7f16\u81ea\u535a\u5ba2\u6587\u7ae0 \u5e26\u6709\u66f4\u65b0\u526f\u6807\u9898\u7684\u65b0\u6807\u9898\u56fe\u7247 \u6574\u672c\u4e66\u7684\u8bb8\u591a\u8f83\u5c0f\u6539\u8fdb 2020 \u5e74 08 \u6708 03 \u65e5 - \u4e3b\u8981\u66f4\u65b0\uff0cKindle \u7248\u672c\u4e0a\u7ebf\u53ef\u7528\uff1a \u5927\u591a\u6570\u4ee3\u7801\u793a\u4f8b\u73b0\u5728\u5728\u6807\u9898\u4e2d\u90fd\u6709\u6307\u5411\u5728\u7ebf\u7f16\u8bd1\u5668\u7248\u672c\u7684\u94fe\u63a5 \u6539\u8fdb\u4e86 Lambda \u8bed\u6cd5\u7684\u63cf\u8ff0 \u5728 C++17 \u548c C++20 \u7ae0\u8282\u4e2d\u589e\u6dfb\u4e86\u65b0\u7684\u5185\u5bb9\u3002 \u65b0\u90e8\u5206\uff1a\u5982\u4f55\u5728\u5bb9\u5668\u4e2d\u5b58\u50a8 lambda\uff0cLambda \u548c\u5f02\u6b65\u6267\u884c\uff0c\u9012\u5f52 lambda\uff0c\u7c7b\u578b\u7cfb\u7edf\u4e2d\u7684\u5f02\u5e38\u89c4\u8303 \u66f4\u65b0\u4e86\u5173\u4e8e C++14 \u548c C++17 \u4e2d\u53ef\u53d8\u53c2\u6570\u6cdb\u578b lambda \u7684\u90e8\u5206 \u66f4\u65b0\u4e86\u5173\u4e8e C++11 \u548c C++20 \u4e2d\u53ef\u53d8\u53c2\u6570\u5305\u7684\u65b0\u90e8\u5206 \u5982\u679c\u53ef\u80fd\u7684\u8bdd\uff0c\u5728\u66f4\u957f\u7684\u4f8b\u5b50\u4e2d\u4f7f\u7528 const \u548c noexcept \u7ec6\u8282\u63cf\u8ff0\u4e0a\u7684\u63aa\u8bcd\u66f4\u6b63\u3001\u5168\u4e66\u76ee\u5f55\u7ed3\u6784\u5e03\u5c40\u7684\u5fae\u8c03\u3002","title":"\u6821\u9605\u5386\u53f2"},{"location":"Chapter1/","text":"\u4e00\u3001Lambda in C++98/03 \u51e1\u662f\u5728\u5f00\u59cb\u4e4b\u524d\uff0c\u5bf9\u4e3b\u9898\u7684\u80cc\u666f\u505a\u51fa\u4e00\u4e9b\u4ecb\u7ecd\u603b\u662f\u597d\u7684\u3002 \u6240\u4ee5\uff0c\u6211\u4eec\u9996\u5148\u4f1a\u804a\u4e00\u804a\u5728\u6ca1\u6709\u73b0\u4ee3 C++ \u4e4b\u524d\u7684\u90a3\u4e9b C++ \u4ee3\u7801\u3002 \u5728\u672c\u7ae0\uff0c\u4f60\u53ef\u4ee5\u5b66\u5230\uff1a \u5982\u4f55\u4ece\u6807\u51c6\u5e93\u4f20\u9012\u4e00\u4e2a\u4eff\u51fd\u6570\u7ed9\u7b97\u6cd5 \u4eff\u51fd\u6570\u548c\u51fd\u6570\u6307\u9488\u7684\u5c40\u9650\u6027 \u4e3a\u4ec0\u4e48\u8f85\u52a9\u51fd\u6570\u4e0d\u591f\u597d\u4f7f C++0x/C++11 \u4e2d\u6dfb\u52a0\u65b0\u7279\u6027\u7684\u52a8\u673a 1. C++98/03 \u4e2d\u7684\u53ef\u8c03\u7528\u5bf9\u8c61 \u9996\u5148\u6765\u804a\u804a\u6807\u51c6\u5e93\u4e2d\u57fa\u672c\u601d\u60f3\u4e4b\u4e00\u7684\u7b97\u6cd5\uff0c\u50cf std::sort \uff0c std::for_each \uff0c std::transform \u7b49\uff0c\u53ef\u4ee5\u8c03\u7528\u4efb\u4f55\u53ef\u8c03\u7528\u5bf9\u8c61\u4ee5\u53ca\u8c03\u7528\u8f93\u5165\u5bb9\u5668\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20\u3002 \u7136\u800c\uff0c\u5728 C++98/03 \u4e2d\uff0c\u8fd9\u4e9b\u64cd\u4f5c\u53ea\u5305\u542b\u6307\u5411\u51fd\u6570\u7684\u6307\u9488\u6216\u8005\u4eff\u51fd\u6570\u3002 \u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u6765\u770b\u4e00\u770b\u4e00\u4e2a\u6253\u5370 vector \u4e2d\u5168\u90e8\u5143\u7d20\u7684\u5e94\u7528\u7a0b\u5e8f\u3002 \u5728\u7b2c\u4e00\u7248\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u89c4\u8303\u7684\u51fd\u6570\uff1a \u4ee3\u7801 1-1 \u57fa\u7840\u8f93\u51fa\u51fd\u6570 #include <algorithm> #include <iostream> #include <vector> void PrintFunc ( int x ) { std :: cout << x << std :: endl ; } int main () { std :: vector < int > v ; v . push_back ( 1 ); v . push_back ( 2 ); std :: for_each ( v . begin (), v . end (), PrintFunc ); } \u4e0a\u9762\u7684\u4ee3\u7801\u4f7f\u7528\u4e86 std::for_each \u6765\u4ece vector \u4e2d\u8fed\u4ee3\u6bcf\u4e2a\u5143\u7d20\uff08\u8bf7\u6ce8\u610f\u6b64\u65f6\u7684 C++ \u4e3a 98/03 \u7248\u672c\uff0c\u5c1a\u4e0d\u652f\u6301\u8303\u56f4\u5f0f\u5faa\u73af\uff09\uff0c\u540c\u65f6\u4f20\u9012\u4e86\u4e00\u4e2a\u53ef\u8c03\u7528\u5bf9\u8c61 PrintFunc \u3002 \u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u7b80\u5355\u7684\u51fd\u6570\u8f6c\u5316\u4e3a\u4e00\u4e2a\u4eff\u51fd\u6570\uff1a \u4ee3\u7801 1-2 \u57fa\u7840\u8f93\u51fa\u4eff\u51fd\u6570 #include <algorithm> #include <iostream> #include <vector> struct PrintFunctor { void operator ()( int x ) const { std :: cout << x << std :: endl ; } } int main () { std :: vector < int > v ; v . push_back ( 1 ); v . push_back ( 2 ); std :: for_each ( v . begin (), v . end (), PrintFunctor ()); } \u672c\u7528\u4f8b\u91cd\u8f7d\u4e86\u64cd\u4f5c\u7b26 () \u6765\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u4eff\u51fd\u6570\u3002 \u76f8\u8f83\u4e8e\u901a\u5e38\u65e0\u72b6\u6001\u7684\u51fd\u6570\u6307\u9488\uff0c\u4eff\u51fd\u6570\u80fd\u591f\u6301\u6709\u6210\u5458\u53d8\u91cf\u6765\u5141\u8bb8\u5b58\u50a8\u72b6\u6001\u3002 \u4e00\u4e2a\u4f8b\u5b50\uff1a\u7edf\u8ba1\u5728\u7b97\u6cd5\u4e2d\u8c03\u7528\u53ef\u8c03\u7528\u5bf9\u8c61\u7684\u6b21\u6570\u3002 \u8fd9\u9700\u8981\u5728\u4eff\u51fd\u6570\u4e2d\u5b58\u50a8\u4e00\u4e2a\u8ba1\u6570\u5668\uff0c\u5e76\u4e14\u5728\u6bcf\u6b21 lambda \u8c03\u7528\u65f6\u66f4\u65b0\u8ba1\u6570\uff1a \u4ee3\u7801 1-3 \u5e26\u6709\u72b6\u6001\u7684\u4eff\u51fd\u6570 #include <algorithm> #include <iostream> #include <vector> struct PrintFunctor { PrintFunctor () : numCalls ( 0 ){} void operator ()( int x ) const { std :: cout << x << std :: endl ; ++ numCalls ; } mutable int numCalls ; }; int main () { std :: vector < int > v ; v . push_back ( 1 ); v . push_back ( 2 ); const PrintFunctor visitor = std :: for_each ( v . begin (), v . end (), PrintFunctor ()); std :: cout << \"num calls: \" << visitor . numCalls << '\\n' ; } \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u6210\u5458\u53d8\u91cf numCalls \u6765\u7edf\u8ba1\u8c03\u7528\u64cd\u4f5c\u7b26\u88ab\u8c03\u7528\u7684\u6b21\u6570\u3002 \u7531\u4e8e\u8c03\u7528\u64cd\u4f5c\u7b26\u662f\u4e00\u4e2a const \u6210\u5458\u51fd\u6570\uff0c\u6211\u4f7f\u7528\u4e86 mutable \u7c7b\u578b\u7684\u53d8\u91cf\u3002 \u5982\u60a8\u6240\u6599\uff0c\u6211\u4eec\u5f97\u5230\u7684\u8f93\u51fa\u7ed3\u679c\u5c31\u662f\uff1a 1 2 num calls: 2 \u6211\u4eec\u4e5f\u53ef\u4ee5\u4ece\u8c03\u7528\u8303\u56f4\u4e2d\u300c\u6355\u83b7\u300d\u53d8\u91cf\u3002 \u60f3\u8981\u8fbe\u5230\u8fd9\u4e2a\u6548\u679c\uff0c\u6211\u4eec\u9700\u8981\u5728\u4eff\u51fd\u6570\u4e2d\u521b\u5efa\u4e00\u4e2a\u6210\u5458\u53d8\u91cf\u5e76\u4e14\u5728\u6784\u9020\u5668\u4e2d\u521d\u59cb\u5316\u5b83\u3002 \u4ee3\u7801 1-4 \u5e26\u6709\u201c\u6355\u83b7\u201d\u53d8\u91cf\u7684\u4eff\u51fd\u6570 #include <algorithm> #include <iostream> #include <string> #include <vector> struct PrintFunctor { PrintFunctor ( const std :: string & str ) : strText ( str ), numCalls ( 0 ) {} void operator ()( int x ) const { std :: cout << strText << x << '\\n' ; ++ numCalls ; } std :: string strText ; mutable int numCalls ; }; int main () { std :: vector < int > v ; v . push_back ( 1 ); v . push_back ( 2 ); const std :: string introText ( \"Elem: \" ); const PrintFunctor visitor = std :: for_each ( v . begin (), v . end (), PrintFunctor ( introText )); std :: cout << \"num calls: \" << visitor . numCalls << '\\n' ; } \u5728\u8fd9\u4e2a\u7248\u672c\u4e2d\uff0c PrintFunctor \u4f7f\u7528\u4e86\u4e00\u4e2a\u989d\u5916\u7684\u53c2\u6570\u6765\u521d\u59cb\u5316\u6210\u5458\u53d8\u91cf\u3002 \u7136\u540e\u8fd9\u4e2a\u53d8\u91cf\u5728\u8c03\u7528\u64cd\u4f5c\u7b26\u4e2d\u88ab\u4f7f\u7528\u3002\u6240\u4ee5\u6700\u7ec8\u671f\u671b\u7684\u8f93\u51fa\u662f\uff1a Elem: 1 Elem: 2 num calls: 2 2. \u4eff\u51fd\u6570\u7684\u4e00\u4e9b\u95ee\u9898 \u5982\u60a8\u6240\u89c1\uff0c\u4eff\u51fd\u6570\u7684\u529f\u80fd\u5f88\u5f3a\u5927\u3002\u4ed6\u4eec\u7531\u4e00\u4e2a\u72ec\u7acb\u7684\u7c7b\u6240\u8868\u793a\uff0c\u60a8\u53ef\u4ee5\u6839\u636e\u60a8\u7684\u9700\u8981\u6765\u8bbe\u8ba1\u3001\u6539\u9020\u5e76\u4f7f\u7528\u5b83\u3002 \u7136\u800c C++98/03 \u95ee\u9898\u5728\u4e8e\u9700\u8981\u5728\u4e0d\u540c\u7684\u5730\u65b9\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6216\u8005\u4eff\u51fd\u6570\uff0c\u800c\u4e0d\u662f\u7b97\u6cd5\u8c03\u7528\u5bf9\u8c61\u672c\u8eab\u3002 \u8fd9\u610f\u5473\u7740\u8fd9\u6bb5\u4ee3\u7801\u4f1a\u5728\u6e90\u6587\u4ef6\u7684\u4e2d\u5360\u7528\u51e0\u5341\u5230\u4e0a\u767e\u884c\uff0c\u800c\u4e14\u8fd9\u6837\u5206\u79bb\u7684\u5199\u6cd5\u5e76\u4e0d\u5229\u4e8e\u65e5\u540e\u4ee3\u7801\u7684\u7ef4\u62a4\u3002 \u4e00\u4e2a\u53ef\u884c\u7684\u89e3\u51b3\u529e\u6cd5\uff0c\u90a3\u5c31\u662f\u518d\u7f16\u5199\u4e00\u4e2a\u672c\u5730\u4eff\u51fd\u6570\u7c7b\uff0c\u56e0\u4e3a C++ \u652f\u6301\u8fd9\u6837\u7684\u8bed\u6cd5\uff0c\u4f46\u662f\u8fd9\u4e0d\u610f\u5473\u7740\u5b83\u80fd\u5982\u9884\u671f\u4e00\u6837\u5de5\u4f5c\u3002 \u6765\u770b\u770b\u8fd9\u6bb5\u4ee3\u7801\uff1a \u4ee3\u7801 1-5 \u672c\u5730\u4eff\u51fd\u6570\u7c7b int main () { struct PrintFunctor { void operator ()( int x ) const { std :: cout << x << std :: endl ; } }; std :: vector < int > v ( 10 , 1 ); std :: for_each ( v . begin (), v . end (), PrintFunctor ()); } \u60a8\u53ef\u4ee5\u7528 GCC \u6765\u5c1d\u8bd5\u7f16\u8bd1\u5b83\uff08\u5e26\u4e0a C++98 \u7684\u6807\u7b7e -std=c++98 \uff09\uff0c\u5f53\u7136\u4e0d\u51fa\u610f\u5916\uff0c\u5c06\u4f1a\u51fa\u73b0\u5982\u4e0b\u7684\u7f16\u8bd1\u9519\u8bef\uff1a error: template argument for 'template<class _IIter, class _Funct> _Funct std::for_each(_IIter, _IIter, _Funct)' uses local type 'main()::PrintFunctor' \u5728 C++98/03 \u4e2d\uff0c\u4f60\u4e0d\u80fd\u7528\u672c\u5730\u7c7b\u578b\u6765\u521d\u59cb\u5316\u4e00\u4e2a\u6a21\u677f\u3002 \u5f53\u8ba4\u8bc6\u5230\u5e76\u7406\u89e3\u4e86\u8fd9\u4e9b\u9650\u5236\u4ea7\u751f\u7684\u539f\u56e0\uff0cC++ \u5f00\u53d1\u8005\u5c31\u53ef\u4ee5\u5728 C++98/03 \u4e2d\u627e\u5230\u4e00\u79cd\u89e3\u51b3\u529e\u6cd5\uff1a\u4f7f\u7528\u4e00\u7ec4\u8f85\u52a9\u51fd\u6570\u3002 3. \u4f7f\u7528\u8f85\u52a9\u51fd\u6570 \u4f7f\u7528\u4e00\u4e9b\u8f85\u52a9\u51fd\u6570\u6216\u8005\u9884\u5b9a\u4e49\u597d\u7684\u4eff\u51fd\u6570\u4f1a\u5982\u4f55\u5462\uff1f \u5982\u679c\u60a8\u67e5\u9605\u8fc7\u6807\u51c6\u5e93\u4e2d <functional> \u5934\u6587\u4ef6\u7684\u6e90\u7801\uff0c\u4f60\u4f1a\u53d1\u73b0\u4e00\u4e9b\u53ef\u5728\u6807\u51c6\u7b97\u6cd5\u4e2d\u88ab\u7acb\u5373\u4f7f\u7528\u7684\u7c7b\u578b\u6216\u8005\u51fd\u6570\u3002 \u4f8b\u5982\uff1a std::plus<T>() - \u4f20\u5165\u4e24\u4e2a\u53c2\u6570\u5e76\u8fd4\u56de\u4ed6\u4eec\u7684\u548c std::minus<T>() - \u4f20\u5165\u4e24\u4e2a\u53c2\u6570\u5e76\u8fd4\u56de\u4ed6\u4eec\u7684\u5dee std::less<T>() - \u4f20\u5165\u4e24\u4e2a\u53c2\u6570\u5e76\u5224\u65ad\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u5426\u5c0f\u4e8e\u7b2c\u4e8c\u4e2a\u53c2\u6570 std::greater_equal<T>() - \u4f20\u5165\u4e24\u4e2a\u53c2\u6570\u5e76\u5224\u65ad\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u5426\u5927\u4e8e\u7b49\u4e8e\u7b2c\u4e8c\u4e2a\u53c2\u6570 std::bind1st - \u7528\u7ed9\u5b9a\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u521b\u5efa\u4e00\u4e2a\u53ef\u8c03\u7528\u5bf9\u8c61 std::bind2nd - \u7528\u7ed9\u5b9a\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u521b\u5efa\u4e00\u4e2a\u53ef\u8c03\u7528\u5bf9\u8c61 \u7b49\u7b49 \u8ba9\u6211\u4eec\u7f16\u5199\u4e00\u4e9b\u5145\u5206\u5229\u7528\u8fd9\u4e9b\u8f85\u52a9\u51fd\u6570\u7684\u4ee3\u7801\uff1a \u4ee3\u7801 1-6 \u4f7f\u7528\u65e7 C++98/03 \u7684\u8f85\u52a9\u51fd\u6570 #include <algorithm> #include <functional> #include <vector> int main () { std :: vector < int > v ; v . push_back ( 1 ); v . push_back ( 2 ); // .. push back until 9... const size_t smaller5 = std :: count_if ( v . begin (), v . end (), std :: bind2nd ( std :: less < int > (), 5 )); return smaller5 ; } \u8fd9\u4e2a\u4f8b\u5b50\u4f7f\u7528 std::less \u5e76\u4e14\u7528 std::bind2nd \u6765\u56fa\u5b9a\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u540c\u65f6\uff0c\u8fd9\u4e2a\u6574\u4f53\u53c8\u88ab\u4f20\u5165\u4e86 std::count_if \u3002 \u60a8\u53ef\u80fd\u4f1a\u731c\u5230\uff0c\u8fd9\u4e2a\u4ee3\u7801\u53ef\u4ee5\u5c55\u5f00\u4e3a\u4e00\u4e2a\u7528\u6765\u7b80\u5355\u5224\u65ad\u5927\u5c0f\u5173\u7cfb\u7684\u51fd\u6570\uff1a return x < 5; \u5982\u679c\u4f60\u51c6\u5907\u597d\u4f7f\u7528\u7b49\u591a\u7684\u8f85\u52a9\u51fd\u6570\uff0c\u60a8\u4e5f\u53ef\u4ee5\u770b\u770b boost \u5e93\uff0c\u4f8b\u5982 boost::bind \u3002 \u4e0d\u5e78\u7684\u662f\uff0c\u6700\u4e3b\u8981\u7684\u95ee\u9898\u662f\u8fd9\u79cd\u65b9\u5f0f\u5341\u5206\u7684\u590d\u6742\u5e76\u4e14\u8bed\u6cd5\u4e0d\u6613\u5b66\u4e60\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u4f7f\u7528\u66f4\u591a\u7684\u8f85\u52a9\u51fd\u6570\u5c06\u4f1a\u5bfc\u81f4\u4ee3\u7801\u53d8\u5f97\u5f88\u4e0d\u81ea\u7136\u3002 \u6765\u770b\u770b\u8fd9\u4e2a\uff1a \u4ee3\u7801 1-7 \u7ec4\u5408\u4f7f\u7528\u8f85\u52a9\u51fd\u6570 using std :: placeholders :: _1 ; std :: vector < int > v ; v . push_back ( 1 ); v . push_back ( 2 ); // .. push back until 9... const size_t val = std :: count_if ( v . begin (), v . end (), std :: bind ( std :: logical_and < bool > (), std :: bind ( std :: greater < int > (), _1 , 2 ), std :: bind ( std :: less_equal < int > (), _1 , 6 ))); // _1 comes from the std::placeholder namespace \u8fd9\u4e2a\u7ec4\u5408\u4f7f\u7528 std::bind \uff08\u5f53\u7136\u4e86 std::bind \u662f C++11 \u7684\u529f\u80fd\uff0c\u800c\u4e0d\u662f C++98/03\uff09\u5e76\u7ed3\u5408 std::greater \u548c std::less_equal \u751a\u81f3\u8054\u7cfb\u5230 std::logical_and \u3002 \u54e6\u5bf9\uff0c _1 \u662f\u4e00\u4e2a\u7b2c\u4e00\u8f93\u5165\u53c2\u6570\u7684\u5360\u4f4d\u7b26\u3002 \u5c3d\u7ba1\u4e0a\u8ff0\u4ee3\u7801\u6709\u6548\uff0c\u5e76\u4e14\u60a8\u53ef\u4ee5\u5728\u672c\u5730\u5b9a\u4e49\u5b83\uff0c\u4f46\u60a8\u4e0d\u5f97\u4e0d\u5fcd\u75db\u5b83\u5f88\u590d\u6742\u4e14\u8bed\u6cd5\u4e0d\u81ea\u7136\u3002 \u66f4\u4f55\u51b5\u8fd9\u4e2a\u7ec4\u5408\u53ea\u4ee3\u8868\u4e00\u4e2a\u7b80\u5355\u7684\u6761\u4ef6\uff1a return x > 2 && x <= 6; \u3002 \u6709\u4ec0\u4e48\u66f4\u597d\u4ee5\u53ca\u66f4\u81ea\u7136\u7684\u65b9\u5f0f\u5417\uff1f 4. \u65b0\u7279\u6027\u7684\u52a8\u673a \u5728 C++98/03 \u4e2d\uff0c\u6709\u5f88\u591a\u65b9\u5f0f\u6765\u58f0\u660e\u6216\u8005\u4f20\u9012\u4e00\u4e2a\u53ef\u8c03\u7528\u5bf9\u8c61\u7ed9\u6807\u51c6\u5e93\u7684\u7b97\u6cd5\u6216\u8005\u516c\u7528\u7ec4\u4ef6\u3002 \u7136\u800c\uff0c\u6240\u6709\u7684\u8fd9\u4e9b\u90fd\u4e00\u4e9b\u9650\u5236\u3002\u4f8b\u5982\uff0c\u4f60\u4e0d\u80fd\u58f0\u660e\u4e00\u4e2a\u672c\u5730\u7684\u4eff\u51fd\u6570\u5bf9\u8c61\uff0c\u4ee5\u53ca\u4f7f\u7528\u8f85\u52a9\u51fd\u6570\u7ec4\u5408\u8d77\u6765\u7684\u4e00\u4e2a\u590d\u6742\u8868\u8fbe\u3002 \u5e78\u8fd0\u7684\u662f\uff0c\u5728 C++11 \u4e2d\u6211\u4eec\u6709\u4e86\u5f88\u591a\u65b0\u7684\u63d0\u5347\u3002 \u9996\u5148\uff0cC++ \u59d4\u5458\u4f1a\u89e3\u9664\u4e86\u4f7f\u7528\u672c\u5730\u7c7b\u578b\u7684\u6a21\u677f\u8fdb\u884c\u5b9e\u4f8b\u5316\u7684\u9650\u5236\u3002 \u73b0\u5728\u4f60\u53ef\u4ee5\u5728\u4f60\u9700\u8981\u7684\u5730\u65b9\u7f16\u5199\u672c\u5730\u4eff\u51fd\u6570\u4e86\u3002 \u8fd8\u6709\uff0cC++11 \u5e26\u6765\u4e86\u53e6\u4e00\u4e2a\u60f3\u6cd5\uff1a\u5982\u679c\u7f16\u8bd1\u5668\u53ef\u4ee5\u4e3a\u5f00\u53d1\u4eba\u5458\u201c\u7f16\u5199\u201d\u5c0f\u5de7\u7b80\u6d01\u7684\u4eff\u51fd\u6570\u5462\uff1f \u8fd9\u610f\u5473\u7740\u901a\u8fc7\u4e00\u4e9b\u65b0\u8bed\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u201c\u5c31\u5730\u201d\u521b\u5efa\u4eff\u51fd\u6570\u3002 C++ \u4ece\u6b64\u5f00\u542f\u4e86\u66f4\u7b80\u6d01\u3001\u66f4\u7d27\u51d1\u7684\u8bed\u6cd5\u7684\u65b0\u7bc7\u7ae0\u3002 \u8fd9\u5c31\u662f Lambda \u8868\u8fbe\u5f0f\u7684\u8bde\u751f\u3002 \u5982\u679c\u6211\u4eec\u56de\u5934\u770b\u770b N3337 \u8349\u6848\u2014\u2014C++11 \u7684\u6700\u7ec8\u8349\u6848\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5173\u4e8e lambda \u7684\u72ec\u7acb\u7ae0\u8282 [expr.prim.lambda] \u4e0b\u4e2a\u7ae0\u8282\uff0c\u6211\u4eec\u5c06\u4e00\u8d77\u770b\u770b\u8fd9\u4e2a\u65b0\u7684 C++ \u7279\u6027\u3002","title":"Lambda in C++98/03"},{"location":"Chapter1/#\u4e00lambda-in-c9803","text":"\u51e1\u662f\u5728\u5f00\u59cb\u4e4b\u524d\uff0c\u5bf9\u4e3b\u9898\u7684\u80cc\u666f\u505a\u51fa\u4e00\u4e9b\u4ecb\u7ecd\u603b\u662f\u597d\u7684\u3002 \u6240\u4ee5\uff0c\u6211\u4eec\u9996\u5148\u4f1a\u804a\u4e00\u804a\u5728\u6ca1\u6709\u73b0\u4ee3 C++ \u4e4b\u524d\u7684\u90a3\u4e9b C++ \u4ee3\u7801\u3002 \u5728\u672c\u7ae0\uff0c\u4f60\u53ef\u4ee5\u5b66\u5230\uff1a \u5982\u4f55\u4ece\u6807\u51c6\u5e93\u4f20\u9012\u4e00\u4e2a\u4eff\u51fd\u6570\u7ed9\u7b97\u6cd5 \u4eff\u51fd\u6570\u548c\u51fd\u6570\u6307\u9488\u7684\u5c40\u9650\u6027 \u4e3a\u4ec0\u4e48\u8f85\u52a9\u51fd\u6570\u4e0d\u591f\u597d\u4f7f C++0x/C++11 \u4e2d\u6dfb\u52a0\u65b0\u7279\u6027\u7684\u52a8\u673a","title":"\u4e00\u3001Lambda in C++98/03"},{"location":"Chapter1/#1-c9803-\u4e2d\u7684\u53ef\u8c03\u7528\u5bf9\u8c61","text":"\u9996\u5148\u6765\u804a\u804a\u6807\u51c6\u5e93\u4e2d\u57fa\u672c\u601d\u60f3\u4e4b\u4e00\u7684\u7b97\u6cd5\uff0c\u50cf std::sort \uff0c std::for_each \uff0c std::transform \u7b49\uff0c\u53ef\u4ee5\u8c03\u7528\u4efb\u4f55\u53ef\u8c03\u7528\u5bf9\u8c61\u4ee5\u53ca\u8c03\u7528\u8f93\u5165\u5bb9\u5668\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20\u3002 \u7136\u800c\uff0c\u5728 C++98/03 \u4e2d\uff0c\u8fd9\u4e9b\u64cd\u4f5c\u53ea\u5305\u542b\u6307\u5411\u51fd\u6570\u7684\u6307\u9488\u6216\u8005\u4eff\u51fd\u6570\u3002 \u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u6765\u770b\u4e00\u770b\u4e00\u4e2a\u6253\u5370 vector \u4e2d\u5168\u90e8\u5143\u7d20\u7684\u5e94\u7528\u7a0b\u5e8f\u3002 \u5728\u7b2c\u4e00\u7248\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u89c4\u8303\u7684\u51fd\u6570\uff1a \u4ee3\u7801 1-1 \u57fa\u7840\u8f93\u51fa\u51fd\u6570 #include <algorithm> #include <iostream> #include <vector> void PrintFunc ( int x ) { std :: cout << x << std :: endl ; } int main () { std :: vector < int > v ; v . push_back ( 1 ); v . push_back ( 2 ); std :: for_each ( v . begin (), v . end (), PrintFunc ); } \u4e0a\u9762\u7684\u4ee3\u7801\u4f7f\u7528\u4e86 std::for_each \u6765\u4ece vector \u4e2d\u8fed\u4ee3\u6bcf\u4e2a\u5143\u7d20\uff08\u8bf7\u6ce8\u610f\u6b64\u65f6\u7684 C++ \u4e3a 98/03 \u7248\u672c\uff0c\u5c1a\u4e0d\u652f\u6301\u8303\u56f4\u5f0f\u5faa\u73af\uff09\uff0c\u540c\u65f6\u4f20\u9012\u4e86\u4e00\u4e2a\u53ef\u8c03\u7528\u5bf9\u8c61 PrintFunc \u3002 \u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u7b80\u5355\u7684\u51fd\u6570\u8f6c\u5316\u4e3a\u4e00\u4e2a\u4eff\u51fd\u6570\uff1a \u4ee3\u7801 1-2 \u57fa\u7840\u8f93\u51fa\u4eff\u51fd\u6570 #include <algorithm> #include <iostream> #include <vector> struct PrintFunctor { void operator ()( int x ) const { std :: cout << x << std :: endl ; } } int main () { std :: vector < int > v ; v . push_back ( 1 ); v . push_back ( 2 ); std :: for_each ( v . begin (), v . end (), PrintFunctor ()); } \u672c\u7528\u4f8b\u91cd\u8f7d\u4e86\u64cd\u4f5c\u7b26 () \u6765\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u4eff\u51fd\u6570\u3002 \u76f8\u8f83\u4e8e\u901a\u5e38\u65e0\u72b6\u6001\u7684\u51fd\u6570\u6307\u9488\uff0c\u4eff\u51fd\u6570\u80fd\u591f\u6301\u6709\u6210\u5458\u53d8\u91cf\u6765\u5141\u8bb8\u5b58\u50a8\u72b6\u6001\u3002 \u4e00\u4e2a\u4f8b\u5b50\uff1a\u7edf\u8ba1\u5728\u7b97\u6cd5\u4e2d\u8c03\u7528\u53ef\u8c03\u7528\u5bf9\u8c61\u7684\u6b21\u6570\u3002 \u8fd9\u9700\u8981\u5728\u4eff\u51fd\u6570\u4e2d\u5b58\u50a8\u4e00\u4e2a\u8ba1\u6570\u5668\uff0c\u5e76\u4e14\u5728\u6bcf\u6b21 lambda \u8c03\u7528\u65f6\u66f4\u65b0\u8ba1\u6570\uff1a \u4ee3\u7801 1-3 \u5e26\u6709\u72b6\u6001\u7684\u4eff\u51fd\u6570 #include <algorithm> #include <iostream> #include <vector> struct PrintFunctor { PrintFunctor () : numCalls ( 0 ){} void operator ()( int x ) const { std :: cout << x << std :: endl ; ++ numCalls ; } mutable int numCalls ; }; int main () { std :: vector < int > v ; v . push_back ( 1 ); v . push_back ( 2 ); const PrintFunctor visitor = std :: for_each ( v . begin (), v . end (), PrintFunctor ()); std :: cout << \"num calls: \" << visitor . numCalls << '\\n' ; } \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u6210\u5458\u53d8\u91cf numCalls \u6765\u7edf\u8ba1\u8c03\u7528\u64cd\u4f5c\u7b26\u88ab\u8c03\u7528\u7684\u6b21\u6570\u3002 \u7531\u4e8e\u8c03\u7528\u64cd\u4f5c\u7b26\u662f\u4e00\u4e2a const \u6210\u5458\u51fd\u6570\uff0c\u6211\u4f7f\u7528\u4e86 mutable \u7c7b\u578b\u7684\u53d8\u91cf\u3002 \u5982\u60a8\u6240\u6599\uff0c\u6211\u4eec\u5f97\u5230\u7684\u8f93\u51fa\u7ed3\u679c\u5c31\u662f\uff1a 1 2 num calls: 2 \u6211\u4eec\u4e5f\u53ef\u4ee5\u4ece\u8c03\u7528\u8303\u56f4\u4e2d\u300c\u6355\u83b7\u300d\u53d8\u91cf\u3002 \u60f3\u8981\u8fbe\u5230\u8fd9\u4e2a\u6548\u679c\uff0c\u6211\u4eec\u9700\u8981\u5728\u4eff\u51fd\u6570\u4e2d\u521b\u5efa\u4e00\u4e2a\u6210\u5458\u53d8\u91cf\u5e76\u4e14\u5728\u6784\u9020\u5668\u4e2d\u521d\u59cb\u5316\u5b83\u3002 \u4ee3\u7801 1-4 \u5e26\u6709\u201c\u6355\u83b7\u201d\u53d8\u91cf\u7684\u4eff\u51fd\u6570 #include <algorithm> #include <iostream> #include <string> #include <vector> struct PrintFunctor { PrintFunctor ( const std :: string & str ) : strText ( str ), numCalls ( 0 ) {} void operator ()( int x ) const { std :: cout << strText << x << '\\n' ; ++ numCalls ; } std :: string strText ; mutable int numCalls ; }; int main () { std :: vector < int > v ; v . push_back ( 1 ); v . push_back ( 2 ); const std :: string introText ( \"Elem: \" ); const PrintFunctor visitor = std :: for_each ( v . begin (), v . end (), PrintFunctor ( introText )); std :: cout << \"num calls: \" << visitor . numCalls << '\\n' ; } \u5728\u8fd9\u4e2a\u7248\u672c\u4e2d\uff0c PrintFunctor \u4f7f\u7528\u4e86\u4e00\u4e2a\u989d\u5916\u7684\u53c2\u6570\u6765\u521d\u59cb\u5316\u6210\u5458\u53d8\u91cf\u3002 \u7136\u540e\u8fd9\u4e2a\u53d8\u91cf\u5728\u8c03\u7528\u64cd\u4f5c\u7b26\u4e2d\u88ab\u4f7f\u7528\u3002\u6240\u4ee5\u6700\u7ec8\u671f\u671b\u7684\u8f93\u51fa\u662f\uff1a Elem: 1 Elem: 2 num calls: 2","title":"1. C++98/03 \u4e2d\u7684\u53ef\u8c03\u7528\u5bf9\u8c61"},{"location":"Chapter1/#2-\u4eff\u51fd\u6570\u7684\u4e00\u4e9b\u95ee\u9898","text":"\u5982\u60a8\u6240\u89c1\uff0c\u4eff\u51fd\u6570\u7684\u529f\u80fd\u5f88\u5f3a\u5927\u3002\u4ed6\u4eec\u7531\u4e00\u4e2a\u72ec\u7acb\u7684\u7c7b\u6240\u8868\u793a\uff0c\u60a8\u53ef\u4ee5\u6839\u636e\u60a8\u7684\u9700\u8981\u6765\u8bbe\u8ba1\u3001\u6539\u9020\u5e76\u4f7f\u7528\u5b83\u3002 \u7136\u800c C++98/03 \u95ee\u9898\u5728\u4e8e\u9700\u8981\u5728\u4e0d\u540c\u7684\u5730\u65b9\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6216\u8005\u4eff\u51fd\u6570\uff0c\u800c\u4e0d\u662f\u7b97\u6cd5\u8c03\u7528\u5bf9\u8c61\u672c\u8eab\u3002 \u8fd9\u610f\u5473\u7740\u8fd9\u6bb5\u4ee3\u7801\u4f1a\u5728\u6e90\u6587\u4ef6\u7684\u4e2d\u5360\u7528\u51e0\u5341\u5230\u4e0a\u767e\u884c\uff0c\u800c\u4e14\u8fd9\u6837\u5206\u79bb\u7684\u5199\u6cd5\u5e76\u4e0d\u5229\u4e8e\u65e5\u540e\u4ee3\u7801\u7684\u7ef4\u62a4\u3002 \u4e00\u4e2a\u53ef\u884c\u7684\u89e3\u51b3\u529e\u6cd5\uff0c\u90a3\u5c31\u662f\u518d\u7f16\u5199\u4e00\u4e2a\u672c\u5730\u4eff\u51fd\u6570\u7c7b\uff0c\u56e0\u4e3a C++ \u652f\u6301\u8fd9\u6837\u7684\u8bed\u6cd5\uff0c\u4f46\u662f\u8fd9\u4e0d\u610f\u5473\u7740\u5b83\u80fd\u5982\u9884\u671f\u4e00\u6837\u5de5\u4f5c\u3002 \u6765\u770b\u770b\u8fd9\u6bb5\u4ee3\u7801\uff1a \u4ee3\u7801 1-5 \u672c\u5730\u4eff\u51fd\u6570\u7c7b int main () { struct PrintFunctor { void operator ()( int x ) const { std :: cout << x << std :: endl ; } }; std :: vector < int > v ( 10 , 1 ); std :: for_each ( v . begin (), v . end (), PrintFunctor ()); } \u60a8\u53ef\u4ee5\u7528 GCC \u6765\u5c1d\u8bd5\u7f16\u8bd1\u5b83\uff08\u5e26\u4e0a C++98 \u7684\u6807\u7b7e -std=c++98 \uff09\uff0c\u5f53\u7136\u4e0d\u51fa\u610f\u5916\uff0c\u5c06\u4f1a\u51fa\u73b0\u5982\u4e0b\u7684\u7f16\u8bd1\u9519\u8bef\uff1a error: template argument for 'template<class _IIter, class _Funct> _Funct std::for_each(_IIter, _IIter, _Funct)' uses local type 'main()::PrintFunctor' \u5728 C++98/03 \u4e2d\uff0c\u4f60\u4e0d\u80fd\u7528\u672c\u5730\u7c7b\u578b\u6765\u521d\u59cb\u5316\u4e00\u4e2a\u6a21\u677f\u3002 \u5f53\u8ba4\u8bc6\u5230\u5e76\u7406\u89e3\u4e86\u8fd9\u4e9b\u9650\u5236\u4ea7\u751f\u7684\u539f\u56e0\uff0cC++ \u5f00\u53d1\u8005\u5c31\u53ef\u4ee5\u5728 C++98/03 \u4e2d\u627e\u5230\u4e00\u79cd\u89e3\u51b3\u529e\u6cd5\uff1a\u4f7f\u7528\u4e00\u7ec4\u8f85\u52a9\u51fd\u6570\u3002","title":"2. \u4eff\u51fd\u6570\u7684\u4e00\u4e9b\u95ee\u9898"},{"location":"Chapter1/#3-\u4f7f\u7528\u8f85\u52a9\u51fd\u6570","text":"\u4f7f\u7528\u4e00\u4e9b\u8f85\u52a9\u51fd\u6570\u6216\u8005\u9884\u5b9a\u4e49\u597d\u7684\u4eff\u51fd\u6570\u4f1a\u5982\u4f55\u5462\uff1f \u5982\u679c\u60a8\u67e5\u9605\u8fc7\u6807\u51c6\u5e93\u4e2d <functional> \u5934\u6587\u4ef6\u7684\u6e90\u7801\uff0c\u4f60\u4f1a\u53d1\u73b0\u4e00\u4e9b\u53ef\u5728\u6807\u51c6\u7b97\u6cd5\u4e2d\u88ab\u7acb\u5373\u4f7f\u7528\u7684\u7c7b\u578b\u6216\u8005\u51fd\u6570\u3002 \u4f8b\u5982\uff1a std::plus<T>() - \u4f20\u5165\u4e24\u4e2a\u53c2\u6570\u5e76\u8fd4\u56de\u4ed6\u4eec\u7684\u548c std::minus<T>() - \u4f20\u5165\u4e24\u4e2a\u53c2\u6570\u5e76\u8fd4\u56de\u4ed6\u4eec\u7684\u5dee std::less<T>() - \u4f20\u5165\u4e24\u4e2a\u53c2\u6570\u5e76\u5224\u65ad\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u5426\u5c0f\u4e8e\u7b2c\u4e8c\u4e2a\u53c2\u6570 std::greater_equal<T>() - \u4f20\u5165\u4e24\u4e2a\u53c2\u6570\u5e76\u5224\u65ad\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u5426\u5927\u4e8e\u7b49\u4e8e\u7b2c\u4e8c\u4e2a\u53c2\u6570 std::bind1st - \u7528\u7ed9\u5b9a\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u521b\u5efa\u4e00\u4e2a\u53ef\u8c03\u7528\u5bf9\u8c61 std::bind2nd - \u7528\u7ed9\u5b9a\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u521b\u5efa\u4e00\u4e2a\u53ef\u8c03\u7528\u5bf9\u8c61 \u7b49\u7b49 \u8ba9\u6211\u4eec\u7f16\u5199\u4e00\u4e9b\u5145\u5206\u5229\u7528\u8fd9\u4e9b\u8f85\u52a9\u51fd\u6570\u7684\u4ee3\u7801\uff1a \u4ee3\u7801 1-6 \u4f7f\u7528\u65e7 C++98/03 \u7684\u8f85\u52a9\u51fd\u6570 #include <algorithm> #include <functional> #include <vector> int main () { std :: vector < int > v ; v . push_back ( 1 ); v . push_back ( 2 ); // .. push back until 9... const size_t smaller5 = std :: count_if ( v . begin (), v . end (), std :: bind2nd ( std :: less < int > (), 5 )); return smaller5 ; } \u8fd9\u4e2a\u4f8b\u5b50\u4f7f\u7528 std::less \u5e76\u4e14\u7528 std::bind2nd \u6765\u56fa\u5b9a\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u540c\u65f6\uff0c\u8fd9\u4e2a\u6574\u4f53\u53c8\u88ab\u4f20\u5165\u4e86 std::count_if \u3002 \u60a8\u53ef\u80fd\u4f1a\u731c\u5230\uff0c\u8fd9\u4e2a\u4ee3\u7801\u53ef\u4ee5\u5c55\u5f00\u4e3a\u4e00\u4e2a\u7528\u6765\u7b80\u5355\u5224\u65ad\u5927\u5c0f\u5173\u7cfb\u7684\u51fd\u6570\uff1a return x < 5; \u5982\u679c\u4f60\u51c6\u5907\u597d\u4f7f\u7528\u7b49\u591a\u7684\u8f85\u52a9\u51fd\u6570\uff0c\u60a8\u4e5f\u53ef\u4ee5\u770b\u770b boost \u5e93\uff0c\u4f8b\u5982 boost::bind \u3002 \u4e0d\u5e78\u7684\u662f\uff0c\u6700\u4e3b\u8981\u7684\u95ee\u9898\u662f\u8fd9\u79cd\u65b9\u5f0f\u5341\u5206\u7684\u590d\u6742\u5e76\u4e14\u8bed\u6cd5\u4e0d\u6613\u5b66\u4e60\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u4f7f\u7528\u66f4\u591a\u7684\u8f85\u52a9\u51fd\u6570\u5c06\u4f1a\u5bfc\u81f4\u4ee3\u7801\u53d8\u5f97\u5f88\u4e0d\u81ea\u7136\u3002 \u6765\u770b\u770b\u8fd9\u4e2a\uff1a \u4ee3\u7801 1-7 \u7ec4\u5408\u4f7f\u7528\u8f85\u52a9\u51fd\u6570 using std :: placeholders :: _1 ; std :: vector < int > v ; v . push_back ( 1 ); v . push_back ( 2 ); // .. push back until 9... const size_t val = std :: count_if ( v . begin (), v . end (), std :: bind ( std :: logical_and < bool > (), std :: bind ( std :: greater < int > (), _1 , 2 ), std :: bind ( std :: less_equal < int > (), _1 , 6 ))); // _1 comes from the std::placeholder namespace \u8fd9\u4e2a\u7ec4\u5408\u4f7f\u7528 std::bind \uff08\u5f53\u7136\u4e86 std::bind \u662f C++11 \u7684\u529f\u80fd\uff0c\u800c\u4e0d\u662f C++98/03\uff09\u5e76\u7ed3\u5408 std::greater \u548c std::less_equal \u751a\u81f3\u8054\u7cfb\u5230 std::logical_and \u3002 \u54e6\u5bf9\uff0c _1 \u662f\u4e00\u4e2a\u7b2c\u4e00\u8f93\u5165\u53c2\u6570\u7684\u5360\u4f4d\u7b26\u3002 \u5c3d\u7ba1\u4e0a\u8ff0\u4ee3\u7801\u6709\u6548\uff0c\u5e76\u4e14\u60a8\u53ef\u4ee5\u5728\u672c\u5730\u5b9a\u4e49\u5b83\uff0c\u4f46\u60a8\u4e0d\u5f97\u4e0d\u5fcd\u75db\u5b83\u5f88\u590d\u6742\u4e14\u8bed\u6cd5\u4e0d\u81ea\u7136\u3002 \u66f4\u4f55\u51b5\u8fd9\u4e2a\u7ec4\u5408\u53ea\u4ee3\u8868\u4e00\u4e2a\u7b80\u5355\u7684\u6761\u4ef6\uff1a return x > 2 && x <= 6; \u3002 \u6709\u4ec0\u4e48\u66f4\u597d\u4ee5\u53ca\u66f4\u81ea\u7136\u7684\u65b9\u5f0f\u5417\uff1f","title":"3. \u4f7f\u7528\u8f85\u52a9\u51fd\u6570"},{"location":"Chapter1/#4-\u65b0\u7279\u6027\u7684\u52a8\u673a","text":"\u5728 C++98/03 \u4e2d\uff0c\u6709\u5f88\u591a\u65b9\u5f0f\u6765\u58f0\u660e\u6216\u8005\u4f20\u9012\u4e00\u4e2a\u53ef\u8c03\u7528\u5bf9\u8c61\u7ed9\u6807\u51c6\u5e93\u7684\u7b97\u6cd5\u6216\u8005\u516c\u7528\u7ec4\u4ef6\u3002 \u7136\u800c\uff0c\u6240\u6709\u7684\u8fd9\u4e9b\u90fd\u4e00\u4e9b\u9650\u5236\u3002\u4f8b\u5982\uff0c\u4f60\u4e0d\u80fd\u58f0\u660e\u4e00\u4e2a\u672c\u5730\u7684\u4eff\u51fd\u6570\u5bf9\u8c61\uff0c\u4ee5\u53ca\u4f7f\u7528\u8f85\u52a9\u51fd\u6570\u7ec4\u5408\u8d77\u6765\u7684\u4e00\u4e2a\u590d\u6742\u8868\u8fbe\u3002 \u5e78\u8fd0\u7684\u662f\uff0c\u5728 C++11 \u4e2d\u6211\u4eec\u6709\u4e86\u5f88\u591a\u65b0\u7684\u63d0\u5347\u3002 \u9996\u5148\uff0cC++ \u59d4\u5458\u4f1a\u89e3\u9664\u4e86\u4f7f\u7528\u672c\u5730\u7c7b\u578b\u7684\u6a21\u677f\u8fdb\u884c\u5b9e\u4f8b\u5316\u7684\u9650\u5236\u3002 \u73b0\u5728\u4f60\u53ef\u4ee5\u5728\u4f60\u9700\u8981\u7684\u5730\u65b9\u7f16\u5199\u672c\u5730\u4eff\u51fd\u6570\u4e86\u3002 \u8fd8\u6709\uff0cC++11 \u5e26\u6765\u4e86\u53e6\u4e00\u4e2a\u60f3\u6cd5\uff1a\u5982\u679c\u7f16\u8bd1\u5668\u53ef\u4ee5\u4e3a\u5f00\u53d1\u4eba\u5458\u201c\u7f16\u5199\u201d\u5c0f\u5de7\u7b80\u6d01\u7684\u4eff\u51fd\u6570\u5462\uff1f \u8fd9\u610f\u5473\u7740\u901a\u8fc7\u4e00\u4e9b\u65b0\u8bed\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u201c\u5c31\u5730\u201d\u521b\u5efa\u4eff\u51fd\u6570\u3002 C++ \u4ece\u6b64\u5f00\u542f\u4e86\u66f4\u7b80\u6d01\u3001\u66f4\u7d27\u51d1\u7684\u8bed\u6cd5\u7684\u65b0\u7bc7\u7ae0\u3002 \u8fd9\u5c31\u662f Lambda \u8868\u8fbe\u5f0f\u7684\u8bde\u751f\u3002 \u5982\u679c\u6211\u4eec\u56de\u5934\u770b\u770b N3337 \u8349\u6848\u2014\u2014C++11 \u7684\u6700\u7ec8\u8349\u6848\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5173\u4e8e lambda \u7684\u72ec\u7acb\u7ae0\u8282 [expr.prim.lambda] \u4e0b\u4e2a\u7ae0\u8282\uff0c\u6211\u4eec\u5c06\u4e00\u8d77\u770b\u770b\u8fd9\u4e2a\u65b0\u7684 C++ \u7279\u6027\u3002","title":"4. \u65b0\u7279\u6027\u7684\u52a8\u673a"},{"location":"Chapter2/","text":"\u4e8c\u3001Lambda in C++11 \u8fd9\u771f\u662f\u6fc0\u52a8\u4eba\u5fc3\u7684\u65f6\u523b\u3002C++ \u59d4\u5458\u4f1a\u542c\u53d6\u4e86\u5f00\u53d1\u8005\u4eec\u7684\u58f0\u97f3\uff0c\u4ece C++11 \u5f00\u59cb\uff0c\u6211\u4eec\u7ec8\u4e8e\u62e5\u6709\u4e86 Lambda \u8868\u8fbe\u5f0f\u3002 Lambda \u5f88\u5feb\u5c31\u6210\u4e3a\u4e86\u73b0\u4ee3 C++ \u6700\u5e7f\u4e3a\u8ba4\u53ef\u548c\u4f7f\u7528\u7684\u7279\u6027\u3002 \u4f60\u53ef\u4ee5\u9605\u8bfb N3337 \u8349\u6848\u2014\u2014C++11 \u7684\u6700\u7ec8\u8349\u6848\u2014\u2014\u4e2d [expr.prim.lambda] \u7ae0\u8282\u4e2d\u7684 Lambda \u89c4\u8303\u3002 \u6211\u8ba4\u4e3a\u59d4\u5458\u4f1a\u628a Lambda \u52a0\u5165\u8fdb\u6765\u662f\u4e00\u4e2a\u660e\u667a\u7684\u505a\u6cd5\uff0c\u5bf9\u4e8e C++ \u8fd9\u4e2a\u8bed\u8a00\u672c\u8eab\u800c\u8a00\u3002 \u4ed6\u4eec\u5f15\u8fdb\u4e86\u4e00\u79cd\u65b0\u7684\u8bed\u6cd5\uff0c\u800c\u7f16\u8bd1\u5668\u4f1a\u53bb\u5c06\u5176\u5c55\u5f00\u4e3a\u4e00\u4e2a\u672a\u547d\u540d\u7684\u201c\u9690\u85cf\u201d\u65b9\u51fd\u6570\u5bf9\u8c61\u3002\u5f15\u5165 Lambda\uff0c\u5bf9\u4e8e\u4e00\u79cd\u771f\u6b63\u7684\u5f3a\u7c7b\u578b\u8bed\u8a00\uff0c\u6709\u5f88\u591a\u4f18\u70b9\uff08\u5f53\u7136\u4e5f\u6709\u7f3a\u70b9\uff09\uff0c\u540c\u65f6\u8fd9\u79cd\u7279\u6027\u4e5f\u66f4\u5bb9\u6613\u53bb\u63a8\u65ad\u4ee3\u7801\u7684\u610f\u56fe\u3002 \u5728\u672c\u7ae0\u8282\uff0c\u4f60\u53ef\u4ee5\u5b66\u4e60\u5230\uff1a Lambda \u7684\u57fa\u7840\u8bed\u6cd5 \u5982\u4f55\u6355\u83b7\u53d8\u91cf \u5982\u4f55\u6355\u83b7\u6210\u5458\u53d8\u91cf Lambda \u7684\u8fd4\u56de\u7c7b\u578b \u4ec0\u4e48\u662f\u95ed\u5305\u5bf9\u8c61 Lambda \u5982\u4f55\u8f6c\u6362\u4e3a\u4e00\u4e2a\u51fd\u6570\u6307\u9488\u4ee5\u53ca\u7528 C \u98ce\u683c\u7684 API \u6765\u8c03\u7528 IIFE \u662f\u4ec0\u4e48 \u5982\u4f55\u4ece Lambda \u8868\u8fbe\u5f0f\u7ee7\u627f\u4ee5\u53ca\u5b83\u4e3a\u4ec0\u4e48\u6709\u7528 1. Lambda \u8868\u8fbe\u5f0f\u7684\u8bed\u6cd5 \u4e0b\u9762\u5c31\u662f Lambda \u8bed\u6cd5\u7684\u300c\u516c\u5f0f\u300d\u548c\u8bf4\u660e\uff1a [] () specifiers exception attr -> ret { /*code; */ } ^ ^ ^ ^ | | | | | | | \u53ef\u9009: \u5c3e\u90e8\u8fd4\u56de\u7c7b\u578b | | | | | \u53ef\u9009: \u53ef\u53d8\u3001\u5f02\u5e38\u8bf4\u660e\u6216\u8005 noexcept \u3001\u5c5e\u6027 | | | \u53c2\u6570\u5217\u8868 (\u5f53\u4e0d\u6dfb\u52a0\u8bf4\u660e\u7b26\u65f6\u53ef\u9009) | Lambda \u5f15\u5165\u5668\u4ee5\u53ca\u6355\u83b7\u5217\u8868(\u53ef\u9009) \u5728\u6211\u4eec\u5f00\u59cb\u5b66\u4e60 Lambda \u4e4b\u524d\uff0c\u9700\u8981\u4ece C++ \u6807\u51c6\u4e2d\u5f15\u5165\u4e00\u4e9b\u6838\u5fc3\u5b9a\u4e49\uff1a \u95ed\u5305\u5bf9\u8c61\u5728 [expr.prim.lambda#2] \u4e2d\uff0c\u6709\u5982\u4e0b\u5b9a\u4e49\uff1a \u5bf9 lambda \u8868\u8fbe\u5f0f\u8fdb\u884c\u6c42\u503c\u4f1a\u4ea7\u751f\u4e00\u4e2a prvalue \u7c7b\u578b\u7684\u4e34\u65f6\u503c\u3002\u8fd9\u4e2a\u4e34\u65f6\u5bf9\u8c61\u53eb\u505a \u95ed\u5305\u5bf9\u8c61 \u3002 \u95ed\u5305\u7c7b\u578b\u5728 [expr.prim.lambda#3] \u4e2d\uff0c\u6709\u5982\u4e0b\u5b9a\u4e49\uff1a lambda \u8868\u8fbe\u5f0f\u7684\u7c7b\u578b\uff08\u4e5f\u662f\u95ed\u5305\u5bf9\u8c61\u7684\u7c7b\u578b\uff09\u662f\u552f\u4e00\u672a\u547d\u540d\u7684\u201c\u975e\u8054\u5408\u201d\u7c7b\u578b\u2014\u2014\u79f0\u4e3a \u95ed\u5305\u7c7b\u578b Lambda \u8868\u8fbe\u5f0f\u7684\u4e00\u4e9b\u4f8b\u5b50 // 1. \u4e00\u4e2a\u6700\u7b80\u5355\u7684lambda []{}; \u5728\u7b2c\u4e00\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u4f60\u53ef\u4ee5\u770b\u89c1\u4e00\u4e2a\u201c\u6700\u5c0f\u5de7\u201d\u7684 Lambda \u8868\u8fbe\u5f0f\u3002 \u5b83\u4ec5\u9700\u8981 [] \u548c\u4e00\u4e2a\u7a7a\u7684\u51fd\u6570\u4f53 {} \u3002\u53c2\u6570\u5217\u8868 () \u662f\u53ef\u9009\u7684\uff0c\u6240\u4ee5\u5728\u672c\u4f8b\u4e2d\u4e0d\u9700\u8981\u3002 // 2. \u5e26\u6709\u4e24\u4e2a\u53c2\u6570\u7684lambda []( float f , int a ){ return a * f ;}; []( int a , int b ){ return a < b }; \u5728\u7b2c\u4e8c\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u4f60\u53ef\u4ee5\u770b\u5230\u53c2\u6570\u5728 () \u90e8\u5206\u88ab\u4f20\u5165\u8fdb\u53bb\uff0c\u5c31\u548c\u5e38\u89c4\u51fd\u6570\u4e00\u6837\u3002\u8fd4\u56de\u7c7b\u578b\u662f\u4e0d\u9700\u8981\u7684\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u63a8\u65ad\u5b83\u3002 // 3. \u5e26\u6709\u5c3e\u8fd4\u56de\u7c7b\u578b\u7684lambda []( MyClass t ) -> int { auto a = t . compute (); print ( a ); return a ; }; \u5728\u7b2c\u4e09\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u663e\u793a\u5730\u5b9a\u4e49\u4e86\u8fd4\u56de\u7c7b\u578b\u3002 \u4ece C++11 \u5f00\u59cb\uff0c\u8fd9\u4e2a\u5c3e\u90e8\u8fd4\u56de\u7c7b\u578b\u5176\u5b9e\u548c\u5e38\u89c4\u51fd\u6570\u7684\u58f0\u660e\u65b9\u5f0f\u662f\u4e00\u6837\u7684\u3002 // 4. \u5e26\u6709\u989d\u5916\u63cf\u8ff0\u7b26\u7684lambda [ x ]( int a , int b ) mutable { ++ x ; return a < b ; }; []( float param ) noexcept { return param * param ; }; [ x ]( int a , int b ) mutable noexcept { ++ x ; return a < b ; }; \u7b2c\u56db\u4e2a\u4f8b\u5b50\u5c55\u793a\u4e86\u5728 lambda \u8868\u8fbe\u5f0f\u7684\u51fd\u6570\u4f53\u524d\uff0c\u4f60\u53ef\u4ee5\u6dfb\u52a0\u989d\u5916\u7684\u63cf\u8ff0\u7b26\u3002 \u5982\u4e0a\u4ee3\u7801\uff0c\u6211\u4eec\u4f7f\u7528 mutable \uff08\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u6539\u53d8\u6355\u83b7\u7684\u53d8\u91cf\uff09\u4e5f\u53ef\u4ee5\u662f noexcept \u3002 \u7b2c\u4e09\u4e2a lambda \u8868\u8fbe\u5f0f\u540c\u65f6\u4f7f\u7528\u4e86 mutable \u548c noexcept \uff0c\u8bf7\u6ce8\u610f\u987a\u5e8f\uff08\u5f53\u4e66\u5199\u4e3a noexcept mutable \u65f6\uff0c\u65e0\u6cd5\u7f16\u8bd1\u901a\u8fc7\uff09\u3002 \u867d\u7136\uff08\uff09\u90e8\u5206\u662f\u53ef\u9009\u7684\uff0c\u4f46\u662f\u5982\u679c\u4f60\u60f3\u8981\u5e94\u7528 mutable \u6216\u8005 noexcept \uff0c\u90a3\u4e48 () \u5219\u5fc5\u987b\u5728\u8868\u8fbe\u5f0f\u4e66\u5199\u3002 // 5. \u53ef\u9009()\u7684lambda [ x ] { std :: cout << x ; }; // \u6b63\u786e\uff0c\u65e0\u9700() [ x ] mutable { ++ x ; }; // \u7f16\u8bd1\u5931\u8d25 [ x ]() mutable { ++ x ; }; // \u6b63\u786e\uff0cmutable\u524d\u9700\u8981() [] noexcept {}; // \u7f16\u8bd1\u5931\u8d25 []() noexcept {}; // \u6b63\u786e \u540c\u6837\u7684\u6a21\u5f0f\u4e5f\u53ef\u4ee5\u5728\u5176\u4ed6\u63cf\u8ff0\u7b26\u4e2d\u88ab\u5e94\u7528\u5728 lambda \u4e2d\uff0c\u50cf C++17 \u7684 constexpr \u548c C++20 \u4e2d\u7684 consteval \u3002 \u5c5e\u6027 Lambda \u8bed\u6cd5\u4e5f\u5141\u8bb8\u4f7f\u7528\u4ee5\u4e0b\u5f62\u5f0f\u5f15\u5165\u7684\u5c5e\u6027\uff1a [[attr_name]] \u3002 \u7136\u800c\uff0c\u5982\u679c\u4f60\u8bd5\u56fe\u5728 lambda \u5e94\u7528\u4e00\u4e2a\u5c5e\u6027\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5c5e\u6027\u662f\u88ab\u5e94\u7528\u5728\u8c03\u7528\u64cd\u4f5c\u7b26\u7684\u7c7b\u578b\u4e0a\uff0c\u800c\u4e0d\u662f\u64cd\u4f5c\u7b26\u672c\u8eab\u3002 \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u73b0\u5728\uff08\u751a\u81f3\u5728 C++20\uff09\u4e2d\u90fd\u6ca1\u6709\u5bf9 lambda \u771f\u6b63\u6709\u610f\u4e49\u7684\u5c5e\u6027\u5b58\u5728\u3002 \u5927\u591a\u6570\u7f16\u8bd1\u5668\u751a\u81f3\u4f1a\u62a5\u9519\u3002\u5982\u679c\u6211\u4eec\u4f7f\u7528 C++17 \u7684\u5c5e\u6027\u5e76\u5c1d\u8bd5\u5e94\u7528\u5728 Lambda \u8868\u8fbe\u5f0f\u4e2d\uff1a auto myLambda = []( int a )[[ nodiscard ]]{ return a * a ; }; \u4f7f\u7528 Clang \u7f16\u8bd1\uff0c\u5c31\u4f1a\u4ea7\u751f\u5982\u4e0b\u7684\u7f16\u8bd1\u9519\u8bef\uff1a error: 'nodiscard' attribute cannot be applied to types Lambda \u5728\u7f16\u8bd1\u5668\u7684\u5c55\u5f00 \u603b\u7ed3\u4e00\u4e0b\uff0c\u8fd9\u513f\u6709\u4e00\u4e2a\u57fa\u7840\u7684\u4ee3\u7801\u7528\u4f8b\u6765\u5c55\u793a\u4e0b\u7f16\u5199 Lambda \u8868\u8fbe\u5f0f\u5e76\u5e94\u7528\u5728 std::for_each \u4e2d\u53bb\u3002 \u4f5c\u4e3a\u5bf9\u6bd4\uff0c\u6211\u4eec\u4e5f\u7f16\u5199\u4e86\u4e00\u4e2a\u76f8\u5e94\u529f\u80fd\u7684\u4eff\u51fd\u6570\u7c7b\u578b\uff1a \u4ee3\u7801 2-1 Lambda \u8868\u8fbe\u5f0f\u548c\u5bf9\u5e94\u7684\u4eff\u51fd\u6570 #include <algorithm> #include <iostream> #include <vector> int main () { struct { void operator ()( int x ) const { std :: cout << x << '\\n' ; } } someInstance ; const std :: vector < int > v { 1 , 2 , 3 }; std :: for_each ( v . cbegin (), v . cend (), someInstance ); std :: for_each ( v . cbegin (), v . cend (), []( int x ) { std :: cout << x << '\\n' ; }); } \u5bf9\u4e8e\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u7f16\u8bd1\u5668\u4f1a\u5c06 Lambda \u8868\u8fbe\u5f0f []( int x ) { std :: cout << x << 'n' ; }; \u8f6c\u5316\u4e3a\u4e00\u4e2a\u7b80\u5316\u683c\u5f0f\u7684\u533f\u540d\u4eff\u51fd\u6570\uff1a struct { void operator ()( int x ) const { std :: cout << x << '\\n' ; } } someInstance ; \u8fd9\u79cd\u8f6c\u6362\u6216\u8005\u201c\u5c55\u5f00\u201d\u7684\u8fc7\u7a0b\uff0c\u53ef\u4ee5\u5728 C++ Insights \u4e0a\u67e5\u770b\uff0c\u8fd9\u662f\u4e00\u4e2a\u53ef\u4ee5\u67e5\u770b\u5408\u6cd5 C++ \u4ee3\u7801\u8f6c\u5316\u4e3a\u7f16\u8bd1\u5668\u6e90\u7801\u89c6\u56fe\u7684\u5728\u7ebf\u5de5\u5177\uff0c\u5305\u62ec Lambda \u8fbe\u5f0f\u7684\u5c55\u5f00\u4ee5\u53ca\u6a21\u677f\u521d\u59cb\u5316\u7684\u8fc7\u7a0b\u3002 \u4e0b\u4e00\u8282\u4e2d\uff0c\u6211\u4eec\u4f1a\u6df1\u5165\u7814\u7a76\u4e0b Lambda \u8868\u8fbe\u5f0f\u7684\u5404\u4e2a\u90e8\u5206\u3002 2. Lambda \u8868\u8fbe\u5f0f\u7684\u7c7b\u578b \u7531\u4e8e\u7f16\u8bd1\u5668\u4f1a\u751f\u6210\u7ed9\u6bcf\u4e2a Lambda\uff08\u95ed\u5305\u7c7b\u578b\uff09\u751f\u6210\u4e00\u4e2a\u552f\u4e00\u540d\u79f0\uff0c\u6240\u4ee5\u6ca1\u6709\u529e\u6cd5\u9884\u5148\u201c\u62fc\u5199\u201d\u51fa\u5b83\u7684\u7c7b\u578b\u3002 \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u4f60\u9700\u8981\u4f7f\u7528 auto \u6216\u8005 decltype \u5173\u952e\u5b57\u6765\u63a8\u65ad\u7c7b\u578b\u4e86\u3002 auto myLambda = []( int a ) -> double { return 2.0 * a ; }; \u5f53\u7136\uff0c\u4e0b\u9762\u8fd9\u4e24 lambda \u4e5f\u662f\u4e00\u6837\u7684\u3002 auto firstLam = []( int x ) { return x * 2 ; }; auto secondLam = []( int x ) { return x * 2 ; }; \u8fd9\u4fe9 Lambda \u62e5\u6709\u5b8c\u5168\u4e00\u6837\u7684\u4ee3\u7801\uff0c\u4f46\u662f\u4ed6\u4eec\u7684\u7c7b\u578b\u662f\u4e0d\u540c\u7684\u3002 \u7f16\u8bd1\u5668\u4f1a\u63a8\u65ad\u4e3a\u4e24\u4e2a Lambda \u8868\u8fbe\u5f0f\u63a8\u65ad\u51fa\u5404\u81ea\u72ec\u7acb\u7684\u672a\u547d\u540d\u7c7b\u578b\u3002 \u6211\u4eec\u53ef\u4ee5\u7528\u4e0b\u9762\u7684\u4ee3\u7801\u6765\u8bc1\u660e\u8fd9\u4e2a\u6027\u8d28\uff1a \u4ee3\u7801 2-2 \u540c\u6837\u7684\u4ee3\u7801\uff0c\u4e0d\u540c\u7684\u7c7b\u578b #include <type_traits> int main () { const auto oneLam = []( int x ) noexcept { return x * 2 ; }; const auto twoLam = []( int x ) noexcept { return x * 2 ; }; static_assert ( ! std :: is_same < decltype ( oneLam ), decltype ( twoLam ) >:: value , \"must be different!\" ); } \u8fd9\u4e2a\u4f8b\u5b50\u53ef\u4ee5\u7528\u6765\u9a8c\u8bc1\u4e24\u4e2a Lambda\uff08 oneLam \u548c twoLam \uff09\u7684\u95ed\u5305\u7c7b\u578b\u662f\u5426\u4e00\u81f4\u3002 \u5728 C++17\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e0d\u5e26\u6d88\u606f\u7684 static_assert \u548c\u63a8\u65ad\u7c7b\u578b\u7279\u5f81\u7684\u53d8\u91cf\u6a21\u677f\u8f85\u52a9\u51fd\u6570 is_same_v \uff1a static_assert ( std :: is_same_v < double , decltype ( baz ( 10 )) > ); \u4f46\u662f\uff0c\u5c3d\u7ba1\u4f60\u4e0d\u77e5\u9053\u786e\u5207\u7684\u7c7b\u578b\u540d\uff0c\u4f60\u53ef\u4ee5\u5c06 Lambda \u7684\u7b7e\u540d\u5b58\u50a8\u5728 std::function \u4e2d\u4f7f\u7528\u3002 \u901a\u5e38\u6765\u8bf4\uff0c\u5982\u679c\u5b9a\u4e49\u4e3a auto \u7684 Lambda \u65e0\u6cd5\u89e3\u51b3\u7684\uff0c\u53ef\u4ee5\u901a\u8fc7\u5b9a\u4e49\u4e3a std::function \u7c7b\u578b\u6765\u89e3\u51b3\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u4e4b\u524d\u7684 Lambda \u6709\u4e00\u4e2a double(int) \u7684\u7b7e\u540d\uff08\u53c2\u6570\u4e3a int \u8fd4\u56de double \uff09\u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u521b\u5efa\u4e00\u4e2a std::function \u5bf9\u8c61\uff1a std :: function < double ( int ) > myFunc = []( int a ) -> double { return 2.0 * a ; }; std::function \u662f\u4e00\u4e2a\u201c\u7b28\u91cd\u201d\u7684\u5bf9\u8c61\uff0c\u56e0\u4e3a\u4ed6\u9700\u8981\u64cd\u63a7\u5168\u90e8\u7684\u53ef\u8c03\u7528\u5bf9\u8c61\u3002 \u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u4ed6\u9700\u8981\u4e00\u5957\u5148\u8fdb\u7684\u5185\u6838\u673a\u5236\uff0c\u6bd4\u5982 \u7c7b\u578b\u53cc\u5173\uff08Type punning\uff09 \u6216\u8005\u751a\u81f3\u52a8\u6001\u5185\u5b58\u5206\u914d\u3002 \u6765\u8bd5\u8bd5\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\uff1a \u4ee3\u7801 2-3 std::function \u548c auto \u7c7b\u578b\u63a8\u65ad #include <functional> #include <iostream> int main () { const auto myLambda = []( int a ) noexcept -> double { return 2.0 * a ; }; const std :: function < double ( int ) > myFunc = []( int a ) noexcept -> double { return 2 .0 * a ; }; std :: cout << \"sizeof(myLambda) is \" << sizeof ( myLambda ) << '\\n' ; std :: cout << \"sizeof(myFunc) is \" << sizeof ( myFunc ) << '\\n' ; return myLambda ( 10 ) == myFunc ( 10 ); } \u7528 GCC \u7f16\u8bd1\u5e76\u8fd0\u884c\uff0c\u5c06\u4f1a\u8f93\u51fa\uff1a sizeof(myLambda) is 1 sizeof(myFunc) is 32 \u56e0\u4e3a myLambda \u4ec5\u4ec5\u662f\u4e00\u4e2a\u65e0\u72b6\u6001 Lambda\uff0c\u6240\u4ee5\u5b83\u4e5f\u662f\u4e00\u4e2a\u6ca1\u6709\u4efb\u4f55\u6570\u636e\u6210\u5458\u5b57\u6bb5\u7684\u7a7a\u7c7b\uff0c\u8fd9\u4e5f\u5c31\u662f\u4e3a\u4ec0\u4e48\u5b83\u7684\u5927\u5c0f\u53ea\u6709 1 \u5b57\u8282\u7684\u539f\u56e0\u3002 \u800c std::function \u7248\u672c\u5219\u5360\u7528\u4e86 32 \u5b57\u8282\u3002 \u6240\u4ee5\uff0c\u4e00\u76ee\u4e86\u7136\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u4f60\u5e94\u8be5\u5c3d\u53ef\u80fd\u4f7f\u7528 auto \u7c7b\u578b\u63a8\u65ad\u6765\u83b7\u53d6\u5360\u7528\u5185\u5b58\u66f4\u5c11\u7684\u95ed\u5305\u5bf9\u8c61\u4e86\u3002 \u5f53\u7136\uff0c\u6211\u4eec\u4e5f\u4e0d\u5f97\u4e0d\u53bb\u6df1\u5165\u8ba8\u8bba std::function \u7684\u4f7f\u7528\uff0c\u56e0\u4e3a\u5b83\u4e0d\u652f\u6301\u53ea\u80fd\u79fb\u52a8\uff08moveable-only\uff09\u7684\u95ed\u5305\u5bf9\u8c61\u3002 \u6211\u4eec\u4f1a\u5728 C++14 \u7ae0\u53ef\u79fb\u52a8\u7c7b\u578b\u4e00\u8282 \u6765\u8be6\u7ec6\u4ecb\u7ecd\u8fd9\u90e8\u5206\u5185\u5bb9\u3002 \u6784\u9020\uff0c\u8fd8\u662f\u62f7\u8d1d\uff1f \u5728 [expr.prim.lambda#19] \u4e2d\u6709\u4e00\u4e2a\u89c4\u5219\uff1a Lambda \u8868\u8fbe\u5f0f\u4ea7\u751f\u7684\u95ed\u5305\u5bf9\u8c61\u662f \u5220\u9664 \u4e86 \u9ed8\u8ba4\u6784\u9020\u51fd\u6570 \u548c \u62f7\u8d1d\u8d4b\u503c\u8fd0\u7b97\u7b26 \u7684\u3002 \u4f46\u662f\u5b83\u5305\u542b\u9690\u5f0f\u58f0\u660e\u7684 \u62f7\u8d1d\u6784\u9020\u51fd\u6570 \u4ee5\u53ca \u79fb\u52a8\u6784\u9020\u51fd\u6570 \u3002 \u7531\u4e8e\u8fd9\u4e2a\u89c4\u5219\u7684\u5b58\u5728\uff0c\u6240\u4ee5\u4f60\u65e0\u6cd5\u8fd9\u6837\u7f16\u5199\u4ee3\u7801\uff1a auto foo = [ & x , & y ]() { ++ x ; ++ y ; }; decltype ( foo ) fooCopy GCC \u4f1a\u63d0\u793a\u5982\u4e0b\u9519\u8bef\uff1a error: use of deleted function'main()::<lambda()>::<lambda>()' decltype(foo) fooCopy; ^~~~~~~ note:a lambda closure type has a deleted default constructor \u4f46\u662f\uff0c\u4f60\u53ef\u4ee5\u62f7\u8d1d Lambda\uff1a \u4ee3\u7801 2-4 \u62f7\u8d1d Lambda #include <type_traits> int main () { const auto firstLam = []( int x ) noexcept { return x * 2 ; }; const auto secondLam = firstLam ; static_assert ( std :: is_same < decltype ( firstLam ), decltype ( secondLam ) >:: value , \"must be the same\" ); } \u5982\u679c\u62f7\u8d1d\u4e86\u4e00\u4e2a Lambda\uff08\u5b9e\u9645\u4e0a\u53d1\u751f\u7684\u662f\u62f7\u8d1d\u6784\u9020\uff09\uff0c\u5b83\u7684\u72b6\u6001\u4e5f\u4f1a\u88ab\u62f7\u8d1d\u8fc7\u6765\u3002 \u8fd9\u4e00\u70b9\u5bf9\u4e8e\u6355\u83b7\u5bf9\u8c61\u6765\u8bf4\u5f88\u91cd\u8981\u3002 \u56e0\u4e3a\uff0c\u4e00\u4e2a\u95ed\u5305\u7c7b\u578b\u4f1a\u5b58\u50a8\u6355\u83b7\u7684\u5bf9\u8c61\u4f5c\u4e3a\u5176\u6210\u5458\u5b57\u6bb5\u3002 \u6240\u4ee5\uff0c\u5f53\u8fdb\u884c Lambda \u62f7\u8d1d\u65f6\uff0c\u4f1a\u62f7\u8d1d\u90a3\u4e9b\u6570\u636e\u6210\u5458\u5b57\u6bb5\u3002 \u5728 C++20 \u4e2d\uff0c\u65e0\u72b6\u6001 Lambda \u4f1a\u62e5\u6709\u9ed8\u8ba4\u7684\u6784\u9020\u5668\u548c\u62f7\u8d1d\u8d4b\u503c\u3002 3. \u8c03\u7528\u64cd\u4f5c\u7b26 \u6211\u4eec\u4f20\u5165 Lambda \u4e2d\u7684\u53c2\u6570\u90e8\u5206\uff0c\u4f1a\u88ab\u201c\u8f6c\u8bd1\u201d\u4e3a\u76f8\u5e94\u95ed\u5305\u7c7b\u578b\u7684\u8c03\u7528\u64cd\u4f5c\u7b26\u7684\u53c2\u6570\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5728 C++11 \u4e2d\uff0c\u4ed6\u4f1a\u88ab\u201c\u8f6c\u8bd1\u201d\u4e3a\u4e00\u4e2a\u5e38\u91cf\u5185\u8054\u6210\u5458\u51fd\u6570\u3002 \u4f8b\u5982 auto lam = []( double param ) { /*do something*/ }; \u5c06\u88ab\u7f16\u8bd1\u5668\u5c55\u5f00\u4e3a\uff1a struct __anonymousLambda { inline void operator ()( double param ) const { /*do something*/ } }; \u91cd\u8f7d \u6709\u4e00\u4ef6\u4e8b\u60c5\u503c\u5f97\u63d0\u4e00\u4e0b\uff0c\u90a3\u5c31\u662f\u5f53\u4f60\u5b9a\u4e49\u4e86\u4e00\u4e2a lambda \u65f6\uff0c\u4f60\u4e0d\u80fd\u521b\u5efa\u5b83\u7684\u4efb\u4f55\u91cd\u8f7d\u5f62\u5f0f\u6765\u4f20\u5165\u4e0d\u540c\u7684\u53c2\u6570\u3002 // \u65e0\u6cd5\u7f16\u8bd1 auto lam = []( double param ) { /* do something */ }; auto lam = []( int param ) { /* do something */ }; \u4e0a\u9762\u7684\u4ee3\u7801\u5c06\u65e0\u6cd5\u901a\u8fc7\u7f16\u8bd1\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u4f1a\u5c06\u4ed6\u4eec\u201c\u8f6c\u8bd1\u201d\u4e3a\u4e00\u4e2a\u4eff\u51fd\u6570\uff0c\u5f53\u7136\u8fd9\u5c31\u610f\u5473\u7740\u65e0\u6cd5\u91cd\u65b0\u5b9a\u4e49\u4e00\u4e2a\u76f8\u540c\u7684\u53d8\u91cf\u3002 \u4f46\u662f\uff0c\u4f60\u53ef\u4ee5\u5728\u4e00\u4e2a\u4eff\u51fd\u6570\u4e2d\u5b9a\u4e49\u4e24\u4e2a\u8c03\u7528\u64cd\u4f5c\u7b26\u7684\u91cd\u8f7d\u5f62\u5f0f\uff0c\u8fd9\u662f\u5141\u8bb8\u7684\uff1a struct MyFunctor { inline void operator ()( double param ) { /* do something */ }; inline void operator ()( int param ) { /* do something */ }; }; MyFunctor \u73b0\u5728\u5c31\u53ef\u4ee5\u540c\u65f6\u63a5\u53d7 double \u548c int \u53c2\u6570\u4e86\u3002 \u5982\u679c\u4f60\u60f3\u5728 Lambda \u4e2d\u5b9e\u73b0\u76f8\u4f3c\u7684\u6548\u679c\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u770b\u770b\u8fd9\u90e8\u5206\u5185\u5bb9 Lambda \u7ee7\u627f \u5176\u4ed6\u4fee\u9970\u7b26 \u6211\u4eec\u5728 Lambda \u8bed\u6cd5 \u4e00\u8282\u4e2d\u7b80\u7565\u4ecb\u7ecd\u8fc7\u8fd9\u90e8\u5206\u4e3b\u9898\uff0c\u4f46\u662f\u4f60\u5e76\u4e0d\u4f1a\u88ab\u95ed\u5305\u7c7b\u578b\u8c03\u7528\u64cd\u4f5c\u7b26\u7684\u9ed8\u8ba4\u58f0\u660e\u6240\u9650\u5236\u5230\u3002 \u5728 C++11 \u4e2d\uff0c\u4f60\u53ef\u4ee5\u6dfb\u52a0 mutalbe \u6216\u8005\u5f02\u5e38\u63cf\u8ff0\u7b26\u3002 \u5982\u679c\u53ef\u80fd\u7684\u8bdd\uff0c\u672c\u4e66\u4f1a\u4f7f\u7528\u957f\u4f8b\u5b50\u6765\u7528 const \u6807\u8bb0\u95ed\u5305\u5bf9\u8c61\u5e76\u4e14\u4f7f Lambda \u4e3a noexcept \u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u5728\u53c2\u6570\u58f0\u660e\u540e\u9762\u90a3\u90e8\u5206\u6307\u5b9a mutable \u6216\u8005 noexcept \u6765\u4f7f\u7528\u8fd9\u4e9b\u5173\u952e\u5b57\u3002 auto myLambda = []( int a ) mutable noexcept { /* do something */ }; \u7f16\u8bd1\u5668\u4f1a\u5c55\u5f00\u4e3a\uff1a struct __anonymousLambda { inline void operator ()( int a ) noexcept { /* do something */ } }; \u8bf7\u6ce8\u610f\uff0c const \u5173\u952e\u5b57\u6b64\u65f6\u4f1a\u6d88\u5931\uff0c\u5e76\u4e14\u8c03\u7528\u64cd\u4f5c\u7b26\u53ef\u4ee5\u4fee\u6539 Lambda \u7684\u6210\u5458\u53d8\u91cf\u4e86\u3002 \u4f46\u662f\uff0c\u6210\u5458\u53d8\u91cf\u5462\uff1f\u6211\u4eec\u8981\u5982\u4f55\u5728 Lambda \u4e2d\u58f0\u660e\u6210\u5458\u53d8\u91cf\uff1f \u8bf7\u770b\u4e0b\u4e00\u4e2a\u7ae0\u8282\u2014\u2014\u5173\u4e8e\u300c\u6355\u83b7\u300d\u53d8\u91cf\u3002 4. \u6355\u83b7 \u6355\u83b7\u5b50\u53e5 - [] \u64cd\u4f5c\u7b26\u7edd\u4e0d\u4ec5\u4ec5\u53ea\u662f Lambda \u7684\u5f15\u5165\u7b26\u53f7\uff0c\u540c\u65f6\u5b83\u8fd8\u517c\u987e\u6355\u83b7\u53d8\u91cf\u7684\u5217\u8868\u7684\u804c\u80fd\u3002 \u901a\u8fc7\u4ece Lambda \u8868\u8fbe\u5f0f\u5916\u90e8\u6355\u83b7\u53d8\u91cf\uff0c\u4f60\u53ef\u4ee5\u5728\u95ed\u5305\u7c7b\u578b\u4e2d\u521b\u5efa\u6210\u5458\u53d8\u91cf\uff08\u975e\u9759\u6001\u6210\u5458\uff09\uff0c\u7136\u540e\uff0c\u5728 Lambda \u51fd\u6570\u4f53\u4e2d\uff0c\u4f60\u5c31\u53ef\u4ee5\u4f7f\u7528\u5b83\u4e86\u3002 \u6211\u4eec\u53ef\u4ee5\u5f04\u4e00\u4e2a\u7c7b\u4f3c\u4e8e C++98/03 \u7ae0\u8282\u4e2d PrintFunctor \u7684\u5185\u5bb9\uff0c\u5728\u8fd9\u4e2a\u7c7b\u4e2d\uff0c\u6211\u4eec\u6dfb\u52a0\u6210\u5458\u53d8\u91cf std::string strText \u5e76\u8ba9\u4ed6\u5728\u6784\u9020\u51fd\u6570\u4e2d\u88ab\u521d\u59cb\u5316\u3002 \u62e5\u6709\u4e00\u4e2a\u6210\u5458\u53d8\u91cf\u53ef\u4ee5\u8ba9\u6211\u4eec\u5b58\u50a8\u53ef\u8c03\u7528\u5bf9\u8c61\u7684\u4e00\u4e9b\u72b6\u6001\u4e86\u3002 \u4e00\u4e9b\u6709\u5173\u6355\u83b7\u5668\u7684\u8bed\u6cd5\uff1a [&] - \u5f15\u7528\u6355\u83b7\uff0c\u81ea\u52a8\u6355\u83b7\u58f0\u660e\u5728\u6355\u83b7\u8303\u56f4\u5185\u7684\u751f\u547d\u5468\u671f\u5c1a\u672a\u7ed3\u675f\u7684\u53d8\u91cf\u3002 [=] - \u503c\u6355\u83b7\uff08\u521b\u5efa\u62f7\u8d1d\uff09\uff0c\u81ea\u52a8\u6355\u83b7\u58f0\u660e\u5728\u6355\u83b7\u8303\u56f4\u5185\u7684\u751f\u547d\u5468\u671f\u5c1a\u672a\u7ed3\u675f\u7684\u53d8\u91cf\u3002 [x, &y] - x \u4e3a\u503c\u6355\u83b7\uff0c y \u4e3a\u663e\u5f0f\u5f15\u7528\u6355\u83b7\u3002 [args...] - \u6355\u83b7\u4e00\u4e2a\u6a21\u677f\u53c2\u6570\u5305\uff0c\u5168\u90e8\u90fd\u662f\u503c\u6355\u83b7 [&args...] - \u6355\u83b7\u4e00\u4e2a\u6a21\u677f\u53c2\u6570\u5305\uff0c\u5168\u90e8\u90fd\u662f\u5f15\u7528\u6355\u83b7 \u4e00\u4e9b\u4f8b\u5b50\uff1a int x = 2 , y = 3 ; const auto l1 = []() { return l1 ; }; // \u6ca1\u6709\u6355\u83b7 const auto l2 = [ = ]() { return x ; }; // \u503c\u6355\u83b7\uff08\u62f7\u8d1d\uff09 const auto l3 = [ & ]() { return y ; }; // \u5f15\u7528\u6355\u83b7 const auto l4 = [ x ]() { return x ; }; // \u4ec5\u503c\u6355\u83b7x const auto lx = [ = x ]() { return x ; }; // \u9519\u8bef\u7684\u8bed\u6cd5\uff0c\u4e0d\u9700\u8981=\u6765\u5bf9x\u663e\u5f0f\u8fdb\u884c\u62f7\u8d1d\uff08\u503c\u6355\u83b7\uff09 const auto l5 = [ & y ]() { return y ; }; // \u4ec5\u5f15\u7528\u6355\u83b7y const auto l6 = [ x , & y ]() { return x * y ; }; // \u503c\u6355\u83b7x\uff0c\u5f15\u7528\u6355\u83b7y const auto l7 = [ = , & x ]() { return x + y ; }; // \u5168\u90e8\u90fd\u662f\u503c\u6355\u83b7\uff0c\u9664\u4e86x\u662f\u5f15\u7528\u6355\u83b7 const auto l8 = [ & , y ]() { return x - y ; }; // \u5168\u90fd\u662f\u5f15\u7528\u6355\u83b7\uff0c\u9664\u4e86y\u662f\u503c\u6355\u83b7 \u4e3a\u4e86\u7406\u89e3\u5728\u6355\u83b7\u53d8\u91cf\u7684\u8fc7\u7a0b\u4e2d\u53d1\u751f\u4e86\u4ec0\u4e48\uff0c\u8ba9\u6211\u4eec\u4e00\u8d77\u6765\u601d\u8003\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\uff1a \u4ee3\u7801 2-5 \u6355\u83b7\u4e00\u4e2a\u53d8\u91cf std :: string str { \"Hello World\" }; auto foo = [ str ]() { std :: cout << str << '\\n' ; }; foo (); \u4e0a\u9762\u8fd9\u4e2a Lambda\uff0c str \u88ab\u503c\u6355\u83b7\uff08\u6784\u9020\u4e86\u4e00\u4e2a\u62f7\u8d1d\uff09\u3002 \u7f16\u8bd1\u5668\u5c06\u81ea\u52a8\u751f\u6210\u8fd9\u6837\u7684\u4eff\u51fd\u6570\uff1a \u4ee3\u7801 2-6 \u7f16\u8bd1\u5668\u53ef\u80fd\u751f\u6210\u7684\u4eff\u51fd\u6570\uff0c\u5355\u53d8\u91cf class __unnamedLambda { public : inline /*constexpr */ void operator ()() const { std :: operator << ( std :: operator << ( std :: cout , str ), '\\n' ); } private : std :: string str ; public : __unnamedLambda ( std :: string _str ) : str { _str } {} }; \u5982\u4e0a\u8ff0\u7684\u5c55\u5f00\u4ee3\u7801\uff0c\u4e00\u4e2a\u53d8\u91cf\u88ab\u4f20\u8fdb\u6784\u9020\u51fd\u6570\u4e2d\uff0c\u5728 Lambda \u58f0\u660e\u4e2d\u88ab\u79f0\u4e3a\u201c\u5c31\u5730\u201d\u3002 \u66f4\u51c6\u786e\u7684\u5b9a\u4e49\u5728 [expr.prim.lambda#21] \uff1a\u5f53\u89e3\u6790 Lambda \u8868\u8fbe\u5f0f\u65f6\uff0c\u901a\u8fc7\u503c\u6355\u83b7\u7684\u5b9e\u4f53\u5c06\u76f4\u63a5\u521d\u59cb\u5316\u5728\u6bcf\u4e2a\u5bf9\u5e94\u751f\u6210\u7684\u95ed\u5305\u5bf9\u8c61\u4e2d\u7684\u975e\u9759\u6001\u6210\u5458\u6570\u636e\u3002 \u5f53\u7136\u4e86\uff0c\u4e0a\u8ff0\u4ee3\u7801\u4e2d\u7684\u6784\u9020\u51fd\u6570\uff08 __unnamedLambda \uff09\u4ec5\u4ec5\u662f\u7528\u4f5c\u6f14\u793a\u548c\u89e3\u91ca\u7528\u9014\uff0c\u7f16\u8bd1\u5668\u771f\u6b63\u751f\u6210\u7684\u5185\u5bb9\u4f1a\u4e0e\u6b64\u6709\u6240\u5dee\u522b\uff0c\u5e76\u4e14\u4e0d\u4f1a\u66b4\u9732\u7ed9\u7528\u6237\u3002 \u4ee3\u7801 2-7 \u5f15\u7528\u6355\u83b7\u4e24\u4e2a\u53d8\u91cf int = 1 , y = 1 ; std :: cout << x << \" \" << y << std :: endl ; const auto foo = [ & x , & y ]() noexcept { ++ x ; ++ y ; }; foo (); std :: cout << x << \" \" << y << std :: endl ; \u4e0a\u8ff0\u4ee3\u7801\u5c55\u5f00\u540e\uff0c\u53ef\u80fd\u662f\uff1a \u4ee3\u7801 2-8 \u7f16\u8bd1\u5668\u53ef\u80fd\u751f\u6210\u7684\u4eff\u51fd\u6570\uff0c\u53cc\u53d8\u91cf\uff0c\u5f15\u7528 class __unnamedLambda { public : inline /* constexpr */ void operator ()() const noexcept { ++ x ; ++ y ; } private : int & x ; int & y ; public : __unnamedLambda ( int & _x , int & _y ) : x { _x }, y { _y } {} }; \u7531\u4e8e\u6211\u4eec\u662f\u901a\u8fc7\u5f15\u7528\u7684\u65b9\u5f0f\u6355\u83b7 x \u548c y \u7684\uff0c\u6240\u4ee5\u95ed\u5305\u7c7b\u578b\u4e2d\u7684\u6210\u5458\u53d8\u91cf\u4e5f\u662f\u5f15\u7528\u7c7b\u578b\u7684\u3002 \u8bf7\u6ce8\u610f\uff1a \u503c\u6355\u83b7\u53d8\u91cf\u7684\u503c\u662f\u5728 Lambda \u5b9a\u4e49 \u65f6\uff0c\u800c\u4e0d\u662f\u5728 \u4f7f\u7528 \u65f6\u3002 \u4f46\u662f\u5f15\u7528\u6355\u83b7\u53d8\u91cf\u7684\u5185\u5bb9\u662f\u5728 Lambda \u4f7f\u7528 \u65f6\uff0c\u800c\u4e0d\u662f \u5b9a\u4e49 \u65f6\u3002\u4e8c\u8005\u662f\u6709\u533a\u522b\u7684\u3002 \u867d\u7136\u6307\u5b9a [=] \u6216\u8005 [&] \u53ef\u80fd\u5f88\u65b9\u4fbf\uff0c\u56e0\u4e3a\u5b83\u4f1a\u81ea\u52a8\u6355\u83b7\u4ecd\u5728\u751f\u547d\u5468\u671f\u5185\u7684\u5168\u90e8\u53d8\u91cf\uff0c\u4f46\u662f\uff0c\u82e5\u80fd\u6307\u660e\u6355\u83b7\u7684\u53d8\u91cf\u662f\u54ea\u4e9b\uff0c\u5c06\u4f1a\u66f4\u52a0\u6e05\u6670\u660e\u786e\u3002 \u8fd9\u6837\u7f16\u8bd1\u5668\u624d\u80fd\u8b66\u544a\u51fa\u54ea\u4e9b\u975e\u9884\u671f\u7684\u5f71\u54cd\uff08\u53c2\u89c1 \u5168\u5c40\u53d8\u91cf \u548c \u9759\u6001\u53d8\u91cf\uff09\u3002 \u5f53\u7136\uff0c\u5982\u679c\u4f60\u60f3\u8981\u4e86\u89e3\u66f4\u591a\u66f4\u8be6\u7ec6\u7684\u5185\u5bb9\uff0c\u53ef\u4ee5\u7ffb\u9605 Scott Meyers \u6240\u8457\u7684\u300aEffective Modern C++\u300b\u7b2c 31 \u9879\u2014\u2014\u201c\u907f\u514d\u9ed8\u8ba4\u6355\u83b7\u6a21\u5f0f\u201d\u7684\u5185\u5bb9\u3002 \u8bf7\u6ce8\u610f\uff1a C++ \u95ed\u5305\u4e0d\u4f1a\u5ef6\u957f\u88ab\u6355\u83b7\u5f15\u7528\u5bf9\u8c61\u7684\u5269\u4f59\u751f\u547d\u5468\u671f\u3002\u8bf7\u52a1\u5fc5\u786e\u4fdd\u6355\u83b7\u5bf9\u8c61\u5728 Lambda \u8c03\u7528\u65f6\u4ecd\u7136\u201c\u5b58\u6d3b\u201d\u3002 mutable \u5173\u952e\u5b57 \u901a\u8fc7\u95ed\u5305\u7c7b\u578b\u9ed8\u8ba4\u8c03\u7528\u64cd\u4f5c\u7b26\u83b7\u53d6\u7684\uff0c\u90fd\u662f\u5e26\u6709 const \u5173\u952e\u5b57\u9650\u5b9a\u7684\uff0c\u4f60\u65e0\u6cd5\u5728 Lambda \u8868\u8fbe\u5f0f\u5185\u90e8\u5bf9\u4ed6\u4eec\u505a\u51fa\u4efb\u4f55\u4fee\u6539\u3002 \u5982\u679c\u4f60\u5e0c\u671b\u8fdb\u884c\u4fee\u6539\u7684\u64cd\u4f5c\uff0c\u90a3\u5c31\u9700\u8981\u5728\u53c2\u6570\u5217\u8868\u540e\u6dfb\u52a0 mutable \u5173\u952e\u5b57\u3002 \u5b83\u53ef\u4ee5\u6709\u6548\u7684\u53bb\u9664\u95ed\u5305\u7c7b\u578b\u8c03\u7528\u64cd\u4f5c\u7b26\u4e2d\u7684 const \u4fee\u9970\u7b26\u3002\u4e3e\u4e00\u4e2amutable \u7684\u7b80\u5355\u4f8b\u5b50\uff1a int x = 1 ; auto foo = [ x ]() mutable { ++ x ; }; \u5b83\u4f1a\u88ab\u5c55\u5f00\u4e3a\uff1a class __lambda_x1 { public : void operator ()() { ++ x ; } private : int x ; }; \u5982\u4f60\u6240\u89c1\uff0c\u73b0\u5728\u8c03\u7528\u64cd\u4f5c\u7b26\u5c31\u53ef\u4ee5\u4fee\u6539\u6355\u83b7\u7684\u6210\u5458\u53d8\u91cf\u4e86\u3002 \u4ee3\u7801 2-8 \u901a\u8fc7\u503c\u6355\u83b7\u4e24\u4e2a mutable \u53d8\u91cf #include <iostream> int main () { const auto print = []( const char * str , int x , int y ) { std :: cout << str << \": \" << x << \" \" << y << '\\n' ; }; int x = 1 , y = 1 ; print ( \"in main()\" , x , y ); auto foo = [ x , y , & print ]() mutable { ++ x ; ++ y ; print ( \"in foo()\" , x , y ); }; foo (); print ( \"in main()\" , x , y ); } \u8f93\u51fa\uff1a in main(): 1 1 in foo(): 2 2 in main(): 1 1 \u5728\u4e0a\u8ff0\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u4fee\u6539 x \u548c y \u7684\u503c\u3002 \u4f46\u662f\uff0c\u7531\u4e8e\u662f\u4ece\u5c01\u95ed\u533a\u57df\u4e2d\u83b7\u53d6\u7684\u62f7\u8d1d\u503c\uff0c\u6240\u4ee5\u5728\u8c03\u7528 foo \u4e4b\u540e\uff0c\u6211\u4eec\u65e0\u6cd5\u83b7\u53d6\u5230\u5728\u5c40\u90e8\u533a\u57df\u4fee\u6539\u7684\u65b0\u503c\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u5982\u679c\u4f7f\u7528\u5f15\u7528\u6355\u83b7\uff0c\u90a3\u4e48\u5c31\u4e0d\u9700\u8981\u4f7f\u7528 mutable \u4fee\u9970\u7b26\u6765\u4fee\u6539\u503c\u4e86\u3002 \u8fd9\u662f\u56e0\u4e3a\u6355\u83b7\u7684\u6210\u5458\u53d8\u91cf\u662f\u201c\u5f15\u7528\u201d\u8fc7\u6765\u7684\uff0c\u5e76\u4e14\u4e0d\u80fd\u548c\u5185\u90e8\u7684 const \u6210\u5458\u51fd\u6570\u6240\u7ed1\u5b9a\uff0c\u6240\u4ee5\u53ef\u4ee5\u5bf9\u5b83\u7684\u5185\u5bb9\u4f5c\u51fa\u4fee\u6539\u3002 \u4ee3\u7801 2-9 \u901a\u8fc7\u5f15\u7528\u6355\u83b7\u4e00\u4e2a\u53d8\u91cf int x = 1 ; std :: cout << x << '\\n' ; const auto foo = [ & x ]() noexcept { ++ x ; }; foo (); std :: cout << x << '\\n' ; \u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0cLambda \u5e76\u6ca1\u6709\u5e94\u7528 mutable \u4fee\u9970\u7b26\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u5f15\u7528\u7684\u503c\u3002 \u9700\u8981\u6ce8\u610f\u7684\u4e00\u70b9\uff1a\u5f53\u4f7f\u7528 mutable \u4fee\u9970\u7b26\u540e\uff0c\u5c31\u65e0\u6cd5\u4f7f\u7528 const \u4fee\u9970\u7b26\u6765\u4fee\u9970\u95ed\u5305\u5bf9\u8c61\u4e86\uff0c\u56e0\u4e3a\u5b83\u4f1a\u963b\u6b62\u4f60\u8c03\u7528\u8fd9\u4e2a Lambda\u3002 int x = 10 ; const auto lam = [ x ]() mutable { ++ x ; } lam (); // \u65e0\u6cd5\u7f16\u8bd1 \u7531\u4e8e\u65e0\u6cd5\u5728 const \u5bf9\u8c61\u4e2d\u8c03\u7528\u975e const \u6210\u5458\u51fd\u6570\uff0c\u6700\u540e\u4e00\u884c\u5c06\u63d0\u793a\u7f16\u8bd1\u5931\u8d25\u3002 \u8c03\u7528\u8ba1\u6570\u5668 - \u6355\u83b7\u53d8\u91cf\u7684\u4e00\u4e2a\u4f8b\u5b50 \u5728\u6211\u4eec\u6df1\u5165\u63a2\u7a76\u6355\u83b7\u4e4b\u524d\uff0c\u5148\u6765\u770b\u770b\u4e00\u4e2a\u6709\u5173 Lambda \u4f7f\u7528\u7684\u4f8b\u5b50\uff1a \u5f53\u4f60\u60f3\u4f7f\u7528\u4e00\u4e9b\u73b0\u5b58\u7684 STL \u4e2d\u7684\u7b97\u6cd5\u51fd\u6570\u5e76\u6539\u53d8\u9ed8\u8ba4\u884c\u4e3a\u89c4\u5219\u65f6\uff0c\u7528 Lambda \u8868\u8fbe\u5f0f\u662f\u5341\u5206\u65b9\u4fbf\u7684\u3002\u6bd4\u5982\uff0c\u5bf9\u4e8e std::sort \u51fd\u6570\uff0c\u4f60\u53ef\u4ee5\u5199\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u6bd4\u8f83\u51fd\u6570\u3002 \u5f53\u7136\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u8fdb\u4e00\u6b65\u5f3a\u5316\u6bd4\u8f83\u51fd\u6570\u7684\u529f\u80fd\uff1a\u8c03\u7528\u8ba1\u6570\u3002 \u4ee3\u7801 2-10 \u8c03\u7528\u8ba1\u6570\u5668 #include <algorithm> #include <iostream> #include <vector> int main () { std :: vector < int > vec { 0 , 5 , 2 , 9 , 7 , 6 , 1 , 3 , 4 , 8 }; size_t compCounter = 0 ; std :: sort ( vec . begin (), vec . end (), [ & compCounter ]( int a , int b ) noexcept { ++ compCounter ; return a < b ; }); std :: cout << \"number of comparisons: \" << compCounter << '\\n' ; for ( const auto & v : vec ) std :: cout << v << \", \" ; } \u81ea\u5b9a\u4e49\u7684\u6bd4\u8f83\u5668\u548c\u9ed8\u8ba4\u6bd4\u8f83\u5668\u662f\u4e00\u81f4\u7684\uff0c\u8fd4\u56de\u4e8c\u8005\u8f83\u5c0f\u7684\u90a3\u4e00\u4e2a\uff0c\u5373\u81ea\u7136\u6392\u5e8f\uff08\u5347\u5e8f\u6392\u5217\uff09\u3002 \u540c\u65f6\uff0cLambda \u4e5f\u5411 std::sort \u4f20\u5165\u4e86\u6355\u83b7\u7684\u672c\u5730\u53d8\u91cf compCounter \u6765\u8ba1\u6570\u8c03\u7528\u4e86\u5728\u6392\u5e8f\u8fc7\u7a0b\u4e2d\u591a\u5c11\u6b21\u7684\u6bd4\u8f83\u5668\u3002 \u6355\u83b7\u5168\u5c40\u53d8\u91cf \u5982\u679c\u6709\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\uff0c\u5e76\u4e14\u5728 Lambda \u4f7f\u7528\u4e86 [=] \uff0c\u4e5f\u8bb8\u4f60\u4f1a\u8ba4\u4e3a\u8fd9\u6837\u5c31\u53ef\u4ee5\u503c\u6355\u83b7\u5168\u5c40\u53d8\u91cf\u4e86\uff0c\u5f88\u9057\u61be\uff0c\u4e8b\u5b9e\u5e76\u975e\u5982\u6b64\uff1a \u4ee3\u7801 2-11 \u6355\u83b7\u5168\u5c40\u53d8\u91cf #include <iostream> int global = 10 ; int main () { std :: cout << global << std :: endl ; auto foo = [ = ]() mutable noexcept { ++ global ; }; foo (); std :: cout << global << std :: endl ; const auto increaseGlobal = []() noexcept { ++ global ; }; increaseGlobal (); std :: cout << global << std :: endl ; const auto moreIncreaseGlobal = [ global ]() noexcept { ++ global ; }; moreIncreaseGlobal (); std :: cout << global << std :: endl ; } \u8fd9\u4e2a\u4f8b\u5b50\u5b9a\u4e49\u4e86\u5168\u5c40\u53d8\u91cf global \u5e76\u4e14\u5c06\u5b83\u4f7f\u7528\u5728\u591a\u4e2a Lambda \u8868\u8fbe\u5f0f\u4e2d\uff0c\u4f46\u662f\u5982\u679c\u4f60\u8fd0\u884c\u8fd9\u4e2a\u7a0b\u5e8f\u4f1a\u53d1\u73b0\uff0c\u65e0\u8bba\u901a\u8fc7\u4f55\u79cd\u65b9\u5f0f\u6355\u83b7\u5168\u5c40\u53d8\u91cf\uff0c\u90fd\u4f1a\u53d1\u73b0\u5b83\u6c38\u8fdc\u6307\u5411\u7684\u662f\u90a3\u4e2a\u5168\u5c40\u5bf9\u8c61\uff0c\u800c\u4e0d\u4f1a\u521b\u5efa\u4efb\u4f55\u4e00\u4e2a\u672c\u5730\u7684\u62f7\u8d1d\u5bf9\u8c61\u51fa\u6765\u3002 \u8fd9\u662f\u56e0\u4e3a\uff0c\u53ea\u6709\u5728\u81ea\u52a8\u5b58\u50a8\u671f\u95f4\u7684\u53d8\u91cf\u4f1a\u88ab\u6355\u83b7\u3002GCC \u751a\u81f3\u4f1a\u5bf9\u6b64\u63d0\u51fa\u8b66\u544a\uff1a warning: capture of variable 'global' with non-automatic storage duration. \u8fd9\u4e2a\u8b66\u544a\u53ea\u4f1a\u5728\u663e\u5f0f\u6355\u83b7\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\u65f6\u51fa\u73b0\uff0c\u5373\u4fbf\u4f60\u7528 [=] \uff0c\u7f16\u8bd1\u5668\u4e5f\u65e0\u6cd5\u5e2e\u4f60\u6d88\u9664\u8fd9\u4e2a\u9519\u8bef\u3002 \u5728 Clang \u4e2d\u751a\u81f3\u4f1a\u76f4\u63a5\u63d0\u793a\u9519\u8bef\uff1a error: 'global' cannot be captured because it does not have automatic storage duration \u6355\u83b7\u9759\u6001\u53d8\u91cf \u548c\u6355\u83b7\u5168\u5c40\u53d8\u91cf\u7c7b\u4f3c\uff0c\u5728\u6355\u83b7\u9759\u6001\u53d8\u91cf\u7684\u65f6\u5019\u4e5f\u4f1a\u9047\u5230\u7c7b\u4f3c\u7684\u95ee\u9898\u3002 \u4ee3\u7801 2-12 \u6355\u83b7\u9759\u6001\u53d8\u91cf #include <iostream> void bar () { static int static_int = 10 ; std :: cout << static_int << std :: endl ; auto foo = [ = ]() mutable noexcept { ++ static_int ; }; foo (); std :: cout << static_int << std :: endl ; const auto increase = []() noexcept { ++ static_int ; }; increase (); std :: cout << static_int << std :: endl ; const auto moreIncrease = [ static_int ]() noexcept { ++ static_int ; }; moreIncrease (); std :: cout << static_int << std :: endl ; } int main () { bar (); } \u8fd9\u4e00\u6b21\uff0c\u6211\u4eec\u5c1d\u8bd5\u6355\u83b7\u9759\u6001\u53d8\u91cf\u5e76\u4fee\u6539\u5b83\u7684\u503c\uff0c\u4f46\u662f\u7531\u4e8e\u5b83\u6ca1\u6709\u81ea\u52a8\u5b58\u50a8\u65f6\u95f4\uff0c\u7f16\u8bd1\u5668\u5e76\u4e0d\u4f1a\u5141\u8bb8\u4f60\u8fd9\u4e48\u505a\u3002\uff08GCC \u4f1a\u63d0\u793a\u8b66\u544a\uff0c\u800c Clang \u4f1a\u76f4\u63a5\u62a5\u9519\uff09 \u8f93\u51fa\uff1a 10 11 12 13 \u6355\u83b7\u7c7b\u6210\u5458\u548c this \u6307\u9488 \u5f53\u4f60\u60f3\u5728\u4e00\u4e2a\u7c7b\u7684\u6210\u5458\u51fd\u6570\u4e2d\u5c1d\u8bd5\u6355\u83b7\u4e00\u4e2a\u6210\u5458\u53d8\u91cf\uff0c\u90a3\u4e48\u4e8b\u60c5\u5c31\u4f1a\u7a0d\u5fae\u53d8\u5f97\u6709\u70b9\u590d\u6742\u3002 \u7531\u4e8e\u6240\u6709\u7684\u6570\u636e\u6210\u5458\u90fd\u662f\u548c this \u6307\u9488\u5173\u8054\u8d77\u6765\u7684\uff0c\u5f53\u7136\u4e86\uff0c\u8fd9\u73a9\u610f\u5fc5\u987b\u88ab\u5b58\u50a8\u5728\u67d0\u4e2a\u5730\u65b9\u3002 \u4ee3\u7801 2-13 \u6355\u83b7\u6210\u5458\u53d8\u91cf\u65f6\u7684\u9519\u8bef #include <iostream> struct Baz { void foo () { const auto lam = [ s ]() { std :: cout << s ; }; lam (); } std :: string s ; }; int main () { Baz b ; b . foo (); } \u8fd9\u6bb5\u4ee3\u7801\u5c1d\u8bd5\u53bb\u6355\u83b7\u4e00\u4e2a\u6210\u5458\u53d8\u91cf\uff0c\u4f46\u662f\u7f16\u8bd1\u5668\u5e76\u4e0d\u540c\u610f\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u7f16\u8bd1\u5668\u7f16\u8bd1\u9519\u8bef\uff1a In member function 'void Baz::foo()': error: capture of non-variable 'Baz::s' error: 'this' was not captured for this lambda function \u4e3a\u89e3\u51b3\u6b64\u95ee\u9898\uff0c\u9700\u8981\u6355\u83b7 this \u6307\u9488\u3002\u8fd9\u6837\u5c31\u80fd\u8bbf\u95ee\u5230\u6210\u5458\u53d8\u91cf\u4e86\u3002 \u800c\u4e0a\u9762\u7684\u4ee3\u7801\u4e5f\u53ef\u4ee5\u8fd9\u6837\u4fee\u6539\uff1a struct Baz { void foo () { const auto lam = [ this ]() { std :: cout << s ; }; lam (); } std :: string s ; }; \u8fd9\u6837\u5c31\u4e0d\u4f1a\u6709\u7f16\u8bd1\u9519\u8bef\u4e86\u3002 \u5f53\u7136\u4e86\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 [=] \u6216\u8005 [&] \u6765\u6355\u83b7 this \u6307\u9488\uff0c\u5728 C++11/14 \u4e2d\u4ed6\u4eec\u7684\u6548\u679c\u662f\u4e00\u6837\u7684\u3002 \u4f46\u662f\uff0c\u8bf7\u6ce8\u610f\uff0c\u503c\u6355\u83b7 this \u4e5f\u662f\u6355\u83b7\u6307\u9488\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u4f60\u80fd\u8bbf\u95ee\u6210\u5458\u53d8\u91cf\u7684\u539f\u56e0\u3002 \u5728 C++11/14 \u4e2d\uff0c\u4f60\u4e0d\u80fd\u591f\u8fd9\u6837\u5199\uff1a const auto lam = [ * this ]() { std :: cout << s ; }; \u4f46\u662f\u5b83\u5728 C++17 \u4e2d\u662f\u5141\u8bb8\u7684\u3002 \u5982\u679c\u4f60\u5728\u5355\u4e00\u65b9\u6cd5\u7684\u4e0a\u4e0b\u6587\u4e2d\u4f7f\u7528\u6355\u83b7 this \uff0c\u8fd9\u633a\u597d\u7684\u3002 \u4f46\u662f\u7a0d\u5fae\u590d\u6742\u7684\u573a\u666f\u4e0b\u4f7f\u7528\u6355\u83b7 this \u5462\uff1f \u4ee3\u7801 2-14 \u4ece\u65b9\u6cd5\u4e2d\u8fd4\u56de Lambda #include <functional> #include <iostream> struct Baz { std :: function < void () > foo () { return [ = ] { std :: cout << s << std :: endl ; }; } std :: string s ; }; int main () { auto f1 = Baz { \"abc\" }. foo (); auto f2 = Baz { \"xyz\" }. foo (); f1 (); f2 (); } \u4ee3\u7801\u4e2d\u58f0\u660e\u4e86 Baz \u8fd9\u4e2a\u5bf9\u8c61\uff0c\u5e76\u4e14\u8c03\u7528\u4e86 foo() \u3002 \u8bf7\u6ce8\u610f\uff0c foo() \u8fd4\u56de\u4e86\u4e00\u4e2a\u4ece\u7c7b\u4e2d\u6355\u83b7\u6210\u5458\u7684 Lambda\uff08\u5b58\u50a8\u5728 std::function \u4e2d\uff09\u3002 std::function \u5728 C++11 \u4e2d\u662f\u5fc5\u9700\u7684\uff0c\u56e0\u4e3a\u5e38\u89c4\u51fd\u6570\u6ca1\u6709\u8fd4\u56de\u7c7b\u578b\u63a8\u5bfc\u3002 \u4f46\u662f C++14 \u652f\u6301\u51fd\u6570\u8fd4\u56de\u7c7b\u578b\u7684\u63a8\u5bfc\u3002 \u7531\u4e8e\u6211\u4eec\u4f7f\u7528\u7684\u662f\u4e34\u65f6\u5bf9\u8c61\uff0c\u6211\u4eec\u4e0d\u80fd\u4fdd\u8bc1\u5f53\u6211\u4eec\u8c03\u7528 f1 \u548c f2 \u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002 \u8fd9\u662f\u4e00\u4e2a\u60ac\u7a7a\u5f15\u7528\u7684\u95ee\u9898\uff0c\u5e76\u4e14\u662f\u672a\u5b9a\u4e49\u884c\u4e3a\uff08Undefined Behaviour\uff09\u3002 \u8fd9\u79cd\u884c\u4e3a\u7c7b\u4f3c\u4e8e\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\uff1a struct Bar { std :: string const & foo () const { return s ; }; std :: string s ; }; auto && f1 = Bar { \"abc\" }. foo (); // \u4e00\u4e2a\u60ac\u7a7a\u5f15\u7528 \u5f53\u7136\uff0c\u5982\u679c\u4f60\u663e\u5f0f\u6355\u83b7\uff0c\u4e5f\u662f \u4e00\u6837 \u7684\u3002 std :: function < void () > foo () { return [ s ] { std :: cout << s << std :: endl ; }; } \u603b\u800c\u8a00\u4e4b\uff0c\u5f53 Lambda \u751f\u547d\u5468\u671f\u6bd4\u5bf9\u8c61\u66f4\u957f\u65f6\uff0c\u6355\u83b7 this \u53ef\u80fd\u4f1a\u53d8\u5f97\u68d8\u624b\u3002 \u5f53\u60a8\u4f7f\u7528\u5f02\u6b65\u8c03\u7528\u6216\u591a\u7ebf\u7a0b\u65f6\uff0c\u53ef\u80fd\u4f1a\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\u3002 \u5728 C++17 \u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u4f1a\u91cd\u65b0\u8be6\u7ec6\u8ba8\u8bba\u8fd9\u4e2a\u8bdd\u9898 \u53ea\u80fd\u79fb\u52a8\u7684\u5bf9\u8c61 \u5047\u5982\uff0c\u73b0\u5728\u6709\u4e00\u4e2a\u201c\u4ec5\u53ef\u79fb\u52a8\u201d\u7684\u5bf9\u8c61\uff08\u50cf unique_ptr \uff09\uff0c\u90a3\u4e48\u4f60\u5c31\u65e0\u6cd5\u5c06\u5b83\u4f5c\u4e3a\u6355\u83b7\u5bf9\u8c61\u79fb\u52a8\u5230 Lambda \u4e2d\u3002 \u503c\u6355\u83b7\u5c06\u4e0d\u8d77\u4f5c\u7528\uff0c\u53ea\u80fd\u8fdb\u884c\u5f15\u7528\u6355\u83b7\u3002 std :: unique_ptr < int > p ( new int { 10 }); auto foo = [ p ]() {}; // does not compile.... auto foo_ref = [ & p ]() {}; // compiles, but the ownership is not passed \u4e0a\u8ff0\u4f8b\u5b50\u4e2d\uff0c\u4f60\u4f1a\u53d1\u73b0\u6355\u83b7 unique_ptr \u7684\u552f\u4e00\u65b9\u5f0f\u662f\u5f15\u7528\u6355\u83b7\uff0c\u4f46\u662f\u8fd9\u79cd\u65b9\u5f0f\u5e76\u4e0d\u662f\u6700\u597d\u7684\u65b9\u5f0f\uff0c\u56e0\u4e3a\u5b83\u5e76\u6ca1\u6709\u5c06 unique_ptr \u7684\u6240\u5c5e\u6743\u8fdb\u884c\u8f6c\u79fb\u3002 \u5728\u4e0b\u4e00\u7ae0 C++14 \u4e2d\uff0c\u7531\u4e8e\u521d\u59cb\u5316\u6355\u83b7\u7684\u5f15\u5165\uff0c\u8fd9\u4e2a\u95ee\u9898\u4f1a\u88ab\u4fee\u590d\u3002\u4f60\u53ef\u4ee5\u5728\u521d\u59cb\u5316\u6355\u83b7\u76f4\u63a5\u67e5\u9605\u5185\u5bb9\u3002 \u4fdd\u7559\u5e38\u91cf \u5982\u679c\u6355\u83b7\u4e00\u4e2a const \u4fee\u9970\u7684\u53d8\u91cf\uff0c\u90a3\u4e48\u5b83\u7684\u5e38\u91cf\u6027\u5c06\u4f1a\u88ab\u4fdd\u7559\u3002 \u4ee3\u7801 2-15 \u4fdd\u7559\u5e38\u91cf\u7684 const \u7279\u6027 #include <iostream> #include <type_traits> int main () { const int x = 10 ; auto foo = [ x ]() mutable { std :: cout << std :: is_const < decltype ( x ) >:: value << std :: endl ; x = 11 ; }; foo (); } \u8fd9\u6bb5\u4ee3\u7801\u5c06\u4e0d\u4f1a\u88ab\u7f16\u8bd1\u5668\u901a\u8fc7\uff0c\u56e0\u4e3a\u6355\u83b7\u7684\u5bf9\u8c61\u662f\u4e00\u4e2a\u5e38\u91cf\uff0c\u5373\u4fbf\u4f7f\u7528 mutable \u6765\u4fee\u9970\u4e5f\u65e0\u6d4e\u4e8e\u4e8b\u3002 \u6355\u83b7\u53c2\u6570\u5305 \u4e3a\u4e86\u7ed3\u675f\u6211\u4eec\u5bf9\u201c\u6355\u83b7\u201d\u7684\u8ba8\u8bba\uff0c\u5728\u6700\u540e\u6211\u4eec\u6765\u804a\u804a\u4f7f\u7528\u53ef\u53d8\u53c2\u6570\u6a21\u677f\u6765\u8fdb\u884c\u6355\u83b7\u3002 \u7f16\u8bd1\u5668\u4f1a\u5c06\u53c2\u6570\u5305\u6269\u5c55\u4e3a\u975e\u9759\u6001\u6570\u636e\u6210\u5458\u5217\u8868\uff0c\u5982\u679c\u60a8\u60f3\u5728\u6a21\u677f\u5316\u4ee3\u7801\u4e2d\u4f7f\u7528 Lambda\uff0c\u8fd9\u4f1a\u5341\u5206\u65b9\u4fbf\u3002\u4ee3\u7801\u793a\u4f8b\uff1a \u4ee3\u7801 2-16 \u6355\u83b7\u53ef\u53d8\u53c2\u6570\u5305 #include <iostream> #include <tuple> template < class ... Args > void captureTest ( Args ... args ) { const auto lambda = [ args ...] { const auto tup = std :: make_tuple ( args ...); std :: cout << \"tuple size: \" << std :: tuple_size < decltype ( tup ) >:: value << '\\n' ; std :: cout << \"tuple 1st: \" << std :: get < 0 > ( tup ) << '\\n' ; }; lambda (); // call it } int main () { captureTest ( 1 , 2 , 3 , 4 ); captureTest ( \"Hello world\" , 10.0f ); } \u8fd0\u884c\u8fd9\u6bb5\u4ee3\u7801\uff0c\u7ed3\u679c\u4e3a\uff1a tuple size: 4 tuple 1st: 1 tuple size: 2 tuple 1st: Hello world \u5728\u8fd9\u91cc\u5c55\u793a\u4e86\u4f7f\u7528\u53ef\u53d8\u957f\u53c2\u6570\u5305\u8fdb\u884c\u503c\u6355\u83b7\uff08\u5f15\u7528\u6355\u83b7\u540c\u7406\uff09\uff0c\u6355\u83b7\u7684\u5bf9\u8c61\u201c\u5b58\u50a8\u201d\u5728\u4e00\u4e2a tuple \u5bf9\u8c61\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e9b\u8f85\u52a9\u51fd\u6570\u6765\u8bbf\u95ee tuple \u4e2d\u7684\u6570\u636e\u548c\u5c5e\u6027\u3002 \u5f53\u7136\u4e86\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 C++ Insight \u6765\u89c2\u5bdf\u7f16\u8bd1\u5668\u662f\u5982\u679c\u751f\u6210\u8fd9\u4e2a\u4ee3\u7801\u5e76\u4e14\u5c55\u5f00\u6a21\u677f\u3001\u53c2\u6570\u5305\u548c Lambda \u7684\u3002 C++14 \u8ba9\u6355\u83b7\u4ec5\u53ef\u79fb\u52a8\u7c7b\u578b\u6210\u4e3a\u53ef\u80fd\uff0c\u5e76\u4e14 C++20 \u4e2d\u589e\u5f3a\u4e86\u5bf9\u53ef\u53d8\u53c2\u6570\u5305\u7684\u652f\u6301\u3002 5. \u8fd4\u56de\u7c7b\u578b \u5728\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u4ee5\u8df3\u8fc7 Lambda \u7684\u8fd4\u56de\u7c7b\u578b\uff0c\u8ba9\u7f16\u8bd1\u5668\u4e3a\u60a8\u63a8\u5bfc\u7c7b\u578b\u3002 \u6700\u521d\uff0c\u8fd4\u56de\u7c7b\u578b\u7684\u63a8\u5bfc\u4ec5\u9650\u4e8e\u51fd\u6570\u4f53\u5185\u4ec5\u5305\u542b\u5355\u4e2a return \u8bed\u53e5\u7684 Lambda\u3002 \u4f46\u662f\uff0c\u7531\u4e8e C++ \u6807\u51c6\u5b9e\u73b0\u4e86\u4e00\u4e2a\u66f4\u4fbf\u6377\u7684\u7248\u672c\uff0c\u56e0\u6b64\u8fd9\u9650\u5236\u5f88\u5feb\u5c31\u53d6\u6d88\u4e86\u3002 \u76f8\u5173\u5185\u5bb9\u53ef\u4ee5\u53c2\u8003\uff1a C++ Standard Core Language Defect Reports and Accepted Issues, Revision 104 \u603b\u7ed3\u4e00\u4e0b\uff0c\u4ece C++11 \u5f00\u59cb\uff0c\u53ea\u8981\u6240\u6709\u7684 return \u8bed\u53e5\u90fd\u662f\u76f8\u540c\u7684\u7c7b\u578b\uff0c\u7f16\u8bd1\u5668\u5c31\u80fd\u591f\u63a8\u65ad\u51fa\u8fd4\u56de\u7c7b\u578b\u3002 \u5982\u679c\u6240\u6709\u7684 return \u8bed\u53e5\u90fd\u8fd4\u56de\u4e86\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u5e76\u4e14\u8fd4\u56de\u8868\u8fbe\u5f0f\u7684\u7c7b\u578b\u90fd\u7ecf\u8fc7\u4e86\u4e00\u4e2a\u4ece\u5de6\u503c\u5230\u53f3\u503c\u7684\u8f6c\u6362\uff087.1 [conv.lavl]\uff09\u6216\u8005\u4ece\u6570\u7ec4\u5230\u6307\u9488\u7684\u8f6c\u6362\uff087.2 [conv.array]\uff09\u6216\u8005\u4ece\u51fd\u6570\u5230\u6307\u9488\u7684\u8f6c\u6362\uff087.3 [conv.func]\uff09\uff0c\u90a3\u4e48\u4ed6\u4eec\u7684\u7c7b\u578b\u90fd\u662f\u4e00\u6837\u7684\uff0c\u5c31\u662f\u666e\u901a\u7c7b\u578b\u3002 \u4ee3\u7801 2-17 \u8fd4\u56de\u7c7b\u578b\u63a8\u5bfc #include <type_traits> int main () { const auto baz = []( int x ) noexcept { if ( x < 20 ) return x * 1.1 ; else return x * 2.1 ; }; static_assert ( std :: is_same < double , decltype ( baz ( 10 )) >:: value , \"has to be the same!\" ); } \u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6709\u4e24\u4e2a\u8fd4\u56de\u8bed\u53e5\uff0c\u4f46\u662f\u4ed6\u4eec\u90fd\u6307\u5411 double \u7c7b\u578b\uff0c\u6240\u4ee5\u7f16\u8bd1\u5668\u80fd\u591f\u63a8\u65ad\u51fa\u6700\u7ec8\u7684\u7c7b\u578b\u3002 \u5728 C++14 \u4e2d\uff0c\u63a8\u5bfc\u5e38\u89c4\u51fd\u6570\u65f6\uff0clambda \u7684\u7c7b\u578b\u4f1a\u81ea\u52a8\u66f4\u65b0\u4ee5\u9002\u5e94 auto \u7c7b\u578b\u7684\u89c4\u5219\u3002 \u5c3e\u90e8\u8fd4\u56de\u7c7b\u578b\u8bed\u6cd5 \u5982\u679c\u4f60\u60f3\u663e\u5f0f\u7684\u51f8\u663e\u8fd4\u56de\u7c7b\u578b\uff0c\u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528\u5c3e\u90e8\u8fd4\u56de\u7c7b\u578b\u7684\u8bed\u6cd5\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff1a \u4ee3\u7801 2-18 lambda \u8fd4\u56de\u5b57\u7b26\u4e32\u5e8f\u5217 #include <iostream> #include <string> int main () { const auto testSpeedString = []( int speed ) noexcept { if ( speed > 100 ) return \"you're a super fast\" ; return \"you're a regular\" ; }; auto str = testSpeedString ( 100 ); str += \" driver\" ; // \u51fa\u9519! const char*\u7c7b\u578b\u6ca1\u6709+=\u64cd\u4f5c\u7b26\u53ef\u4ee5\u5e94\u7528 std :: cout << str ; return 0 ; } \u5f53\u7136\uff0c\u8fd9\u6bb5\u4ee3\u7801\u662f\u65e0\u6cd5\u7f16\u8bd1\u7684\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u81ea\u52a8\u63a8\u65ad\u7684\u7c7b\u578b\u7ed3\u679c\u662f const char*\uff0c\u4f5c\u4e3a lambda \u7684\u8fd4\u56de\u7c7b\u578b\uff0c+= \u64cd\u4f5c\u7b26\u65e0\u6cd5\u5e94\u7528\u4e8e const char * \u7c7b\u578b\uff0c\u6240\u4ee5\u7f16\u8bd1\u5668\u963b\u6b62\u4e86\u8fd9\u79cd\u884c\u4e3a\u3002 \u5f53\u7136\uff0c\u6211\u4eec\u7a0d\u5fae\u4fee\u6539\u4e00\u4e0b\uff0c \u4e0a\u8ff0\u4ee3\u7801 \u5c31\u53ef\u4ee5\u6b63\u5e38\u5de5\u4f5c\u4e86\u3002 const auto testSpeedString = []( int speed ) -> std :: string { if ( speed > 100 ) return \"you're a super fast\" ; return \"you're a regular\" ; }; auto str = testSpeedString ( 100 ); str += \" driver\" ; \u6211\u4eec\u53ea\u662f\u5c06 noexcept \u79fb\u9664\uff0c\u5e76\u66f4\u6362\u4e3a\u4e86 std::string \u3002 \u5f53\u7136\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u547d\u540d\u7a7a\u95f4 std::string_literals \u7136\u540e\u8fd4\u56de std::string \u7c7b\u578b\u7684 \u201cyou're a regular\u201d \u3002 6. \u8f6c\u5316\u4e3a\u51fd\u6570\u6307\u9488 \u5f53\u4f60\u7684 Lambda \u8868\u8fbe\u5f0f\u6ca1\u6709\u6355\u83b7\u5230\u4efb\u4f55\u53d8\u91cf\u65f6\uff0c\u7f16\u8bd1\u5668\u5c31\u4f1a\u5c06\u5176\u8f6c\u6362\u4e3a\u4e00\u4e2a\u5e38\u89c4\u51fd\u6570\u6307\u9488\u3002 \u53ef\u4ee5\u67e5\u770b\u6807\u51c6\u8349\u6848\u4e2d [expr.prim.lambda#6] \u7684\u5b9a\u4e49\uff1a \u6ca1\u6709\u6355\u83b7\u7684 Lambda \u8868\u8fbe\u5f0f\u7684\u95ed\u5305\u7c7b\u578b\u5177\u6709\u516c\u5171\u975e\u865a\u62df\u3001\u975e\u663e\u5f0f\u7684 const \u8f6c\u6362\u51fd\u6570\uff0c\u6307\u5411\u4e0e\u95ed\u5305\u7c7b\u578b\u7684\u51fd\u6570\u8c03\u7528\u8fd0\u7b97\u7b26\u5177\u6709\u76f8\u540c\u53c2\u6570\u548c\u8fd4\u56de\u7c7b\u578b\u7684\u51fd\u6570\u7684\u6307\u9488\u3002 \u6b64\u8f6c\u6362\u51fd\u6570\u8fd4\u56de\u7684\u503c\u5e94\u4e3a\u51fd\u6570\u7684\u5730\u5740\uff0c\u8be5\u51fd\u6570\u5728\u8c03\u7528\u65f6\u4e0e\u8c03\u7528\u95ed\u5305\u7c7b\u578b\u7684\u51fd\u6570\u8c03\u7528\u8fd0\u7b97\u7b26\u5177\u6709\u76f8\u540c\u7684\u6548\u679c\u3002 \u4e3a\u4e86\u9610\u660e Lambda \u662f\u5982\u4f55\u652f\u6301\u8fd9\u79cd\u8f6c\u6362\uff0c\u8ba9\u6211\u4eec\u8003\u8651\u4ee5\u4e0b\u793a\u4f8b\u3002 \u5b83\u5b9a\u4e49\u4e86\u4e00\u4e2a\u660e\u786e\u5b9a\u4e49\u8f6c\u6362\u8fd0\u7b97\u7b26\u7684\u4eff\u51fd\u6570 baz \uff1a \u4ee3\u7801 2-19 \u8f6c\u5316\u51fd\u6570\u6307\u9488 #include <iostream> void callWith10 ( void ( * bar )( int )) { bar ( 10 ); } int main () { struct { using f_ptr = void ( * )( int ); void operator ()( int s ) const { return call ( s ); } operator f_ptr () const { return & call ; } private : static void call ( int s ) { std :: cout << s << '\\n' ; }; } baz ; callWith10 ( baz ); callWith10 ([]( int x ) { std :: cout << x << '\\n' ; }); } \u5728\u8fd9\u4e2a\u7a0b\u5e8f\u4e2d\uff0c\u6709\u4e00\u4e2a callWith10 \u51fd\u6570\uff0c\u5b83\u63a5\u53d7\u4e00\u4e2a\u51fd\u6570\u6307\u9488\u3002 \u7136\u540e\u6211\u4eec\u7528\u4e24\u4e2a\u53c2\u6570\u8c03\u7528\u5b83\uff08\u7b2c 23 \u884c\u548c\u7b2c 24 \u884c\uff09\uff1a\u7b2c\u4e00\u4e2a\u4f7f\u7528 baz \uff0c\u5b83\u662f\u4e00\u4e2a\u5305\u542b\u5fc5\u8981\u8f6c\u6362\u8fd0\u7b97\u7b26\u7684\u4eff\u51fd\u6570 - \u5b83\u8f6c\u6362\u4e3a f_ptr \uff0c\u4e0e callWith10 \u7684\u8f93\u5165\u53c2\u6570\u76f8\u540c\u3002\u7b2c\u4e8c\u4e2a\u4f7f\u7528 Lambda\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7f16\u8bd1\u5668\u5c06\u6267\u884c\u6240\u9700\u7684\u8f6c\u6362\u3002 \u5f53\u60a8\u9700\u8981\u8c03\u7528\u9700\u8981\u56de\u8c03\u7684 C \u98ce\u683c\u7684\u51fd\u6570\u65f6\uff0c\u8fd9\u79cd\u8f6c\u6362\u53ef\u80fd\u4f1a\u5f88\u65b9\u4fbf\u3002 \u4f8b\u5982\uff0c\u4e0b\u9762\u7684\u4ee3\u7801\u662f\u4ece C \u6807\u51c6\u5e93\u4e2d\u8c03\u7528 qsort \u51fd\u6570\uff0c\u540c\u65f6\u4f7f\u7528 Lambda \u6765\u8fdb\u884c\u53cd\u5411\u6392\u5e8f\u3002 \u4ee3\u7801 2-20 \u8c03\u7528 C \u98ce\u683c\u51fd\u6570 #include <cstdlib> #include <iostream> int main () { int values [] = { 8 , 9 , 2 , 5 , 1 , 4 , 7 , 3 , 6 }; constexpr size_t numElements = sizeof ( values ) / sizeof ( values [ 0 ]); std :: qsort ( values , numElements , sizeof ( int ), []( const void * a , const void * b ) noexcept { return ( * ( int * ) b - * ( int * ) a ); }); for ( const auto & val : values ) std :: cout << val << \", \" ; } \u6b63\u5982\u60a8\u5728\u4ee3\u7801\u793a\u4f8b\u4e2d\u770b\u5230\u7684\u90a3\u6837\uff0c\u4f7f\u7528 std::qsort \u4ec5\u5c06\u51fd\u6570\u6307\u9488\u4f5c\u4e3a\u6bd4\u8f83\u5668\u3002 \u7f16\u8bd1\u5668\u53ef\u4ee5\u5bf9\u6211\u4eec\u4f20\u9012\u7684\u65e0\u72b6\u6001 Lambda \u8fdb\u884c\u9690\u5f0f\u8f6c\u6362\u3002 \u4e00\u4e2a\u6709\u8da3\u7684\u4f8b\u5b50 \u5728\u8ba8\u8bba\u522b\u7684\u5185\u5bb9\u4e4b\u524d\uff0c\u8fd9\u513f\u6709\u4e00\u4e2a\u53ef\u80fd\u5341\u5206\u6709\u8da3\u7684\u4f8b\u5b50\uff0c\u6211\u4eec\u53ef\u4ee5\u4e00\u8d77\u6765\u7814\u7a76\u4e0b\uff1a \u4ee3\u7801 2-21 \u52a0\u53f7\u548c Lambda \u8868\u8fbe\u5f0f #include <type_traits> int main () { auto funcPtr = + [] {}; static_assert ( std :: is_same < decltype ( funcPtr ), void ( * )() >:: value ); } \u6ce8\u610f\u4e00\u4e0b\u8fd9\u4e2a\u201c\u5947\u602a\u201d\u7684\u201c + \u201d\u8fd0\u7b97\u7b26\u7684\u8bed\u6cd5\uff0c\u5982\u679c\u4f60\u53bb\u6389\u8fd9\u4e2a\u52a0\u53f7\uff0c\u90a3\u6574\u4e2a static_assert \u5c31\u5931\u8d25\u4e86\u3002 \u8fd9\u662f\u4ec0\u4e48\u795e\u5947\u7684\u539f\u56e0\uff1f \u8981\u7406\u89e3\u5176\u4e2d\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u6211\u4eec\u5f97\u5148\u770b\u770b C++ \u751f\u6210\u7684\u4ee3\u7801\u662f\u4ec0\u4e48\u6837\u7684\uff1a #include <type_traits> int main () { class __lambda_4_18 { public : inline void operator ()() const { } using retType_4_18 = auto ( * )() -> void ; inline operator retType_4_18 () const noexcept { return __invoke ; } private : static inline void __invoke () { } } __lambda_4_18 {}; using FuncPtr_4 = void ( * )(); FuncPtr_4 funcPtr = + static_cast < void ( * )() > ( __lambda_4_18 . operator __lambda_4_18 :: retType_4_18 ()); /* PASSED: static_assert(std::integral_constant<bool, 1>::value); */ } \u4ee3\u7801\u4e2d\u7684 + \u662f\u4e00\u4e2a\u4e00\u5143\u8fd0\u7b97\u7b26\uff0c\u4e14\u53ef\u4ee5\u8fd0\u7528\u5728\u6307\u9488\u4e0a\u3002 \u56e0\u6b64\u7f16\u8bd1\u5668\u5c06\u65e0\u72b6\u6001\u7684 Lambda \u8f6c\u6362\u6210\u4e86\u51fd\u6570\u6307\u9488\uff0c\u518d\u5206\u914d\u7ed9 funcPtr \u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u5982\u679c\u5220\u9664\u4e86\u201c + \u201d\u53f7\uff0c\u90a3\u4e48 funcPtr \u5c31\u4ec5\u4ec5\u662f\u4e00\u4e2a\u5355\u7eaf\u7684\u95ed\u5305\u5bf9\u8c61\uff0c\u6240\u4ee5\u5728 static_assert \u65f6\u4f1a\u5931\u8d25\u3002 \u867d\u7136\u7528 + \u8fd9\u6837\u7684\u8bed\u6cd5\u53ef\u80fd\u4e0d\u662f\u4e00\u4e2a\u6700\u597d\u7684\u65b9\u5f0f\uff0c\u4f46\u662f\u4f60\u53ef\u4ee5\u7528 static_cast \u6765\u66ff\u4ee3\uff0c\u53ef\u4ee5\u5b9e\u73b0\u548c + \u4e00\u6837\u7684\u6548\u679c\u3002 \u5f53\u60a8\u4e0d\u5e0c\u671b\u7f16\u8bd1\u5668\u521b\u5efa\u592a\u591a\u51fd\u6570\u5b9e\u4f8b\u65f6\uff0c\u60a8\u53ef\u4ee5\u5e94\u7528\u6b64\u6280\u672f\u3002\u4f8b\u5982\uff1a \u4ee3\u7801 2-22 \u5f3a\u5236\u8f6c\u6362\u4e3a\u51fd\u6570\u8c03\u7528 template < typename F > void call_function ( F f ) { f ( 10 ); } int main () { call_function ( static_cast < int ( * )( int ) > ([]( int x ) { return x + 2 ; })); call_function ( static_cast < int ( * )( int ) > ([]( int x ) { return x * 2 ; })); } \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u7f16\u8bd1\u5668\u53ea\u9700\u8981\u521b\u5efa\u4e00\u4e2a call_function \u5b9e\u4f8b\uff0c\u56e0\u4e3a\u5b83\u53ea\u9700\u8981\u4e00\u4e2a\u51fd\u6570\u6307\u9488 int (*)(int) \u3002 \u4f46\u662f\u5982\u679c\u4f60\u5220\u9664 static_casts \u90a3\u4e48\u4f60\u5c06\u5f97\u5230\u4e24\u4e2a\u7248\u672c\u7684 call_function \u56e0\u4e3a\u7f16\u8bd1\u5668\u5fc5\u987b\u4e3a Lambdas \u521b\u5efa\u4e24\u4e2a\u5355\u72ec\u7684\u7c7b\u578b\u3002 7. IIFE - \u7acb\u5373\u8c03\u7528\u51fd\u6570\u8868\u8fbe\u5f0f \u5728\u591a\u6570\u4f8b\u5b50\u4e2d\uff0c\u4f60\u53ef\u80fd\u53d1\u73b0\u4e86\uff0c\u6211\u7ecf\u5e38\u90fd\u662f\u5148\u5b9a\u4e49\u597d Lambda\uff0c\u5728\u4e4b\u540e\u624d\u53bb\u8c03\u7528\u5b83\u3002 \u7136\u800c\uff0c\u4f60\u4e5f\u53ef\u4ee5\u76f4\u63a5\u7acb\u5373\u8c03\u7528\u4e00\u4e2a lambda\uff1a \u4ee3\u7801 2-23 \u201c\u73b0\u5199\u73b0\u7528\u201dLambda #include <iostream> int main () { int x = 1 , y = 1 ; [ & ]() noexcept { ++ x ; ++ y ; }(); // <-- call () std :: cout << x << \", \" << y ; } \u4e0a\u9762\u8fd9\u4e2a\u4f8b\u5b50\uff0cLambda \u5728\u88ab\u521b\u5efa\u4e4b\u540e\u6ca1\u6709\u8d4b\u7ed9\u4efb\u4f55\u4e00\u4e2a\u95ed\u5305\u5bf9\u8c61\uff0c\u800c\u662f\u76f4\u63a5\u88ab\u8c03\u7528\uff08\u901a\u8fc7\u201c () \u201d\u64cd\u4f5c\u7b26\uff09\u3002 \u5982\u679c\u4f60\u8fd0\u884c\u4e0a\u8ff0\u7a0b\u5e8f\uff0c\u671f\u671b\u7ed3\u679c\u5e94\u8be5\u662f\u8f93\u51fa\u4e86\uff1a 2, 2 \u5728\u9047\u5230\u590d\u6742\u7684\u5e38\u91cf\u5bf9\u8c61\u7684\u521d\u59cb\u5316\u65f6\uff0c\u8fd9\u79cd\u8868\u8fbe\u5f0f\u5c06\u5341\u5206\u5730\u6709\u7528\uff1a const auto val = []() { /* several lines of code... */ }(); // call it! \u5176\u4e2d\uff0c val \u662f\u4e00\u4e2a\u5e38\u91cf\uff08constant value\uff09\uff0c\u5e76\u4e14\u5176\u7c7b\u578b\u4e3a Lambda \u8868\u8fbe\u5f0f\u7684\u8fd4\u56de\u7c7b\u578b\uff1a // val1 is int const auto val1 = []() { return 10 ; }(); // val2 is std::string const auto val2 = []() -> std :: string { return \"ABC\" ; }(); \u4e0b\u9762\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u8f83\u957f\u7684\u7528\u4f8b\uff0c\u5728\u51fd\u6570\u5185\u90e8\u4f7f\u7528 IIFE \u5f62\u5f0f\u6765\u6784\u9020\u4e00\u4e2a\u8f85\u52a9 Lambda \u51fd\u6570\uff0c\u53bb\u521b\u5efa\u4e00\u4e2a\u5e38\u91cf\u3002 \u4ee3\u7801 2-24 IIFE \u548c HTML \u751f\u6210\u5668 #include <iostream> #include <string> void ValidateHTML ( const std :: string & ) {} std :: string BuildAHref ( const std :: string & link , const std :: string & text ) { const std :: string html = [ & link , & text ] { const auto & inText = text . empty () ? link : text ; return \"<a href= \\\" \" + link + \" \\\" >\" + inText + \"</a>\" ; }(); // call! ValidateHTML ( html ); return html ; } int main () { try { const auto ahref = BuildAHref ( \"www.leanpub.com\" , \"Leanpub Store\" ); std :: cout << ahref ; } catch (...) { std :: cout << \"bad format...\" ; } } \u8fd9\u4e2a\u7528\u4f8b\u4e2d\uff0c\u51fd\u6570 BuildAHref() \uff0c\u5b83\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\uff0c\u7136\u540e\u6784\u5efa\u4e00\u4e2a <a> </a> HTML \u6807\u7b7e\u3002 \u6839\u636e\u8f93\u5165\u53c2\u6570\uff0c\u6211\u4eec\u6784\u5efa html \u53d8\u91cf\u3002 \u5982\u679c\u6587\u672c\u4e0d\u4e3a\u7a7a\uff0c\u5219\u6211\u4eec\u5c06\u5176\u7528\u4f5c\u5185\u90e8 HTML \u503c\u3002 \u5426\u5219\uff0c\u6211\u4eec\u4f7f\u7528\u9ed8\u8ba4\u94fe\u63a5\u3002 \u6211\u4eec\u5e0c\u671b html \u53d8\u91cf\u662f\u5e38\u91cf\uff0c\u4f46\u5f88\u96be\u7f16\u5199\u5177\u6709\u8f93\u5165\u53c2\u6570\u6240\u9700\u6761\u4ef6\u7684\u7d27\u51d1\u4ee3\u7801\u3002 \u591a\u4e8f\u4e86 IIFE\uff0c\u6211\u4eec\u53ef\u4ee5\u7f16\u5199\u5355\u72ec\u7684 Lambda\uff0c\u7136\u540e\u7528 const \u6807\u8bb0\u6211\u4eec\u7684\u53d8\u91cf\u3002 \u7a0d\u540e\u53ef\u4ee5\u5c06\u53d8\u91cf\u4f20\u9012\u7ed9 ValidateHTML \u3002 \u53ef\u8bfb\u6027\u63d0\u793a \u6709\u4e9b\u65f6\u5019\uff0c\u5229\u7528\u73b0\u5199\u73b0\u7528\u7684 Lambda \u8868\u8fbe\u5f0f\u4f1a\u9020\u6210\u4e00\u4e9b\u4ee3\u7801\u53ef\u8bfb\u6027\u4e0a\u7684\u56f0\u6270\u3002 \u4f8b\u5982\uff1a const auto EnableErrorReporting = [ & ]() { if ( HighLevelWarningEnabled ()) return true ; if ( HighLevelWarningEnabled ()) return UsersWantReporting (); return false ; }(); if ( EnableErrorReporting ) { // ... } \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0cLambda \u4ee3\u7801\u76f8\u5f53\u590d\u6742\uff0c\u9605\u8bfb\u4ee3\u7801\u7684\u5f00\u53d1\u4eba\u5458\u4e0d\u4ec5\u8981\u89e3\u5bc6 Lambda \u662f\u7acb\u5373\u8c03\u7528\u7684\uff0c\u800c\u4e14\u8fd8\u8981\u5bf9 EnableErrorReporting \u7c7b\u578b\u8fdb\u884c\u63a8\u7406\u3002 \u4ed6\u4eec\u53ef\u80fd\u4f1a\u5047\u8bbe EnableErrorReporting \u662f\u95ed\u5305\u5bf9\u8c61\u800c\u4e0d\u4ec5\u4ec5\u662f\u4e00\u4e2a\u5e38\u91cf\u53d8\u91cf\u3002 \u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\uff0c\u60a8\u53ef\u80fd\u4f1a\u8003\u8651\u4e0d\u4f7f\u7528 auto \uff0c\u4ee5\u4fbf\u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u67e5\u770b\u7c7b\u578b\u3002 \u751a\u81f3\u53ef\u4ee5\u5728 }() \u65c1\u8fb9\u6dfb\u52a0\u6ce8\u91ca\uff0c\u4f8b\u5982 // call it now \u3002 \u5728 C++17 \u7ae0\u8282\u6211\u4eec\u4f1a\u9047\u5230\u4e00\u4e2a\u201c\u5347\u7ea7\u7248\u201d\u7684 IIFE\u3002 8. Lambda \u7ee7\u627f \u4e5f\u8bb8\u4f60\u4f1a\u6709\u4e9b\u5403\u60ca\uff0cLambda \u5c45\u7136\u8fd8\u53ef\u4ee5\u6d3e\u751f\uff1f \u7531\u4e8e\u7f16\u8bd1\u5668\u5c06 Lambda \u6269\u5c55\u4e3a\u4e86\u4e00\u4e2a\u4eff\u51fd\u6570\u5bf9\u8c61\uff0c\u5e76\u91cd\u8f7d\u4e86\u5176\u8c03\u7528\u64cd\u4f5c\u7b26 () \uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4ece\u8fd9\u70b9\u53bb\u7ee7\u627f Lambda\u3002 \u6765\u770b\u770b\u4e00\u4e2a\u57fa\u7840\u4ee3\u7801\uff1a \u4ee3\u7801 2-25 \u4ece\u5355\u4e2a Lambda \u4e2d\u7ee7\u627f #include <iostream> template < typename Callable > class ComplexFunctor : public Callable { public : explicit ComplexFunctor ( Callable f ) : Callable ( f ) {} }; template < typename Callable > ComplexFunctor < Callable > MakeComplexFunctor ( Callable && cal ) { return ComplexFunctor < Callable > ( cal ); } int main () { const auto func = MakeComplexFunctor ([]() { std :: cout << \"Hello Functor!\" ; }); func (); } \u8fd9\u6bb5\u4ee3\u7801\u4e2d\uff0c\u6709\u4e00\u4e2a ComplexFunctor \u7c7b\uff0c\u5b83\u6d3e\u751f\u81ea Callable \uff0c\u5b83\u662f\u4e00\u4e2a\u6a21\u677f\u53c2\u6570\u3002\u5982\u679c\u6211\u4eec\u60f3\u4ece Lambda \u6d3e\u751f\uff0c\u6211\u4eec\u9700\u8981\u505a\u4e00\u4e2a\u5c0f\u6280\u5de7\uff0c\u56e0\u4e3a\u6211\u4eec\u65e0\u6cd5\u62fc\u51fa\u95ed\u5305\u7c7b\u578b\u7684\u786e\u5207\u7c7b\u578b\uff08\u9664\u975e\u6211\u4eec\u5c06\u5b83\u5305\u88c5\u5230 std::function \u4e2d\uff09\u3002 \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u9700\u8981\u53ef\u4ee5\u6267\u884c\u6a21\u677f\u53c2\u6570\u63a8\u5bfc\u5e76\u83b7\u53d6 Lambda \u95ed\u5305\u7c7b\u578b\u7684 MakeComplexFunctor \u51fd\u6570\u3002 \u9664\u4e86\u540d\u79f0\u4e4b\u5916\uff0c ComplexFunctor \u53ea\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u5305\u88c5\u5668\uff0c\u6ca1\u6709\u591a\u5927\u7528\u5904\u3002\u662f\u5426\u6709\u6b64\u7c7b\u4ee3\u7801\u6a21\u5f0f\u7684\u7528\u4f8b\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u6269\u5c55\u4e0a\u9762\u7684\u4ee3\u7801\u5e76\u7ee7\u627f\u4e24\u4e2a Lambdas \u5e76\u521b\u5efa\u4e00\u4e2a\u91cd\u8f7d\u96c6\uff1a \u4ee3\u7801 2-25 \u4ece\u4e24\u4e2a Lambda \u4e2d\u7ee7\u627f #include <iostream> template < typename TCall , typename UCall > class SimpleOverloaded : public TCall , UCall { public : SimpleOverloaded ( TCall tf , UCall uf ) : TCall ( tf ), UCall ( uf ) {} using TCall :: operator (); using UCall :: operator (); }; template < typename TCall , typename UCall > SimpleOverloaded < TCall , UCall > MakeOverloaded ( TCall && tf , UCall && uf ) { return SimpleOverloaded < TCall , UCall > ( tf , uf ); } int main () { const auto func = MakeOverloaded ( []( int ) { std :: cout << \"Int! \\n \" ; }, []( float ) { std :: cout << \"Float! \\n \" ; }); func ( 10 ); func ( 10.0f ); } \u8fd9\u6b21\u6211\u4eec\u6709\u66f4\u591a\u7684\u4ee3\u7801\uff1a\u6211\u4eec\u4ece\u4e24\u4e2a\u6a21\u677f\u53c2\u6570\u6d3e\u751f\uff0c\u4f46\u6211\u4eec\u8fd8\u9700\u8981\u663e\u5f0f\u5730\u516c\u5f00\u5b83\u4eec\u7684\u8c03\u7528\u8fd0\u7b97\u7b26\u3002 \u8fd9\u662f\u4e3a\u4ec0\u4e48\u5462\uff1f\u8fd9\u662f\u56e0\u4e3a\u5728\u5bfb\u627e\u6b63\u786e\u7684\u51fd\u6570\u91cd\u8f7d\u65f6\uff0c\u7f16\u8bd1\u5668\u8981\u6c42\u5019\u9009\u5bf9\u8c61\u5728\u540c\u4e00\u8303\u56f4\u5185\u3002 \u4e3a\u4e86\u7406\u89e3\u8fd9\u4e00\u70b9\uff0c\u8ba9\u6211\u4eec\u7f16\u5199\u4e00\u4e2a\u6d3e\u751f\u81ea\u4e24\u4e2a\u57fa\u7c7b\u7684\u7b80\u5355\u7c7b\u578b\u3002 \u8be5\u793a\u4f8b\u8fd8\u6ce8\u91ca\u6389\u4e86\u4e24\u4e2a using \u8bed\u53e5\u3002 #include <iostream> struct BaseInt { void Func ( int ) { std :: cout << \"BaseInt... \\n \" ; } }; struct BaseDouble { void Func ( double ) { std :: cout << \"BaseDouble... \\n \" ; } }; struct Derived : public BaseInt , BaseDouble { // using BaseInt::Func; // using BaseDouble::Func; }; int main () { Derived d ; d . Func ( 10.0 ); } \u6211\u4eec\u6709\u4e24\u4e2a\u5b9e\u73b0 Func \u7684\u57fa\u7c7b\u3002\u6211\u4eec\u60f3\u4ece\u6d3e\u751f\u5bf9\u8c61\u8c03\u7528\u8fd9\u4e2a Func \u65b9\u6cd5\u3002 GCC \u7f16\u8bd1\u4fbf\u4f1a\u62a5\u51fa\u9519\u8bef\uff1a error:request formember 'Func' is ambiguous \u56e0\u4e3a\u6211\u4eec\u6ce8\u91ca\u6389\u4e86\u5168\u90e8\u7684\u58f0\u660e\u6765\u81ea BaseInt \u548c BaseDouble \u7684 ::Func \u7684 using \u8bed\u53e5\u3002 \u7f16\u8bd1\u5668\u6709\u4e24\u4e2a\u4f5c\u7528\u57df\u6765\u641c\u7d22\u6700\u4f73\u5019\u9009\uff0c\u6839\u636e\u6807\u51c6\uff0c\u8fd9\u662f\u4e0d\u5141\u8bb8\u7684\u3002 \u597d\u5427\uff0c\u8ba9\u6211\u4eec\u56de\u5230\u6211\u4eec\u7684\u66f4\u4e0a\u9762\u90a3\u4e2a\u4f8b\u5b50\uff1a SimpleOverloaded \u662f\u4e00\u4e2a\u57fa\u672c\u7c7b\uff0c\u5b83\u4e0d\u662f\u751f\u4ea7\u5c31\u7eea\u7684\u3002 \u770b\u770b C++17 \u7ae0\uff0c\u6211\u4eec\u5c06\u8ba8\u8bba\u6b64\u6a21\u5f0f\u7684\u9ad8\u7ea7\u7248\u672c\u3002 \u591a\u4e8f\u4e86 C++17 \u7684\u51e0\u4e2a\u7279\u6027\uff0c\u6211\u4eec\u5c06\u80fd\u591f\u4ece\u591a\u4e2a Lambda \u7ee7\u627f\uff08\u611f\u8c22\u53ef\u53d8\u53c2\u6570\u6a21\u677f\uff09\u5e76\u5229\u7528\u66f4\u591a\u7684\u7d27\u51d1\u8bed\u6cd5\uff01 9. \u5728\u5bb9\u5668\u4e2d\u5b58\u50a8 Lambda \u4f5c\u4e3a\u672c\u7ae0\u7684\u6700\u540e\u4e00\u4e2a\u6280\u5de7\uff0c\u8ba9\u6211\u4eec\u6765\u770b\u770b\u5728\u5bb9\u5668\u4e2d\u5b58\u50a8\u95ed\u5305\u7684\u95ee\u9898\u3002 \u4f46\u662f\u6211\u4e0d\u662f\u5199\u8fc7\u4e0d\u80fd\u9ed8\u8ba4\u521b\u5efa\u548c\u5206\u914d Lambdas \u5417\uff1f \u662f\u7684\u2026\u2026\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u5728\u8fd9\u91cc\u505a\u4e00\u4e9b\u6280\u5de7\u3002 \u6280\u672f\u4e4b\u4e00\u662f\u5229\u7528\u8f6c\u6362\u4e3a\u51fd\u6570\u6307\u9488\u7684\u65e0\u72b6\u6001 Lambda \u7684\u5c5e\u6027\u3002 \u867d\u7136\u60a8\u4e0d\u80fd\u76f4\u63a5\u5b58\u50a8\u95ed\u5305\u5bf9\u8c61\uff0c\u4f46\u60a8\u53ef\u4ee5\u4fdd\u5b58\u4ece Lambda \u8868\u8fbe\u5f0f\u8f6c\u6362\u800c\u6765\u7684\u51fd\u6570\u6307\u9488\u3002 \u4f8b\u5982\uff1a \u4ee3\u7801 2-26 \u5c06 Lambda \u5b58\u4e3a\u51fd\u6570\u6307\u9488 #include <iostream> #include <vector> int main () { using TFunc = void ( * )( int & ); std :: vector < TFunc > ptrFuncVec ; ptrFuncVec . push_back ([]( int & x ) { std :: cout << x << '\\n' ; }); ptrFuncVec . push_back ([]( int & x ) { x *= 2 ; }); ptrFuncVec . push_back ( ptrFuncVec [ 0 ]); // print it again; int x = 10 ; for ( const auto & entry : ptrFuncVec ) entry ( x ); } \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u5c06\u5e94\u7528\u4e8e\u53d8\u91cf\u7684\u51fd\u6570\u5411\u91cf\u3002\u5bb9\u5668\u4e2d\u6709\u4e09\u4e2a\u6761\u76ee\uff1a \u7b2c\u4e00\u4e2a\u6253\u5370\u8f93\u5165\u53c2\u6570\u7684\u503c\u3002 \u7b2c\u4e8c\u4e2a\u4fee\u6539\u503c\u3002 \u7b2c\u4e09\u4e2a\u662f\u7b2c\u4e00\u4e2a\u7684\u526f\u672c\uff0c\u56e0\u6b64\u5b83\u4e5f\u6253\u5370\u503c\u3002 \u8be5\u89e3\u51b3\u65b9\u6848\u6709\u6548\uff0c\u4f46\u4ec5\u9650\u4e8e\u65e0\u72b6\u6001 Lambda\u3002 \u5982\u679c\u6211\u4eec\u60f3\u89e3\u9664\u8fd9\u4e2a\u9650\u5236\u600e\u4e48\u529e\uff1f \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u91cd\u5ea6\u52a9\u624b\uff1a std::function \u3002 \u4e3a\u4e86\u4f7f\u793a\u4f8b\u6709\u8da3\uff0c\u5b83\u8fd8\u4ece\u7b80\u5355\u7684\u6574\u6570\u5207\u6362\u5230\u5904\u7406 std::string objects \u7684 Lambdas\uff1a \u4ee3\u7801 2-27 \u5c06 Lambda \u5b58\u4e3a std::function #include <algorithm> #include <functional> #include <iostream> #include <vector> int main () { std :: vector < std :: function < std :: string ( const std :: string & ) >> vecFilters ; size_t removedSpaceCounter = 0 ; const auto removeSpacesCnt = [ & removedSpaceCounter ]( const std :: string & str ) { std :: string tmp ; std :: copy_if ( str . begin (), str . end (), std :: back_inserter ( tmp ), []( char ch ) { return ! isspace ( ch ); }); removedSpaceCounter += str . length () - tmp . length (); return tmp ; }; const auto makeUpperCase = []( const std :: string & str ) { std :: string tmp = str ; std :: transform ( tmp . begin (), tmp . end (), tmp . begin (), []( unsigned char c ){ return std :: toupper ( c ); }); return tmp ; }; vecFilters . emplace_back ( removeSpacesCnt ); vecFilters . emplace_back ([]( const std :: string & x ) { return x + \" Amazing\" ; }); vecFilters . emplace_back ([]( const std :: string & x ) { return x + \" Modern\" ; }); vecFilters . emplace_back ([]( const std :: string & x ) { return x + \" C++\" ; }); vecFilters . emplace_back ([]( const std :: string & x ) { return x + \" World!\" ; }); vecFilters . emplace_back ( makeUpperCase ); const std :: string str = \" H e l l o \" ; auto temp = str ; for ( const auto & entryFunc : vecFilters ) temp = entryFunc ( temp ); std :: cout << temp ; std :: cout << \" \\n removed spaces: \" << removedSpaceCounter << '\\n' ; } \u8f93\u51fa\uff1a HELLO AMAZING MODERN C++ WORLD! removed spaces: 12 \u8fd9\u6b21\u6211\u4eec\u5c06 std::function<std::string(const std::string&)> \u5b58\u50a8\u5728\u5bb9\u5668\u4e2d\u3002 \u8fd9\u5141\u8bb8\u6211\u4eec\u4f7f\u7528\u4efb\u4f55\u7c7b\u578b\u7684\u51fd\u6570\u5bf9\u8c61\uff0c\u5305\u62ec\u5e26\u6709\u6355\u83b7\u53d8\u91cf\u7684 Lambda \u8868\u8fbe\u5f0f\u3002 \u5176\u4e2d\u4e00\u4e2a lambda removeSpacesCnt \u6355\u83b7\u4e00\u4e2a\u53d8\u91cf\uff0c\u8be5\u53d8\u91cf\u7528\u4e8e\u5b58\u50a8\u6709\u5173\u4ece\u8f93\u5165\u5b57\u7b26\u4e32\u4e2d\u5220\u9664\u7684\u7a7a\u683c\u7684\u4fe1\u606f\u3002 10. \u603b\u7ed3 \u5728\u672c\u7ae0\u4e2d\uff0c\u60a8\u5b66\u4e60\u4e86\u5982\u4f55\u521b\u5efa\u548c\u4f7f\u7528 Lambda \u8868\u8fbe\u5f0f\u3002\u6211\u63cf\u8ff0\u4e86 Lambda \u7684\u8bed\u6cd5\u3001\u6355\u83b7\u5b50\u53e5\u3001\u7c7b\u578b\uff0c\u5e76\u4e14\u6211\u4eec\u6db5\u76d6\u4e86\u8bb8\u591a\u793a\u4f8b\u548c\u7528\u4f8b\u3002 \u6211\u4eec\u751a\u81f3\u66f4\u8fdb\u4e00\u6b65\uff0c\u6211\u5411\u60a8\u5c55\u793a\u4e86\u4ece Lambda \u6d3e\u751f\u6216\u5c06\u5176\u5b58\u50a8\u5728\u5bb9\u5668\u4e2d\u7684\u6a21\u5f0f\u3002 \u4f46\u8fd9\u8fd8\u4e0d\u662f\u5168\u90e8\uff01 Lambda \u8868\u8fbe\u5f0f\u6210\u4e3a\u73b0\u4ee3 C++ \u7684\u91cd\u8981\u7ec4\u6210\u90e8\u5206\u3002 \u968f\u7740\u5e94\u7528\u573a\u666f\u8d8a\u6765\u8d8a\u591a\uff0c\u5f00\u53d1\u4eba\u5458\u4e5f\u770b\u5230\u4e86\u6539\u8fdb\u6b64\u529f\u80fd\u7684\u53ef\u80fd\u6027\u3002 \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u60a8\u73b0\u5728\u53ef\u4ee5\u8f6c\u5230\u4e0b\u4e00\u7ae0\u5e76\u67e5\u770b ISO \u59d4\u5458\u4f1a\u5728 C++14 \u4e2d\u6dfb\u52a0\u7684\u91cd\u8981\u66f4\u65b0\u7684\u539f\u56e0\u3002","title":"Lambda in C++11"},{"location":"Chapter2/#\u4e8clambda-in-c11","text":"\u8fd9\u771f\u662f\u6fc0\u52a8\u4eba\u5fc3\u7684\u65f6\u523b\u3002C++ \u59d4\u5458\u4f1a\u542c\u53d6\u4e86\u5f00\u53d1\u8005\u4eec\u7684\u58f0\u97f3\uff0c\u4ece C++11 \u5f00\u59cb\uff0c\u6211\u4eec\u7ec8\u4e8e\u62e5\u6709\u4e86 Lambda \u8868\u8fbe\u5f0f\u3002 Lambda \u5f88\u5feb\u5c31\u6210\u4e3a\u4e86\u73b0\u4ee3 C++ \u6700\u5e7f\u4e3a\u8ba4\u53ef\u548c\u4f7f\u7528\u7684\u7279\u6027\u3002 \u4f60\u53ef\u4ee5\u9605\u8bfb N3337 \u8349\u6848\u2014\u2014C++11 \u7684\u6700\u7ec8\u8349\u6848\u2014\u2014\u4e2d [expr.prim.lambda] \u7ae0\u8282\u4e2d\u7684 Lambda \u89c4\u8303\u3002 \u6211\u8ba4\u4e3a\u59d4\u5458\u4f1a\u628a Lambda \u52a0\u5165\u8fdb\u6765\u662f\u4e00\u4e2a\u660e\u667a\u7684\u505a\u6cd5\uff0c\u5bf9\u4e8e C++ \u8fd9\u4e2a\u8bed\u8a00\u672c\u8eab\u800c\u8a00\u3002 \u4ed6\u4eec\u5f15\u8fdb\u4e86\u4e00\u79cd\u65b0\u7684\u8bed\u6cd5\uff0c\u800c\u7f16\u8bd1\u5668\u4f1a\u53bb\u5c06\u5176\u5c55\u5f00\u4e3a\u4e00\u4e2a\u672a\u547d\u540d\u7684\u201c\u9690\u85cf\u201d\u65b9\u51fd\u6570\u5bf9\u8c61\u3002\u5f15\u5165 Lambda\uff0c\u5bf9\u4e8e\u4e00\u79cd\u771f\u6b63\u7684\u5f3a\u7c7b\u578b\u8bed\u8a00\uff0c\u6709\u5f88\u591a\u4f18\u70b9\uff08\u5f53\u7136\u4e5f\u6709\u7f3a\u70b9\uff09\uff0c\u540c\u65f6\u8fd9\u79cd\u7279\u6027\u4e5f\u66f4\u5bb9\u6613\u53bb\u63a8\u65ad\u4ee3\u7801\u7684\u610f\u56fe\u3002 \u5728\u672c\u7ae0\u8282\uff0c\u4f60\u53ef\u4ee5\u5b66\u4e60\u5230\uff1a Lambda \u7684\u57fa\u7840\u8bed\u6cd5 \u5982\u4f55\u6355\u83b7\u53d8\u91cf \u5982\u4f55\u6355\u83b7\u6210\u5458\u53d8\u91cf Lambda \u7684\u8fd4\u56de\u7c7b\u578b \u4ec0\u4e48\u662f\u95ed\u5305\u5bf9\u8c61 Lambda \u5982\u4f55\u8f6c\u6362\u4e3a\u4e00\u4e2a\u51fd\u6570\u6307\u9488\u4ee5\u53ca\u7528 C \u98ce\u683c\u7684 API \u6765\u8c03\u7528 IIFE \u662f\u4ec0\u4e48 \u5982\u4f55\u4ece Lambda \u8868\u8fbe\u5f0f\u7ee7\u627f\u4ee5\u53ca\u5b83\u4e3a\u4ec0\u4e48\u6709\u7528","title":"\u4e8c\u3001Lambda in C++11"},{"location":"Chapter2/#1-lambda-\u8868\u8fbe\u5f0f\u7684\u8bed\u6cd5","text":"\u4e0b\u9762\u5c31\u662f Lambda \u8bed\u6cd5\u7684\u300c\u516c\u5f0f\u300d\u548c\u8bf4\u660e\uff1a [] () specifiers exception attr -> ret { /*code; */ } ^ ^ ^ ^ | | | | | | | \u53ef\u9009: \u5c3e\u90e8\u8fd4\u56de\u7c7b\u578b | | | | | \u53ef\u9009: \u53ef\u53d8\u3001\u5f02\u5e38\u8bf4\u660e\u6216\u8005 noexcept \u3001\u5c5e\u6027 | | | \u53c2\u6570\u5217\u8868 (\u5f53\u4e0d\u6dfb\u52a0\u8bf4\u660e\u7b26\u65f6\u53ef\u9009) | Lambda \u5f15\u5165\u5668\u4ee5\u53ca\u6355\u83b7\u5217\u8868(\u53ef\u9009) \u5728\u6211\u4eec\u5f00\u59cb\u5b66\u4e60 Lambda \u4e4b\u524d\uff0c\u9700\u8981\u4ece C++ \u6807\u51c6\u4e2d\u5f15\u5165\u4e00\u4e9b\u6838\u5fc3\u5b9a\u4e49\uff1a \u95ed\u5305\u5bf9\u8c61\u5728 [expr.prim.lambda#2] \u4e2d\uff0c\u6709\u5982\u4e0b\u5b9a\u4e49\uff1a \u5bf9 lambda \u8868\u8fbe\u5f0f\u8fdb\u884c\u6c42\u503c\u4f1a\u4ea7\u751f\u4e00\u4e2a prvalue \u7c7b\u578b\u7684\u4e34\u65f6\u503c\u3002\u8fd9\u4e2a\u4e34\u65f6\u5bf9\u8c61\u53eb\u505a \u95ed\u5305\u5bf9\u8c61 \u3002 \u95ed\u5305\u7c7b\u578b\u5728 [expr.prim.lambda#3] \u4e2d\uff0c\u6709\u5982\u4e0b\u5b9a\u4e49\uff1a lambda \u8868\u8fbe\u5f0f\u7684\u7c7b\u578b\uff08\u4e5f\u662f\u95ed\u5305\u5bf9\u8c61\u7684\u7c7b\u578b\uff09\u662f\u552f\u4e00\u672a\u547d\u540d\u7684\u201c\u975e\u8054\u5408\u201d\u7c7b\u578b\u2014\u2014\u79f0\u4e3a \u95ed\u5305\u7c7b\u578b","title":"1. Lambda \u8868\u8fbe\u5f0f\u7684\u8bed\u6cd5"},{"location":"Chapter2/#lambda-\u8868\u8fbe\u5f0f\u7684\u4e00\u4e9b\u4f8b\u5b50","text":"// 1. \u4e00\u4e2a\u6700\u7b80\u5355\u7684lambda []{}; \u5728\u7b2c\u4e00\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u4f60\u53ef\u4ee5\u770b\u89c1\u4e00\u4e2a\u201c\u6700\u5c0f\u5de7\u201d\u7684 Lambda \u8868\u8fbe\u5f0f\u3002 \u5b83\u4ec5\u9700\u8981 [] \u548c\u4e00\u4e2a\u7a7a\u7684\u51fd\u6570\u4f53 {} \u3002\u53c2\u6570\u5217\u8868 () \u662f\u53ef\u9009\u7684\uff0c\u6240\u4ee5\u5728\u672c\u4f8b\u4e2d\u4e0d\u9700\u8981\u3002 // 2. \u5e26\u6709\u4e24\u4e2a\u53c2\u6570\u7684lambda []( float f , int a ){ return a * f ;}; []( int a , int b ){ return a < b }; \u5728\u7b2c\u4e8c\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u4f60\u53ef\u4ee5\u770b\u5230\u53c2\u6570\u5728 () \u90e8\u5206\u88ab\u4f20\u5165\u8fdb\u53bb\uff0c\u5c31\u548c\u5e38\u89c4\u51fd\u6570\u4e00\u6837\u3002\u8fd4\u56de\u7c7b\u578b\u662f\u4e0d\u9700\u8981\u7684\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u63a8\u65ad\u5b83\u3002 // 3. \u5e26\u6709\u5c3e\u8fd4\u56de\u7c7b\u578b\u7684lambda []( MyClass t ) -> int { auto a = t . compute (); print ( a ); return a ; }; \u5728\u7b2c\u4e09\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u663e\u793a\u5730\u5b9a\u4e49\u4e86\u8fd4\u56de\u7c7b\u578b\u3002 \u4ece C++11 \u5f00\u59cb\uff0c\u8fd9\u4e2a\u5c3e\u90e8\u8fd4\u56de\u7c7b\u578b\u5176\u5b9e\u548c\u5e38\u89c4\u51fd\u6570\u7684\u58f0\u660e\u65b9\u5f0f\u662f\u4e00\u6837\u7684\u3002 // 4. \u5e26\u6709\u989d\u5916\u63cf\u8ff0\u7b26\u7684lambda [ x ]( int a , int b ) mutable { ++ x ; return a < b ; }; []( float param ) noexcept { return param * param ; }; [ x ]( int a , int b ) mutable noexcept { ++ x ; return a < b ; }; \u7b2c\u56db\u4e2a\u4f8b\u5b50\u5c55\u793a\u4e86\u5728 lambda \u8868\u8fbe\u5f0f\u7684\u51fd\u6570\u4f53\u524d\uff0c\u4f60\u53ef\u4ee5\u6dfb\u52a0\u989d\u5916\u7684\u63cf\u8ff0\u7b26\u3002 \u5982\u4e0a\u4ee3\u7801\uff0c\u6211\u4eec\u4f7f\u7528 mutable \uff08\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u6539\u53d8\u6355\u83b7\u7684\u53d8\u91cf\uff09\u4e5f\u53ef\u4ee5\u662f noexcept \u3002 \u7b2c\u4e09\u4e2a lambda \u8868\u8fbe\u5f0f\u540c\u65f6\u4f7f\u7528\u4e86 mutable \u548c noexcept \uff0c\u8bf7\u6ce8\u610f\u987a\u5e8f\uff08\u5f53\u4e66\u5199\u4e3a noexcept mutable \u65f6\uff0c\u65e0\u6cd5\u7f16\u8bd1\u901a\u8fc7\uff09\u3002 \u867d\u7136\uff08\uff09\u90e8\u5206\u662f\u53ef\u9009\u7684\uff0c\u4f46\u662f\u5982\u679c\u4f60\u60f3\u8981\u5e94\u7528 mutable \u6216\u8005 noexcept \uff0c\u90a3\u4e48 () \u5219\u5fc5\u987b\u5728\u8868\u8fbe\u5f0f\u4e66\u5199\u3002 // 5. \u53ef\u9009()\u7684lambda [ x ] { std :: cout << x ; }; // \u6b63\u786e\uff0c\u65e0\u9700() [ x ] mutable { ++ x ; }; // \u7f16\u8bd1\u5931\u8d25 [ x ]() mutable { ++ x ; }; // \u6b63\u786e\uff0cmutable\u524d\u9700\u8981() [] noexcept {}; // \u7f16\u8bd1\u5931\u8d25 []() noexcept {}; // \u6b63\u786e \u540c\u6837\u7684\u6a21\u5f0f\u4e5f\u53ef\u4ee5\u5728\u5176\u4ed6\u63cf\u8ff0\u7b26\u4e2d\u88ab\u5e94\u7528\u5728 lambda \u4e2d\uff0c\u50cf C++17 \u7684 constexpr \u548c C++20 \u4e2d\u7684 consteval \u3002","title":"Lambda \u8868\u8fbe\u5f0f\u7684\u4e00\u4e9b\u4f8b\u5b50"},{"location":"Chapter2/#lambda-\u5728\u7f16\u8bd1\u5668\u7684\u5c55\u5f00","text":"\u603b\u7ed3\u4e00\u4e0b\uff0c\u8fd9\u513f\u6709\u4e00\u4e2a\u57fa\u7840\u7684\u4ee3\u7801\u7528\u4f8b\u6765\u5c55\u793a\u4e0b\u7f16\u5199 Lambda \u8868\u8fbe\u5f0f\u5e76\u5e94\u7528\u5728 std::for_each \u4e2d\u53bb\u3002 \u4f5c\u4e3a\u5bf9\u6bd4\uff0c\u6211\u4eec\u4e5f\u7f16\u5199\u4e86\u4e00\u4e2a\u76f8\u5e94\u529f\u80fd\u7684\u4eff\u51fd\u6570\u7c7b\u578b\uff1a \u4ee3\u7801 2-1 Lambda \u8868\u8fbe\u5f0f\u548c\u5bf9\u5e94\u7684\u4eff\u51fd\u6570 #include <algorithm> #include <iostream> #include <vector> int main () { struct { void operator ()( int x ) const { std :: cout << x << '\\n' ; } } someInstance ; const std :: vector < int > v { 1 , 2 , 3 }; std :: for_each ( v . cbegin (), v . cend (), someInstance ); std :: for_each ( v . cbegin (), v . cend (), []( int x ) { std :: cout << x << '\\n' ; }); } \u5bf9\u4e8e\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u7f16\u8bd1\u5668\u4f1a\u5c06 Lambda \u8868\u8fbe\u5f0f []( int x ) { std :: cout << x << 'n' ; }; \u8f6c\u5316\u4e3a\u4e00\u4e2a\u7b80\u5316\u683c\u5f0f\u7684\u533f\u540d\u4eff\u51fd\u6570\uff1a struct { void operator ()( int x ) const { std :: cout << x << '\\n' ; } } someInstance ; \u8fd9\u79cd\u8f6c\u6362\u6216\u8005\u201c\u5c55\u5f00\u201d\u7684\u8fc7\u7a0b\uff0c\u53ef\u4ee5\u5728 C++ Insights \u4e0a\u67e5\u770b\uff0c\u8fd9\u662f\u4e00\u4e2a\u53ef\u4ee5\u67e5\u770b\u5408\u6cd5 C++ \u4ee3\u7801\u8f6c\u5316\u4e3a\u7f16\u8bd1\u5668\u6e90\u7801\u89c6\u56fe\u7684\u5728\u7ebf\u5de5\u5177\uff0c\u5305\u62ec Lambda \u8fbe\u5f0f\u7684\u5c55\u5f00\u4ee5\u53ca\u6a21\u677f\u521d\u59cb\u5316\u7684\u8fc7\u7a0b\u3002 \u4e0b\u4e00\u8282\u4e2d\uff0c\u6211\u4eec\u4f1a\u6df1\u5165\u7814\u7a76\u4e0b Lambda \u8868\u8fbe\u5f0f\u7684\u5404\u4e2a\u90e8\u5206\u3002","title":"Lambda \u5728\u7f16\u8bd1\u5668\u7684\u5c55\u5f00"},{"location":"Chapter2/#2-lambda-\u8868\u8fbe\u5f0f\u7684\u7c7b\u578b","text":"\u7531\u4e8e\u7f16\u8bd1\u5668\u4f1a\u751f\u6210\u7ed9\u6bcf\u4e2a Lambda\uff08\u95ed\u5305\u7c7b\u578b\uff09\u751f\u6210\u4e00\u4e2a\u552f\u4e00\u540d\u79f0\uff0c\u6240\u4ee5\u6ca1\u6709\u529e\u6cd5\u9884\u5148\u201c\u62fc\u5199\u201d\u51fa\u5b83\u7684\u7c7b\u578b\u3002 \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u4f60\u9700\u8981\u4f7f\u7528 auto \u6216\u8005 decltype \u5173\u952e\u5b57\u6765\u63a8\u65ad\u7c7b\u578b\u4e86\u3002 auto myLambda = []( int a ) -> double { return 2.0 * a ; }; \u5f53\u7136\uff0c\u4e0b\u9762\u8fd9\u4e24 lambda \u4e5f\u662f\u4e00\u6837\u7684\u3002 auto firstLam = []( int x ) { return x * 2 ; }; auto secondLam = []( int x ) { return x * 2 ; }; \u8fd9\u4fe9 Lambda \u62e5\u6709\u5b8c\u5168\u4e00\u6837\u7684\u4ee3\u7801\uff0c\u4f46\u662f\u4ed6\u4eec\u7684\u7c7b\u578b\u662f\u4e0d\u540c\u7684\u3002 \u7f16\u8bd1\u5668\u4f1a\u63a8\u65ad\u4e3a\u4e24\u4e2a Lambda \u8868\u8fbe\u5f0f\u63a8\u65ad\u51fa\u5404\u81ea\u72ec\u7acb\u7684\u672a\u547d\u540d\u7c7b\u578b\u3002 \u6211\u4eec\u53ef\u4ee5\u7528\u4e0b\u9762\u7684\u4ee3\u7801\u6765\u8bc1\u660e\u8fd9\u4e2a\u6027\u8d28\uff1a \u4ee3\u7801 2-2 \u540c\u6837\u7684\u4ee3\u7801\uff0c\u4e0d\u540c\u7684\u7c7b\u578b #include <type_traits> int main () { const auto oneLam = []( int x ) noexcept { return x * 2 ; }; const auto twoLam = []( int x ) noexcept { return x * 2 ; }; static_assert ( ! std :: is_same < decltype ( oneLam ), decltype ( twoLam ) >:: value , \"must be different!\" ); } \u8fd9\u4e2a\u4f8b\u5b50\u53ef\u4ee5\u7528\u6765\u9a8c\u8bc1\u4e24\u4e2a Lambda\uff08 oneLam \u548c twoLam \uff09\u7684\u95ed\u5305\u7c7b\u578b\u662f\u5426\u4e00\u81f4\u3002 \u5728 C++17\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e0d\u5e26\u6d88\u606f\u7684 static_assert \u548c\u63a8\u65ad\u7c7b\u578b\u7279\u5f81\u7684\u53d8\u91cf\u6a21\u677f\u8f85\u52a9\u51fd\u6570 is_same_v \uff1a static_assert ( std :: is_same_v < double , decltype ( baz ( 10 )) > ); \u4f46\u662f\uff0c\u5c3d\u7ba1\u4f60\u4e0d\u77e5\u9053\u786e\u5207\u7684\u7c7b\u578b\u540d\uff0c\u4f60\u53ef\u4ee5\u5c06 Lambda \u7684\u7b7e\u540d\u5b58\u50a8\u5728 std::function \u4e2d\u4f7f\u7528\u3002 \u901a\u5e38\u6765\u8bf4\uff0c\u5982\u679c\u5b9a\u4e49\u4e3a auto \u7684 Lambda \u65e0\u6cd5\u89e3\u51b3\u7684\uff0c\u53ef\u4ee5\u901a\u8fc7\u5b9a\u4e49\u4e3a std::function \u7c7b\u578b\u6765\u89e3\u51b3\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u4e4b\u524d\u7684 Lambda \u6709\u4e00\u4e2a double(int) \u7684\u7b7e\u540d\uff08\u53c2\u6570\u4e3a int \u8fd4\u56de double \uff09\u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u521b\u5efa\u4e00\u4e2a std::function \u5bf9\u8c61\uff1a std :: function < double ( int ) > myFunc = []( int a ) -> double { return 2.0 * a ; }; std::function \u662f\u4e00\u4e2a\u201c\u7b28\u91cd\u201d\u7684\u5bf9\u8c61\uff0c\u56e0\u4e3a\u4ed6\u9700\u8981\u64cd\u63a7\u5168\u90e8\u7684\u53ef\u8c03\u7528\u5bf9\u8c61\u3002 \u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u4ed6\u9700\u8981\u4e00\u5957\u5148\u8fdb\u7684\u5185\u6838\u673a\u5236\uff0c\u6bd4\u5982 \u7c7b\u578b\u53cc\u5173\uff08Type punning\uff09 \u6216\u8005\u751a\u81f3\u52a8\u6001\u5185\u5b58\u5206\u914d\u3002 \u6765\u8bd5\u8bd5\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\uff1a \u4ee3\u7801 2-3 std::function \u548c auto \u7c7b\u578b\u63a8\u65ad #include <functional> #include <iostream> int main () { const auto myLambda = []( int a ) noexcept -> double { return 2.0 * a ; }; const std :: function < double ( int ) > myFunc = []( int a ) noexcept -> double { return 2 .0 * a ; }; std :: cout << \"sizeof(myLambda) is \" << sizeof ( myLambda ) << '\\n' ; std :: cout << \"sizeof(myFunc) is \" << sizeof ( myFunc ) << '\\n' ; return myLambda ( 10 ) == myFunc ( 10 ); } \u7528 GCC \u7f16\u8bd1\u5e76\u8fd0\u884c\uff0c\u5c06\u4f1a\u8f93\u51fa\uff1a sizeof(myLambda) is 1 sizeof(myFunc) is 32 \u56e0\u4e3a myLambda \u4ec5\u4ec5\u662f\u4e00\u4e2a\u65e0\u72b6\u6001 Lambda\uff0c\u6240\u4ee5\u5b83\u4e5f\u662f\u4e00\u4e2a\u6ca1\u6709\u4efb\u4f55\u6570\u636e\u6210\u5458\u5b57\u6bb5\u7684\u7a7a\u7c7b\uff0c\u8fd9\u4e5f\u5c31\u662f\u4e3a\u4ec0\u4e48\u5b83\u7684\u5927\u5c0f\u53ea\u6709 1 \u5b57\u8282\u7684\u539f\u56e0\u3002 \u800c std::function \u7248\u672c\u5219\u5360\u7528\u4e86 32 \u5b57\u8282\u3002 \u6240\u4ee5\uff0c\u4e00\u76ee\u4e86\u7136\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u4f60\u5e94\u8be5\u5c3d\u53ef\u80fd\u4f7f\u7528 auto \u7c7b\u578b\u63a8\u65ad\u6765\u83b7\u53d6\u5360\u7528\u5185\u5b58\u66f4\u5c11\u7684\u95ed\u5305\u5bf9\u8c61\u4e86\u3002 \u5f53\u7136\uff0c\u6211\u4eec\u4e5f\u4e0d\u5f97\u4e0d\u53bb\u6df1\u5165\u8ba8\u8bba std::function \u7684\u4f7f\u7528\uff0c\u56e0\u4e3a\u5b83\u4e0d\u652f\u6301\u53ea\u80fd\u79fb\u52a8\uff08moveable-only\uff09\u7684\u95ed\u5305\u5bf9\u8c61\u3002 \u6211\u4eec\u4f1a\u5728 C++14 \u7ae0\u53ef\u79fb\u52a8\u7c7b\u578b\u4e00\u8282 \u6765\u8be6\u7ec6\u4ecb\u7ecd\u8fd9\u90e8\u5206\u5185\u5bb9\u3002","title":"2. Lambda \u8868\u8fbe\u5f0f\u7684\u7c7b\u578b"},{"location":"Chapter2/#\u6784\u9020\u8fd8\u662f\u62f7\u8d1d","text":"\u5728 [expr.prim.lambda#19] \u4e2d\u6709\u4e00\u4e2a\u89c4\u5219\uff1a Lambda \u8868\u8fbe\u5f0f\u4ea7\u751f\u7684\u95ed\u5305\u5bf9\u8c61\u662f \u5220\u9664 \u4e86 \u9ed8\u8ba4\u6784\u9020\u51fd\u6570 \u548c \u62f7\u8d1d\u8d4b\u503c\u8fd0\u7b97\u7b26 \u7684\u3002 \u4f46\u662f\u5b83\u5305\u542b\u9690\u5f0f\u58f0\u660e\u7684 \u62f7\u8d1d\u6784\u9020\u51fd\u6570 \u4ee5\u53ca \u79fb\u52a8\u6784\u9020\u51fd\u6570 \u3002 \u7531\u4e8e\u8fd9\u4e2a\u89c4\u5219\u7684\u5b58\u5728\uff0c\u6240\u4ee5\u4f60\u65e0\u6cd5\u8fd9\u6837\u7f16\u5199\u4ee3\u7801\uff1a auto foo = [ & x , & y ]() { ++ x ; ++ y ; }; decltype ( foo ) fooCopy GCC \u4f1a\u63d0\u793a\u5982\u4e0b\u9519\u8bef\uff1a error: use of deleted function'main()::<lambda()>::<lambda>()' decltype(foo) fooCopy; ^~~~~~~ note:a lambda closure type has a deleted default constructor \u4f46\u662f\uff0c\u4f60\u53ef\u4ee5\u62f7\u8d1d Lambda\uff1a \u4ee3\u7801 2-4 \u62f7\u8d1d Lambda #include <type_traits> int main () { const auto firstLam = []( int x ) noexcept { return x * 2 ; }; const auto secondLam = firstLam ; static_assert ( std :: is_same < decltype ( firstLam ), decltype ( secondLam ) >:: value , \"must be the same\" ); } \u5982\u679c\u62f7\u8d1d\u4e86\u4e00\u4e2a Lambda\uff08\u5b9e\u9645\u4e0a\u53d1\u751f\u7684\u662f\u62f7\u8d1d\u6784\u9020\uff09\uff0c\u5b83\u7684\u72b6\u6001\u4e5f\u4f1a\u88ab\u62f7\u8d1d\u8fc7\u6765\u3002 \u8fd9\u4e00\u70b9\u5bf9\u4e8e\u6355\u83b7\u5bf9\u8c61\u6765\u8bf4\u5f88\u91cd\u8981\u3002 \u56e0\u4e3a\uff0c\u4e00\u4e2a\u95ed\u5305\u7c7b\u578b\u4f1a\u5b58\u50a8\u6355\u83b7\u7684\u5bf9\u8c61\u4f5c\u4e3a\u5176\u6210\u5458\u5b57\u6bb5\u3002 \u6240\u4ee5\uff0c\u5f53\u8fdb\u884c Lambda \u62f7\u8d1d\u65f6\uff0c\u4f1a\u62f7\u8d1d\u90a3\u4e9b\u6570\u636e\u6210\u5458\u5b57\u6bb5\u3002 \u5728 C++20 \u4e2d\uff0c\u65e0\u72b6\u6001 Lambda \u4f1a\u62e5\u6709\u9ed8\u8ba4\u7684\u6784\u9020\u5668\u548c\u62f7\u8d1d\u8d4b\u503c\u3002","title":"\u6784\u9020\uff0c\u8fd8\u662f\u62f7\u8d1d\uff1f"},{"location":"Chapter2/#3-\u8c03\u7528\u64cd\u4f5c\u7b26","text":"\u6211\u4eec\u4f20\u5165 Lambda \u4e2d\u7684\u53c2\u6570\u90e8\u5206\uff0c\u4f1a\u88ab\u201c\u8f6c\u8bd1\u201d\u4e3a\u76f8\u5e94\u95ed\u5305\u7c7b\u578b\u7684\u8c03\u7528\u64cd\u4f5c\u7b26\u7684\u53c2\u6570\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5728 C++11 \u4e2d\uff0c\u4ed6\u4f1a\u88ab\u201c\u8f6c\u8bd1\u201d\u4e3a\u4e00\u4e2a\u5e38\u91cf\u5185\u8054\u6210\u5458\u51fd\u6570\u3002 \u4f8b\u5982 auto lam = []( double param ) { /*do something*/ }; \u5c06\u88ab\u7f16\u8bd1\u5668\u5c55\u5f00\u4e3a\uff1a struct __anonymousLambda { inline void operator ()( double param ) const { /*do something*/ } };","title":"3. \u8c03\u7528\u64cd\u4f5c\u7b26"},{"location":"Chapter2/#\u91cd\u8f7d","text":"\u6709\u4e00\u4ef6\u4e8b\u60c5\u503c\u5f97\u63d0\u4e00\u4e0b\uff0c\u90a3\u5c31\u662f\u5f53\u4f60\u5b9a\u4e49\u4e86\u4e00\u4e2a lambda \u65f6\uff0c\u4f60\u4e0d\u80fd\u521b\u5efa\u5b83\u7684\u4efb\u4f55\u91cd\u8f7d\u5f62\u5f0f\u6765\u4f20\u5165\u4e0d\u540c\u7684\u53c2\u6570\u3002 // \u65e0\u6cd5\u7f16\u8bd1 auto lam = []( double param ) { /* do something */ }; auto lam = []( int param ) { /* do something */ }; \u4e0a\u9762\u7684\u4ee3\u7801\u5c06\u65e0\u6cd5\u901a\u8fc7\u7f16\u8bd1\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u4f1a\u5c06\u4ed6\u4eec\u201c\u8f6c\u8bd1\u201d\u4e3a\u4e00\u4e2a\u4eff\u51fd\u6570\uff0c\u5f53\u7136\u8fd9\u5c31\u610f\u5473\u7740\u65e0\u6cd5\u91cd\u65b0\u5b9a\u4e49\u4e00\u4e2a\u76f8\u540c\u7684\u53d8\u91cf\u3002 \u4f46\u662f\uff0c\u4f60\u53ef\u4ee5\u5728\u4e00\u4e2a\u4eff\u51fd\u6570\u4e2d\u5b9a\u4e49\u4e24\u4e2a\u8c03\u7528\u64cd\u4f5c\u7b26\u7684\u91cd\u8f7d\u5f62\u5f0f\uff0c\u8fd9\u662f\u5141\u8bb8\u7684\uff1a struct MyFunctor { inline void operator ()( double param ) { /* do something */ }; inline void operator ()( int param ) { /* do something */ }; }; MyFunctor \u73b0\u5728\u5c31\u53ef\u4ee5\u540c\u65f6\u63a5\u53d7 double \u548c int \u53c2\u6570\u4e86\u3002 \u5982\u679c\u4f60\u60f3\u5728 Lambda \u4e2d\u5b9e\u73b0\u76f8\u4f3c\u7684\u6548\u679c\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u770b\u770b\u8fd9\u90e8\u5206\u5185\u5bb9 Lambda \u7ee7\u627f","title":"\u91cd\u8f7d"},{"location":"Chapter2/#\u5176\u4ed6\u4fee\u9970\u7b26","text":"\u6211\u4eec\u5728 Lambda \u8bed\u6cd5 \u4e00\u8282\u4e2d\u7b80\u7565\u4ecb\u7ecd\u8fc7\u8fd9\u90e8\u5206\u4e3b\u9898\uff0c\u4f46\u662f\u4f60\u5e76\u4e0d\u4f1a\u88ab\u95ed\u5305\u7c7b\u578b\u8c03\u7528\u64cd\u4f5c\u7b26\u7684\u9ed8\u8ba4\u58f0\u660e\u6240\u9650\u5236\u5230\u3002 \u5728 C++11 \u4e2d\uff0c\u4f60\u53ef\u4ee5\u6dfb\u52a0 mutalbe \u6216\u8005\u5f02\u5e38\u63cf\u8ff0\u7b26\u3002 \u5982\u679c\u53ef\u80fd\u7684\u8bdd\uff0c\u672c\u4e66\u4f1a\u4f7f\u7528\u957f\u4f8b\u5b50\u6765\u7528 const \u6807\u8bb0\u95ed\u5305\u5bf9\u8c61\u5e76\u4e14\u4f7f Lambda \u4e3a noexcept \u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u5728\u53c2\u6570\u58f0\u660e\u540e\u9762\u90a3\u90e8\u5206\u6307\u5b9a mutable \u6216\u8005 noexcept \u6765\u4f7f\u7528\u8fd9\u4e9b\u5173\u952e\u5b57\u3002 auto myLambda = []( int a ) mutable noexcept { /* do something */ }; \u7f16\u8bd1\u5668\u4f1a\u5c55\u5f00\u4e3a\uff1a struct __anonymousLambda { inline void operator ()( int a ) noexcept { /* do something */ } }; \u8bf7\u6ce8\u610f\uff0c const \u5173\u952e\u5b57\u6b64\u65f6\u4f1a\u6d88\u5931\uff0c\u5e76\u4e14\u8c03\u7528\u64cd\u4f5c\u7b26\u53ef\u4ee5\u4fee\u6539 Lambda \u7684\u6210\u5458\u53d8\u91cf\u4e86\u3002 \u4f46\u662f\uff0c\u6210\u5458\u53d8\u91cf\u5462\uff1f\u6211\u4eec\u8981\u5982\u4f55\u5728 Lambda \u4e2d\u58f0\u660e\u6210\u5458\u53d8\u91cf\uff1f \u8bf7\u770b\u4e0b\u4e00\u4e2a\u7ae0\u8282\u2014\u2014\u5173\u4e8e\u300c\u6355\u83b7\u300d\u53d8\u91cf\u3002","title":"\u5176\u4ed6\u4fee\u9970\u7b26"},{"location":"Chapter2/#4-\u6355\u83b7","text":"\u6355\u83b7\u5b50\u53e5 - [] \u64cd\u4f5c\u7b26\u7edd\u4e0d\u4ec5\u4ec5\u53ea\u662f Lambda \u7684\u5f15\u5165\u7b26\u53f7\uff0c\u540c\u65f6\u5b83\u8fd8\u517c\u987e\u6355\u83b7\u53d8\u91cf\u7684\u5217\u8868\u7684\u804c\u80fd\u3002 \u901a\u8fc7\u4ece Lambda \u8868\u8fbe\u5f0f\u5916\u90e8\u6355\u83b7\u53d8\u91cf\uff0c\u4f60\u53ef\u4ee5\u5728\u95ed\u5305\u7c7b\u578b\u4e2d\u521b\u5efa\u6210\u5458\u53d8\u91cf\uff08\u975e\u9759\u6001\u6210\u5458\uff09\uff0c\u7136\u540e\uff0c\u5728 Lambda \u51fd\u6570\u4f53\u4e2d\uff0c\u4f60\u5c31\u53ef\u4ee5\u4f7f\u7528\u5b83\u4e86\u3002 \u6211\u4eec\u53ef\u4ee5\u5f04\u4e00\u4e2a\u7c7b\u4f3c\u4e8e C++98/03 \u7ae0\u8282\u4e2d PrintFunctor \u7684\u5185\u5bb9\uff0c\u5728\u8fd9\u4e2a\u7c7b\u4e2d\uff0c\u6211\u4eec\u6dfb\u52a0\u6210\u5458\u53d8\u91cf std::string strText \u5e76\u8ba9\u4ed6\u5728\u6784\u9020\u51fd\u6570\u4e2d\u88ab\u521d\u59cb\u5316\u3002 \u62e5\u6709\u4e00\u4e2a\u6210\u5458\u53d8\u91cf\u53ef\u4ee5\u8ba9\u6211\u4eec\u5b58\u50a8\u53ef\u8c03\u7528\u5bf9\u8c61\u7684\u4e00\u4e9b\u72b6\u6001\u4e86\u3002 \u4e00\u4e9b\u6709\u5173\u6355\u83b7\u5668\u7684\u8bed\u6cd5\uff1a [&] - \u5f15\u7528\u6355\u83b7\uff0c\u81ea\u52a8\u6355\u83b7\u58f0\u660e\u5728\u6355\u83b7\u8303\u56f4\u5185\u7684\u751f\u547d\u5468\u671f\u5c1a\u672a\u7ed3\u675f\u7684\u53d8\u91cf\u3002 [=] - \u503c\u6355\u83b7\uff08\u521b\u5efa\u62f7\u8d1d\uff09\uff0c\u81ea\u52a8\u6355\u83b7\u58f0\u660e\u5728\u6355\u83b7\u8303\u56f4\u5185\u7684\u751f\u547d\u5468\u671f\u5c1a\u672a\u7ed3\u675f\u7684\u53d8\u91cf\u3002 [x, &y] - x \u4e3a\u503c\u6355\u83b7\uff0c y \u4e3a\u663e\u5f0f\u5f15\u7528\u6355\u83b7\u3002 [args...] - \u6355\u83b7\u4e00\u4e2a\u6a21\u677f\u53c2\u6570\u5305\uff0c\u5168\u90e8\u90fd\u662f\u503c\u6355\u83b7 [&args...] - \u6355\u83b7\u4e00\u4e2a\u6a21\u677f\u53c2\u6570\u5305\uff0c\u5168\u90e8\u90fd\u662f\u5f15\u7528\u6355\u83b7 \u4e00\u4e9b\u4f8b\u5b50\uff1a int x = 2 , y = 3 ; const auto l1 = []() { return l1 ; }; // \u6ca1\u6709\u6355\u83b7 const auto l2 = [ = ]() { return x ; }; // \u503c\u6355\u83b7\uff08\u62f7\u8d1d\uff09 const auto l3 = [ & ]() { return y ; }; // \u5f15\u7528\u6355\u83b7 const auto l4 = [ x ]() { return x ; }; // \u4ec5\u503c\u6355\u83b7x const auto lx = [ = x ]() { return x ; }; // \u9519\u8bef\u7684\u8bed\u6cd5\uff0c\u4e0d\u9700\u8981=\u6765\u5bf9x\u663e\u5f0f\u8fdb\u884c\u62f7\u8d1d\uff08\u503c\u6355\u83b7\uff09 const auto l5 = [ & y ]() { return y ; }; // \u4ec5\u5f15\u7528\u6355\u83b7y const auto l6 = [ x , & y ]() { return x * y ; }; // \u503c\u6355\u83b7x\uff0c\u5f15\u7528\u6355\u83b7y const auto l7 = [ = , & x ]() { return x + y ; }; // \u5168\u90e8\u90fd\u662f\u503c\u6355\u83b7\uff0c\u9664\u4e86x\u662f\u5f15\u7528\u6355\u83b7 const auto l8 = [ & , y ]() { return x - y ; }; // \u5168\u90fd\u662f\u5f15\u7528\u6355\u83b7\uff0c\u9664\u4e86y\u662f\u503c\u6355\u83b7 \u4e3a\u4e86\u7406\u89e3\u5728\u6355\u83b7\u53d8\u91cf\u7684\u8fc7\u7a0b\u4e2d\u53d1\u751f\u4e86\u4ec0\u4e48\uff0c\u8ba9\u6211\u4eec\u4e00\u8d77\u6765\u601d\u8003\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\uff1a \u4ee3\u7801 2-5 \u6355\u83b7\u4e00\u4e2a\u53d8\u91cf std :: string str { \"Hello World\" }; auto foo = [ str ]() { std :: cout << str << '\\n' ; }; foo (); \u4e0a\u9762\u8fd9\u4e2a Lambda\uff0c str \u88ab\u503c\u6355\u83b7\uff08\u6784\u9020\u4e86\u4e00\u4e2a\u62f7\u8d1d\uff09\u3002 \u7f16\u8bd1\u5668\u5c06\u81ea\u52a8\u751f\u6210\u8fd9\u6837\u7684\u4eff\u51fd\u6570\uff1a \u4ee3\u7801 2-6 \u7f16\u8bd1\u5668\u53ef\u80fd\u751f\u6210\u7684\u4eff\u51fd\u6570\uff0c\u5355\u53d8\u91cf class __unnamedLambda { public : inline /*constexpr */ void operator ()() const { std :: operator << ( std :: operator << ( std :: cout , str ), '\\n' ); } private : std :: string str ; public : __unnamedLambda ( std :: string _str ) : str { _str } {} }; \u5982\u4e0a\u8ff0\u7684\u5c55\u5f00\u4ee3\u7801\uff0c\u4e00\u4e2a\u53d8\u91cf\u88ab\u4f20\u8fdb\u6784\u9020\u51fd\u6570\u4e2d\uff0c\u5728 Lambda \u58f0\u660e\u4e2d\u88ab\u79f0\u4e3a\u201c\u5c31\u5730\u201d\u3002 \u66f4\u51c6\u786e\u7684\u5b9a\u4e49\u5728 [expr.prim.lambda#21] \uff1a\u5f53\u89e3\u6790 Lambda \u8868\u8fbe\u5f0f\u65f6\uff0c\u901a\u8fc7\u503c\u6355\u83b7\u7684\u5b9e\u4f53\u5c06\u76f4\u63a5\u521d\u59cb\u5316\u5728\u6bcf\u4e2a\u5bf9\u5e94\u751f\u6210\u7684\u95ed\u5305\u5bf9\u8c61\u4e2d\u7684\u975e\u9759\u6001\u6210\u5458\u6570\u636e\u3002 \u5f53\u7136\u4e86\uff0c\u4e0a\u8ff0\u4ee3\u7801\u4e2d\u7684\u6784\u9020\u51fd\u6570\uff08 __unnamedLambda \uff09\u4ec5\u4ec5\u662f\u7528\u4f5c\u6f14\u793a\u548c\u89e3\u91ca\u7528\u9014\uff0c\u7f16\u8bd1\u5668\u771f\u6b63\u751f\u6210\u7684\u5185\u5bb9\u4f1a\u4e0e\u6b64\u6709\u6240\u5dee\u522b\uff0c\u5e76\u4e14\u4e0d\u4f1a\u66b4\u9732\u7ed9\u7528\u6237\u3002 \u4ee3\u7801 2-7 \u5f15\u7528\u6355\u83b7\u4e24\u4e2a\u53d8\u91cf int = 1 , y = 1 ; std :: cout << x << \" \" << y << std :: endl ; const auto foo = [ & x , & y ]() noexcept { ++ x ; ++ y ; }; foo (); std :: cout << x << \" \" << y << std :: endl ; \u4e0a\u8ff0\u4ee3\u7801\u5c55\u5f00\u540e\uff0c\u53ef\u80fd\u662f\uff1a \u4ee3\u7801 2-8 \u7f16\u8bd1\u5668\u53ef\u80fd\u751f\u6210\u7684\u4eff\u51fd\u6570\uff0c\u53cc\u53d8\u91cf\uff0c\u5f15\u7528 class __unnamedLambda { public : inline /* constexpr */ void operator ()() const noexcept { ++ x ; ++ y ; } private : int & x ; int & y ; public : __unnamedLambda ( int & _x , int & _y ) : x { _x }, y { _y } {} }; \u7531\u4e8e\u6211\u4eec\u662f\u901a\u8fc7\u5f15\u7528\u7684\u65b9\u5f0f\u6355\u83b7 x \u548c y \u7684\uff0c\u6240\u4ee5\u95ed\u5305\u7c7b\u578b\u4e2d\u7684\u6210\u5458\u53d8\u91cf\u4e5f\u662f\u5f15\u7528\u7c7b\u578b\u7684\u3002 \u8bf7\u6ce8\u610f\uff1a \u503c\u6355\u83b7\u53d8\u91cf\u7684\u503c\u662f\u5728 Lambda \u5b9a\u4e49 \u65f6\uff0c\u800c\u4e0d\u662f\u5728 \u4f7f\u7528 \u65f6\u3002 \u4f46\u662f\u5f15\u7528\u6355\u83b7\u53d8\u91cf\u7684\u5185\u5bb9\u662f\u5728 Lambda \u4f7f\u7528 \u65f6\uff0c\u800c\u4e0d\u662f \u5b9a\u4e49 \u65f6\u3002\u4e8c\u8005\u662f\u6709\u533a\u522b\u7684\u3002 \u867d\u7136\u6307\u5b9a [=] \u6216\u8005 [&] \u53ef\u80fd\u5f88\u65b9\u4fbf\uff0c\u56e0\u4e3a\u5b83\u4f1a\u81ea\u52a8\u6355\u83b7\u4ecd\u5728\u751f\u547d\u5468\u671f\u5185\u7684\u5168\u90e8\u53d8\u91cf\uff0c\u4f46\u662f\uff0c\u82e5\u80fd\u6307\u660e\u6355\u83b7\u7684\u53d8\u91cf\u662f\u54ea\u4e9b\uff0c\u5c06\u4f1a\u66f4\u52a0\u6e05\u6670\u660e\u786e\u3002 \u8fd9\u6837\u7f16\u8bd1\u5668\u624d\u80fd\u8b66\u544a\u51fa\u54ea\u4e9b\u975e\u9884\u671f\u7684\u5f71\u54cd\uff08\u53c2\u89c1 \u5168\u5c40\u53d8\u91cf \u548c \u9759\u6001\u53d8\u91cf\uff09\u3002 \u5f53\u7136\uff0c\u5982\u679c\u4f60\u60f3\u8981\u4e86\u89e3\u66f4\u591a\u66f4\u8be6\u7ec6\u7684\u5185\u5bb9\uff0c\u53ef\u4ee5\u7ffb\u9605 Scott Meyers \u6240\u8457\u7684\u300aEffective Modern C++\u300b\u7b2c 31 \u9879\u2014\u2014\u201c\u907f\u514d\u9ed8\u8ba4\u6355\u83b7\u6a21\u5f0f\u201d\u7684\u5185\u5bb9\u3002 \u8bf7\u6ce8\u610f\uff1a C++ \u95ed\u5305\u4e0d\u4f1a\u5ef6\u957f\u88ab\u6355\u83b7\u5f15\u7528\u5bf9\u8c61\u7684\u5269\u4f59\u751f\u547d\u5468\u671f\u3002\u8bf7\u52a1\u5fc5\u786e\u4fdd\u6355\u83b7\u5bf9\u8c61\u5728 Lambda \u8c03\u7528\u65f6\u4ecd\u7136\u201c\u5b58\u6d3b\u201d\u3002","title":"4. \u6355\u83b7"},{"location":"Chapter2/#mutable-\u5173\u952e\u5b57","text":"\u901a\u8fc7\u95ed\u5305\u7c7b\u578b\u9ed8\u8ba4\u8c03\u7528\u64cd\u4f5c\u7b26\u83b7\u53d6\u7684\uff0c\u90fd\u662f\u5e26\u6709 const \u5173\u952e\u5b57\u9650\u5b9a\u7684\uff0c\u4f60\u65e0\u6cd5\u5728 Lambda \u8868\u8fbe\u5f0f\u5185\u90e8\u5bf9\u4ed6\u4eec\u505a\u51fa\u4efb\u4f55\u4fee\u6539\u3002 \u5982\u679c\u4f60\u5e0c\u671b\u8fdb\u884c\u4fee\u6539\u7684\u64cd\u4f5c\uff0c\u90a3\u5c31\u9700\u8981\u5728\u53c2\u6570\u5217\u8868\u540e\u6dfb\u52a0 mutable \u5173\u952e\u5b57\u3002 \u5b83\u53ef\u4ee5\u6709\u6548\u7684\u53bb\u9664\u95ed\u5305\u7c7b\u578b\u8c03\u7528\u64cd\u4f5c\u7b26\u4e2d\u7684 const \u4fee\u9970\u7b26\u3002\u4e3e\u4e00\u4e2amutable \u7684\u7b80\u5355\u4f8b\u5b50\uff1a int x = 1 ; auto foo = [ x ]() mutable { ++ x ; }; \u5b83\u4f1a\u88ab\u5c55\u5f00\u4e3a\uff1a class __lambda_x1 { public : void operator ()() { ++ x ; } private : int x ; }; \u5982\u4f60\u6240\u89c1\uff0c\u73b0\u5728\u8c03\u7528\u64cd\u4f5c\u7b26\u5c31\u53ef\u4ee5\u4fee\u6539\u6355\u83b7\u7684\u6210\u5458\u53d8\u91cf\u4e86\u3002 \u4ee3\u7801 2-8 \u901a\u8fc7\u503c\u6355\u83b7\u4e24\u4e2a mutable \u53d8\u91cf #include <iostream> int main () { const auto print = []( const char * str , int x , int y ) { std :: cout << str << \": \" << x << \" \" << y << '\\n' ; }; int x = 1 , y = 1 ; print ( \"in main()\" , x , y ); auto foo = [ x , y , & print ]() mutable { ++ x ; ++ y ; print ( \"in foo()\" , x , y ); }; foo (); print ( \"in main()\" , x , y ); } \u8f93\u51fa\uff1a in main(): 1 1 in foo(): 2 2 in main(): 1 1 \u5728\u4e0a\u8ff0\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u4fee\u6539 x \u548c y \u7684\u503c\u3002 \u4f46\u662f\uff0c\u7531\u4e8e\u662f\u4ece\u5c01\u95ed\u533a\u57df\u4e2d\u83b7\u53d6\u7684\u62f7\u8d1d\u503c\uff0c\u6240\u4ee5\u5728\u8c03\u7528 foo \u4e4b\u540e\uff0c\u6211\u4eec\u65e0\u6cd5\u83b7\u53d6\u5230\u5728\u5c40\u90e8\u533a\u57df\u4fee\u6539\u7684\u65b0\u503c\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u5982\u679c\u4f7f\u7528\u5f15\u7528\u6355\u83b7\uff0c\u90a3\u4e48\u5c31\u4e0d\u9700\u8981\u4f7f\u7528 mutable \u4fee\u9970\u7b26\u6765\u4fee\u6539\u503c\u4e86\u3002 \u8fd9\u662f\u56e0\u4e3a\u6355\u83b7\u7684\u6210\u5458\u53d8\u91cf\u662f\u201c\u5f15\u7528\u201d\u8fc7\u6765\u7684\uff0c\u5e76\u4e14\u4e0d\u80fd\u548c\u5185\u90e8\u7684 const \u6210\u5458\u51fd\u6570\u6240\u7ed1\u5b9a\uff0c\u6240\u4ee5\u53ef\u4ee5\u5bf9\u5b83\u7684\u5185\u5bb9\u4f5c\u51fa\u4fee\u6539\u3002 \u4ee3\u7801 2-9 \u901a\u8fc7\u5f15\u7528\u6355\u83b7\u4e00\u4e2a\u53d8\u91cf int x = 1 ; std :: cout << x << '\\n' ; const auto foo = [ & x ]() noexcept { ++ x ; }; foo (); std :: cout << x << '\\n' ; \u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0cLambda \u5e76\u6ca1\u6709\u5e94\u7528 mutable \u4fee\u9970\u7b26\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u5f15\u7528\u7684\u503c\u3002 \u9700\u8981\u6ce8\u610f\u7684\u4e00\u70b9\uff1a\u5f53\u4f7f\u7528 mutable \u4fee\u9970\u7b26\u540e\uff0c\u5c31\u65e0\u6cd5\u4f7f\u7528 const \u4fee\u9970\u7b26\u6765\u4fee\u9970\u95ed\u5305\u5bf9\u8c61\u4e86\uff0c\u56e0\u4e3a\u5b83\u4f1a\u963b\u6b62\u4f60\u8c03\u7528\u8fd9\u4e2a Lambda\u3002 int x = 10 ; const auto lam = [ x ]() mutable { ++ x ; } lam (); // \u65e0\u6cd5\u7f16\u8bd1 \u7531\u4e8e\u65e0\u6cd5\u5728 const \u5bf9\u8c61\u4e2d\u8c03\u7528\u975e const \u6210\u5458\u51fd\u6570\uff0c\u6700\u540e\u4e00\u884c\u5c06\u63d0\u793a\u7f16\u8bd1\u5931\u8d25\u3002","title":"mutable \u5173\u952e\u5b57"},{"location":"Chapter2/#\u8c03\u7528\u8ba1\u6570\u5668---\u6355\u83b7\u53d8\u91cf\u7684\u4e00\u4e2a\u4f8b\u5b50","text":"\u5728\u6211\u4eec\u6df1\u5165\u63a2\u7a76\u6355\u83b7\u4e4b\u524d\uff0c\u5148\u6765\u770b\u770b\u4e00\u4e2a\u6709\u5173 Lambda \u4f7f\u7528\u7684\u4f8b\u5b50\uff1a \u5f53\u4f60\u60f3\u4f7f\u7528\u4e00\u4e9b\u73b0\u5b58\u7684 STL \u4e2d\u7684\u7b97\u6cd5\u51fd\u6570\u5e76\u6539\u53d8\u9ed8\u8ba4\u884c\u4e3a\u89c4\u5219\u65f6\uff0c\u7528 Lambda \u8868\u8fbe\u5f0f\u662f\u5341\u5206\u65b9\u4fbf\u7684\u3002\u6bd4\u5982\uff0c\u5bf9\u4e8e std::sort \u51fd\u6570\uff0c\u4f60\u53ef\u4ee5\u5199\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u6bd4\u8f83\u51fd\u6570\u3002 \u5f53\u7136\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u8fdb\u4e00\u6b65\u5f3a\u5316\u6bd4\u8f83\u51fd\u6570\u7684\u529f\u80fd\uff1a\u8c03\u7528\u8ba1\u6570\u3002 \u4ee3\u7801 2-10 \u8c03\u7528\u8ba1\u6570\u5668 #include <algorithm> #include <iostream> #include <vector> int main () { std :: vector < int > vec { 0 , 5 , 2 , 9 , 7 , 6 , 1 , 3 , 4 , 8 }; size_t compCounter = 0 ; std :: sort ( vec . begin (), vec . end (), [ & compCounter ]( int a , int b ) noexcept { ++ compCounter ; return a < b ; }); std :: cout << \"number of comparisons: \" << compCounter << '\\n' ; for ( const auto & v : vec ) std :: cout << v << \", \" ; } \u81ea\u5b9a\u4e49\u7684\u6bd4\u8f83\u5668\u548c\u9ed8\u8ba4\u6bd4\u8f83\u5668\u662f\u4e00\u81f4\u7684\uff0c\u8fd4\u56de\u4e8c\u8005\u8f83\u5c0f\u7684\u90a3\u4e00\u4e2a\uff0c\u5373\u81ea\u7136\u6392\u5e8f\uff08\u5347\u5e8f\u6392\u5217\uff09\u3002 \u540c\u65f6\uff0cLambda \u4e5f\u5411 std::sort \u4f20\u5165\u4e86\u6355\u83b7\u7684\u672c\u5730\u53d8\u91cf compCounter \u6765\u8ba1\u6570\u8c03\u7528\u4e86\u5728\u6392\u5e8f\u8fc7\u7a0b\u4e2d\u591a\u5c11\u6b21\u7684\u6bd4\u8f83\u5668\u3002","title":"\u8c03\u7528\u8ba1\u6570\u5668 - \u6355\u83b7\u53d8\u91cf\u7684\u4e00\u4e2a\u4f8b\u5b50"},{"location":"Chapter2/#\u6355\u83b7\u5168\u5c40\u53d8\u91cf","text":"\u5982\u679c\u6709\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\uff0c\u5e76\u4e14\u5728 Lambda \u4f7f\u7528\u4e86 [=] \uff0c\u4e5f\u8bb8\u4f60\u4f1a\u8ba4\u4e3a\u8fd9\u6837\u5c31\u53ef\u4ee5\u503c\u6355\u83b7\u5168\u5c40\u53d8\u91cf\u4e86\uff0c\u5f88\u9057\u61be\uff0c\u4e8b\u5b9e\u5e76\u975e\u5982\u6b64\uff1a \u4ee3\u7801 2-11 \u6355\u83b7\u5168\u5c40\u53d8\u91cf #include <iostream> int global = 10 ; int main () { std :: cout << global << std :: endl ; auto foo = [ = ]() mutable noexcept { ++ global ; }; foo (); std :: cout << global << std :: endl ; const auto increaseGlobal = []() noexcept { ++ global ; }; increaseGlobal (); std :: cout << global << std :: endl ; const auto moreIncreaseGlobal = [ global ]() noexcept { ++ global ; }; moreIncreaseGlobal (); std :: cout << global << std :: endl ; } \u8fd9\u4e2a\u4f8b\u5b50\u5b9a\u4e49\u4e86\u5168\u5c40\u53d8\u91cf global \u5e76\u4e14\u5c06\u5b83\u4f7f\u7528\u5728\u591a\u4e2a Lambda \u8868\u8fbe\u5f0f\u4e2d\uff0c\u4f46\u662f\u5982\u679c\u4f60\u8fd0\u884c\u8fd9\u4e2a\u7a0b\u5e8f\u4f1a\u53d1\u73b0\uff0c\u65e0\u8bba\u901a\u8fc7\u4f55\u79cd\u65b9\u5f0f\u6355\u83b7\u5168\u5c40\u53d8\u91cf\uff0c\u90fd\u4f1a\u53d1\u73b0\u5b83\u6c38\u8fdc\u6307\u5411\u7684\u662f\u90a3\u4e2a\u5168\u5c40\u5bf9\u8c61\uff0c\u800c\u4e0d\u4f1a\u521b\u5efa\u4efb\u4f55\u4e00\u4e2a\u672c\u5730\u7684\u62f7\u8d1d\u5bf9\u8c61\u51fa\u6765\u3002 \u8fd9\u662f\u56e0\u4e3a\uff0c\u53ea\u6709\u5728\u81ea\u52a8\u5b58\u50a8\u671f\u95f4\u7684\u53d8\u91cf\u4f1a\u88ab\u6355\u83b7\u3002GCC \u751a\u81f3\u4f1a\u5bf9\u6b64\u63d0\u51fa\u8b66\u544a\uff1a warning: capture of variable 'global' with non-automatic storage duration. \u8fd9\u4e2a\u8b66\u544a\u53ea\u4f1a\u5728\u663e\u5f0f\u6355\u83b7\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\u65f6\u51fa\u73b0\uff0c\u5373\u4fbf\u4f60\u7528 [=] \uff0c\u7f16\u8bd1\u5668\u4e5f\u65e0\u6cd5\u5e2e\u4f60\u6d88\u9664\u8fd9\u4e2a\u9519\u8bef\u3002 \u5728 Clang \u4e2d\u751a\u81f3\u4f1a\u76f4\u63a5\u63d0\u793a\u9519\u8bef\uff1a error: 'global' cannot be captured because it does not have automatic storage duration","title":"\u6355\u83b7\u5168\u5c40\u53d8\u91cf"},{"location":"Chapter2/#\u6355\u83b7\u9759\u6001\u53d8\u91cf","text":"\u548c\u6355\u83b7\u5168\u5c40\u53d8\u91cf\u7c7b\u4f3c\uff0c\u5728\u6355\u83b7\u9759\u6001\u53d8\u91cf\u7684\u65f6\u5019\u4e5f\u4f1a\u9047\u5230\u7c7b\u4f3c\u7684\u95ee\u9898\u3002 \u4ee3\u7801 2-12 \u6355\u83b7\u9759\u6001\u53d8\u91cf #include <iostream> void bar () { static int static_int = 10 ; std :: cout << static_int << std :: endl ; auto foo = [ = ]() mutable noexcept { ++ static_int ; }; foo (); std :: cout << static_int << std :: endl ; const auto increase = []() noexcept { ++ static_int ; }; increase (); std :: cout << static_int << std :: endl ; const auto moreIncrease = [ static_int ]() noexcept { ++ static_int ; }; moreIncrease (); std :: cout << static_int << std :: endl ; } int main () { bar (); } \u8fd9\u4e00\u6b21\uff0c\u6211\u4eec\u5c1d\u8bd5\u6355\u83b7\u9759\u6001\u53d8\u91cf\u5e76\u4fee\u6539\u5b83\u7684\u503c\uff0c\u4f46\u662f\u7531\u4e8e\u5b83\u6ca1\u6709\u81ea\u52a8\u5b58\u50a8\u65f6\u95f4\uff0c\u7f16\u8bd1\u5668\u5e76\u4e0d\u4f1a\u5141\u8bb8\u4f60\u8fd9\u4e48\u505a\u3002\uff08GCC \u4f1a\u63d0\u793a\u8b66\u544a\uff0c\u800c Clang \u4f1a\u76f4\u63a5\u62a5\u9519\uff09 \u8f93\u51fa\uff1a 10 11 12 13","title":"\u6355\u83b7\u9759\u6001\u53d8\u91cf"},{"location":"Chapter2/#\u6355\u83b7\u7c7b\u6210\u5458\u548c-this-\u6307\u9488","text":"\u5f53\u4f60\u60f3\u5728\u4e00\u4e2a\u7c7b\u7684\u6210\u5458\u51fd\u6570\u4e2d\u5c1d\u8bd5\u6355\u83b7\u4e00\u4e2a\u6210\u5458\u53d8\u91cf\uff0c\u90a3\u4e48\u4e8b\u60c5\u5c31\u4f1a\u7a0d\u5fae\u53d8\u5f97\u6709\u70b9\u590d\u6742\u3002 \u7531\u4e8e\u6240\u6709\u7684\u6570\u636e\u6210\u5458\u90fd\u662f\u548c this \u6307\u9488\u5173\u8054\u8d77\u6765\u7684\uff0c\u5f53\u7136\u4e86\uff0c\u8fd9\u73a9\u610f\u5fc5\u987b\u88ab\u5b58\u50a8\u5728\u67d0\u4e2a\u5730\u65b9\u3002 \u4ee3\u7801 2-13 \u6355\u83b7\u6210\u5458\u53d8\u91cf\u65f6\u7684\u9519\u8bef #include <iostream> struct Baz { void foo () { const auto lam = [ s ]() { std :: cout << s ; }; lam (); } std :: string s ; }; int main () { Baz b ; b . foo (); } \u8fd9\u6bb5\u4ee3\u7801\u5c1d\u8bd5\u53bb\u6355\u83b7\u4e00\u4e2a\u6210\u5458\u53d8\u91cf\uff0c\u4f46\u662f\u7f16\u8bd1\u5668\u5e76\u4e0d\u540c\u610f\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u7f16\u8bd1\u5668\u7f16\u8bd1\u9519\u8bef\uff1a In member function 'void Baz::foo()': error: capture of non-variable 'Baz::s' error: 'this' was not captured for this lambda function \u4e3a\u89e3\u51b3\u6b64\u95ee\u9898\uff0c\u9700\u8981\u6355\u83b7 this \u6307\u9488\u3002\u8fd9\u6837\u5c31\u80fd\u8bbf\u95ee\u5230\u6210\u5458\u53d8\u91cf\u4e86\u3002 \u800c\u4e0a\u9762\u7684\u4ee3\u7801\u4e5f\u53ef\u4ee5\u8fd9\u6837\u4fee\u6539\uff1a struct Baz { void foo () { const auto lam = [ this ]() { std :: cout << s ; }; lam (); } std :: string s ; }; \u8fd9\u6837\u5c31\u4e0d\u4f1a\u6709\u7f16\u8bd1\u9519\u8bef\u4e86\u3002 \u5f53\u7136\u4e86\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 [=] \u6216\u8005 [&] \u6765\u6355\u83b7 this \u6307\u9488\uff0c\u5728 C++11/14 \u4e2d\u4ed6\u4eec\u7684\u6548\u679c\u662f\u4e00\u6837\u7684\u3002 \u4f46\u662f\uff0c\u8bf7\u6ce8\u610f\uff0c\u503c\u6355\u83b7 this \u4e5f\u662f\u6355\u83b7\u6307\u9488\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u4f60\u80fd\u8bbf\u95ee\u6210\u5458\u53d8\u91cf\u7684\u539f\u56e0\u3002 \u5728 C++11/14 \u4e2d\uff0c\u4f60\u4e0d\u80fd\u591f\u8fd9\u6837\u5199\uff1a const auto lam = [ * this ]() { std :: cout << s ; }; \u4f46\u662f\u5b83\u5728 C++17 \u4e2d\u662f\u5141\u8bb8\u7684\u3002 \u5982\u679c\u4f60\u5728\u5355\u4e00\u65b9\u6cd5\u7684\u4e0a\u4e0b\u6587\u4e2d\u4f7f\u7528\u6355\u83b7 this \uff0c\u8fd9\u633a\u597d\u7684\u3002 \u4f46\u662f\u7a0d\u5fae\u590d\u6742\u7684\u573a\u666f\u4e0b\u4f7f\u7528\u6355\u83b7 this \u5462\uff1f \u4ee3\u7801 2-14 \u4ece\u65b9\u6cd5\u4e2d\u8fd4\u56de Lambda #include <functional> #include <iostream> struct Baz { std :: function < void () > foo () { return [ = ] { std :: cout << s << std :: endl ; }; } std :: string s ; }; int main () { auto f1 = Baz { \"abc\" }. foo (); auto f2 = Baz { \"xyz\" }. foo (); f1 (); f2 (); } \u4ee3\u7801\u4e2d\u58f0\u660e\u4e86 Baz \u8fd9\u4e2a\u5bf9\u8c61\uff0c\u5e76\u4e14\u8c03\u7528\u4e86 foo() \u3002 \u8bf7\u6ce8\u610f\uff0c foo() \u8fd4\u56de\u4e86\u4e00\u4e2a\u4ece\u7c7b\u4e2d\u6355\u83b7\u6210\u5458\u7684 Lambda\uff08\u5b58\u50a8\u5728 std::function \u4e2d\uff09\u3002 std::function \u5728 C++11 \u4e2d\u662f\u5fc5\u9700\u7684\uff0c\u56e0\u4e3a\u5e38\u89c4\u51fd\u6570\u6ca1\u6709\u8fd4\u56de\u7c7b\u578b\u63a8\u5bfc\u3002 \u4f46\u662f C++14 \u652f\u6301\u51fd\u6570\u8fd4\u56de\u7c7b\u578b\u7684\u63a8\u5bfc\u3002 \u7531\u4e8e\u6211\u4eec\u4f7f\u7528\u7684\u662f\u4e34\u65f6\u5bf9\u8c61\uff0c\u6211\u4eec\u4e0d\u80fd\u4fdd\u8bc1\u5f53\u6211\u4eec\u8c03\u7528 f1 \u548c f2 \u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002 \u8fd9\u662f\u4e00\u4e2a\u60ac\u7a7a\u5f15\u7528\u7684\u95ee\u9898\uff0c\u5e76\u4e14\u662f\u672a\u5b9a\u4e49\u884c\u4e3a\uff08Undefined Behaviour\uff09\u3002 \u8fd9\u79cd\u884c\u4e3a\u7c7b\u4f3c\u4e8e\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\uff1a struct Bar { std :: string const & foo () const { return s ; }; std :: string s ; }; auto && f1 = Bar { \"abc\" }. foo (); // \u4e00\u4e2a\u60ac\u7a7a\u5f15\u7528 \u5f53\u7136\uff0c\u5982\u679c\u4f60\u663e\u5f0f\u6355\u83b7\uff0c\u4e5f\u662f \u4e00\u6837 \u7684\u3002 std :: function < void () > foo () { return [ s ] { std :: cout << s << std :: endl ; }; } \u603b\u800c\u8a00\u4e4b\uff0c\u5f53 Lambda \u751f\u547d\u5468\u671f\u6bd4\u5bf9\u8c61\u66f4\u957f\u65f6\uff0c\u6355\u83b7 this \u53ef\u80fd\u4f1a\u53d8\u5f97\u68d8\u624b\u3002 \u5f53\u60a8\u4f7f\u7528\u5f02\u6b65\u8c03\u7528\u6216\u591a\u7ebf\u7a0b\u65f6\uff0c\u53ef\u80fd\u4f1a\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\u3002 \u5728 C++17 \u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u4f1a\u91cd\u65b0\u8be6\u7ec6\u8ba8\u8bba\u8fd9\u4e2a\u8bdd\u9898","title":"\u6355\u83b7\u7c7b\u6210\u5458\u548c this \u6307\u9488"},{"location":"Chapter2/#\u53ea\u80fd\u79fb\u52a8\u7684\u5bf9\u8c61","text":"\u5047\u5982\uff0c\u73b0\u5728\u6709\u4e00\u4e2a\u201c\u4ec5\u53ef\u79fb\u52a8\u201d\u7684\u5bf9\u8c61\uff08\u50cf unique_ptr \uff09\uff0c\u90a3\u4e48\u4f60\u5c31\u65e0\u6cd5\u5c06\u5b83\u4f5c\u4e3a\u6355\u83b7\u5bf9\u8c61\u79fb\u52a8\u5230 Lambda \u4e2d\u3002 \u503c\u6355\u83b7\u5c06\u4e0d\u8d77\u4f5c\u7528\uff0c\u53ea\u80fd\u8fdb\u884c\u5f15\u7528\u6355\u83b7\u3002 std :: unique_ptr < int > p ( new int { 10 }); auto foo = [ p ]() {}; // does not compile.... auto foo_ref = [ & p ]() {}; // compiles, but the ownership is not passed \u4e0a\u8ff0\u4f8b\u5b50\u4e2d\uff0c\u4f60\u4f1a\u53d1\u73b0\u6355\u83b7 unique_ptr \u7684\u552f\u4e00\u65b9\u5f0f\u662f\u5f15\u7528\u6355\u83b7\uff0c\u4f46\u662f\u8fd9\u79cd\u65b9\u5f0f\u5e76\u4e0d\u662f\u6700\u597d\u7684\u65b9\u5f0f\uff0c\u56e0\u4e3a\u5b83\u5e76\u6ca1\u6709\u5c06 unique_ptr \u7684\u6240\u5c5e\u6743\u8fdb\u884c\u8f6c\u79fb\u3002 \u5728\u4e0b\u4e00\u7ae0 C++14 \u4e2d\uff0c\u7531\u4e8e\u521d\u59cb\u5316\u6355\u83b7\u7684\u5f15\u5165\uff0c\u8fd9\u4e2a\u95ee\u9898\u4f1a\u88ab\u4fee\u590d\u3002\u4f60\u53ef\u4ee5\u5728\u521d\u59cb\u5316\u6355\u83b7\u76f4\u63a5\u67e5\u9605\u5185\u5bb9\u3002","title":"\u53ea\u80fd\u79fb\u52a8\u7684\u5bf9\u8c61"},{"location":"Chapter2/#\u4fdd\u7559\u5e38\u91cf","text":"\u5982\u679c\u6355\u83b7\u4e00\u4e2a const \u4fee\u9970\u7684\u53d8\u91cf\uff0c\u90a3\u4e48\u5b83\u7684\u5e38\u91cf\u6027\u5c06\u4f1a\u88ab\u4fdd\u7559\u3002 \u4ee3\u7801 2-15 \u4fdd\u7559\u5e38\u91cf\u7684 const \u7279\u6027 #include <iostream> #include <type_traits> int main () { const int x = 10 ; auto foo = [ x ]() mutable { std :: cout << std :: is_const < decltype ( x ) >:: value << std :: endl ; x = 11 ; }; foo (); } \u8fd9\u6bb5\u4ee3\u7801\u5c06\u4e0d\u4f1a\u88ab\u7f16\u8bd1\u5668\u901a\u8fc7\uff0c\u56e0\u4e3a\u6355\u83b7\u7684\u5bf9\u8c61\u662f\u4e00\u4e2a\u5e38\u91cf\uff0c\u5373\u4fbf\u4f7f\u7528 mutable \u6765\u4fee\u9970\u4e5f\u65e0\u6d4e\u4e8e\u4e8b\u3002","title":"\u4fdd\u7559\u5e38\u91cf"},{"location":"Chapter2/#\u6355\u83b7\u53c2\u6570\u5305","text":"\u4e3a\u4e86\u7ed3\u675f\u6211\u4eec\u5bf9\u201c\u6355\u83b7\u201d\u7684\u8ba8\u8bba\uff0c\u5728\u6700\u540e\u6211\u4eec\u6765\u804a\u804a\u4f7f\u7528\u53ef\u53d8\u53c2\u6570\u6a21\u677f\u6765\u8fdb\u884c\u6355\u83b7\u3002 \u7f16\u8bd1\u5668\u4f1a\u5c06\u53c2\u6570\u5305\u6269\u5c55\u4e3a\u975e\u9759\u6001\u6570\u636e\u6210\u5458\u5217\u8868\uff0c\u5982\u679c\u60a8\u60f3\u5728\u6a21\u677f\u5316\u4ee3\u7801\u4e2d\u4f7f\u7528 Lambda\uff0c\u8fd9\u4f1a\u5341\u5206\u65b9\u4fbf\u3002\u4ee3\u7801\u793a\u4f8b\uff1a \u4ee3\u7801 2-16 \u6355\u83b7\u53ef\u53d8\u53c2\u6570\u5305 #include <iostream> #include <tuple> template < class ... Args > void captureTest ( Args ... args ) { const auto lambda = [ args ...] { const auto tup = std :: make_tuple ( args ...); std :: cout << \"tuple size: \" << std :: tuple_size < decltype ( tup ) >:: value << '\\n' ; std :: cout << \"tuple 1st: \" << std :: get < 0 > ( tup ) << '\\n' ; }; lambda (); // call it } int main () { captureTest ( 1 , 2 , 3 , 4 ); captureTest ( \"Hello world\" , 10.0f ); } \u8fd0\u884c\u8fd9\u6bb5\u4ee3\u7801\uff0c\u7ed3\u679c\u4e3a\uff1a tuple size: 4 tuple 1st: 1 tuple size: 2 tuple 1st: Hello world \u5728\u8fd9\u91cc\u5c55\u793a\u4e86\u4f7f\u7528\u53ef\u53d8\u957f\u53c2\u6570\u5305\u8fdb\u884c\u503c\u6355\u83b7\uff08\u5f15\u7528\u6355\u83b7\u540c\u7406\uff09\uff0c\u6355\u83b7\u7684\u5bf9\u8c61\u201c\u5b58\u50a8\u201d\u5728\u4e00\u4e2a tuple \u5bf9\u8c61\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e9b\u8f85\u52a9\u51fd\u6570\u6765\u8bbf\u95ee tuple \u4e2d\u7684\u6570\u636e\u548c\u5c5e\u6027\u3002 \u5f53\u7136\u4e86\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 C++ Insight \u6765\u89c2\u5bdf\u7f16\u8bd1\u5668\u662f\u5982\u679c\u751f\u6210\u8fd9\u4e2a\u4ee3\u7801\u5e76\u4e14\u5c55\u5f00\u6a21\u677f\u3001\u53c2\u6570\u5305\u548c Lambda \u7684\u3002 C++14 \u8ba9\u6355\u83b7\u4ec5\u53ef\u79fb\u52a8\u7c7b\u578b\u6210\u4e3a\u53ef\u80fd\uff0c\u5e76\u4e14 C++20 \u4e2d\u589e\u5f3a\u4e86\u5bf9\u53ef\u53d8\u53c2\u6570\u5305\u7684\u652f\u6301\u3002","title":"\u6355\u83b7\u53c2\u6570\u5305"},{"location":"Chapter2/#5-\u8fd4\u56de\u7c7b\u578b","text":"\u5728\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u4ee5\u8df3\u8fc7 Lambda \u7684\u8fd4\u56de\u7c7b\u578b\uff0c\u8ba9\u7f16\u8bd1\u5668\u4e3a\u60a8\u63a8\u5bfc\u7c7b\u578b\u3002 \u6700\u521d\uff0c\u8fd4\u56de\u7c7b\u578b\u7684\u63a8\u5bfc\u4ec5\u9650\u4e8e\u51fd\u6570\u4f53\u5185\u4ec5\u5305\u542b\u5355\u4e2a return \u8bed\u53e5\u7684 Lambda\u3002 \u4f46\u662f\uff0c\u7531\u4e8e C++ \u6807\u51c6\u5b9e\u73b0\u4e86\u4e00\u4e2a\u66f4\u4fbf\u6377\u7684\u7248\u672c\uff0c\u56e0\u6b64\u8fd9\u9650\u5236\u5f88\u5feb\u5c31\u53d6\u6d88\u4e86\u3002 \u76f8\u5173\u5185\u5bb9\u53ef\u4ee5\u53c2\u8003\uff1a C++ Standard Core Language Defect Reports and Accepted Issues, Revision 104 \u603b\u7ed3\u4e00\u4e0b\uff0c\u4ece C++11 \u5f00\u59cb\uff0c\u53ea\u8981\u6240\u6709\u7684 return \u8bed\u53e5\u90fd\u662f\u76f8\u540c\u7684\u7c7b\u578b\uff0c\u7f16\u8bd1\u5668\u5c31\u80fd\u591f\u63a8\u65ad\u51fa\u8fd4\u56de\u7c7b\u578b\u3002 \u5982\u679c\u6240\u6709\u7684 return \u8bed\u53e5\u90fd\u8fd4\u56de\u4e86\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u5e76\u4e14\u8fd4\u56de\u8868\u8fbe\u5f0f\u7684\u7c7b\u578b\u90fd\u7ecf\u8fc7\u4e86\u4e00\u4e2a\u4ece\u5de6\u503c\u5230\u53f3\u503c\u7684\u8f6c\u6362\uff087.1 [conv.lavl]\uff09\u6216\u8005\u4ece\u6570\u7ec4\u5230\u6307\u9488\u7684\u8f6c\u6362\uff087.2 [conv.array]\uff09\u6216\u8005\u4ece\u51fd\u6570\u5230\u6307\u9488\u7684\u8f6c\u6362\uff087.3 [conv.func]\uff09\uff0c\u90a3\u4e48\u4ed6\u4eec\u7684\u7c7b\u578b\u90fd\u662f\u4e00\u6837\u7684\uff0c\u5c31\u662f\u666e\u901a\u7c7b\u578b\u3002 \u4ee3\u7801 2-17 \u8fd4\u56de\u7c7b\u578b\u63a8\u5bfc #include <type_traits> int main () { const auto baz = []( int x ) noexcept { if ( x < 20 ) return x * 1.1 ; else return x * 2.1 ; }; static_assert ( std :: is_same < double , decltype ( baz ( 10 )) >:: value , \"has to be the same!\" ); } \u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6709\u4e24\u4e2a\u8fd4\u56de\u8bed\u53e5\uff0c\u4f46\u662f\u4ed6\u4eec\u90fd\u6307\u5411 double \u7c7b\u578b\uff0c\u6240\u4ee5\u7f16\u8bd1\u5668\u80fd\u591f\u63a8\u65ad\u51fa\u6700\u7ec8\u7684\u7c7b\u578b\u3002 \u5728 C++14 \u4e2d\uff0c\u63a8\u5bfc\u5e38\u89c4\u51fd\u6570\u65f6\uff0clambda \u7684\u7c7b\u578b\u4f1a\u81ea\u52a8\u66f4\u65b0\u4ee5\u9002\u5e94 auto \u7c7b\u578b\u7684\u89c4\u5219\u3002","title":"5. \u8fd4\u56de\u7c7b\u578b"},{"location":"Chapter2/#\u5c3e\u90e8\u8fd4\u56de\u7c7b\u578b\u8bed\u6cd5","text":"\u5982\u679c\u4f60\u60f3\u663e\u5f0f\u7684\u51f8\u663e\u8fd4\u56de\u7c7b\u578b\uff0c\u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528\u5c3e\u90e8\u8fd4\u56de\u7c7b\u578b\u7684\u8bed\u6cd5\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff1a \u4ee3\u7801 2-18 lambda \u8fd4\u56de\u5b57\u7b26\u4e32\u5e8f\u5217 #include <iostream> #include <string> int main () { const auto testSpeedString = []( int speed ) noexcept { if ( speed > 100 ) return \"you're a super fast\" ; return \"you're a regular\" ; }; auto str = testSpeedString ( 100 ); str += \" driver\" ; // \u51fa\u9519! const char*\u7c7b\u578b\u6ca1\u6709+=\u64cd\u4f5c\u7b26\u53ef\u4ee5\u5e94\u7528 std :: cout << str ; return 0 ; } \u5f53\u7136\uff0c\u8fd9\u6bb5\u4ee3\u7801\u662f\u65e0\u6cd5\u7f16\u8bd1\u7684\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u81ea\u52a8\u63a8\u65ad\u7684\u7c7b\u578b\u7ed3\u679c\u662f const char*\uff0c\u4f5c\u4e3a lambda \u7684\u8fd4\u56de\u7c7b\u578b\uff0c+= \u64cd\u4f5c\u7b26\u65e0\u6cd5\u5e94\u7528\u4e8e const char * \u7c7b\u578b\uff0c\u6240\u4ee5\u7f16\u8bd1\u5668\u963b\u6b62\u4e86\u8fd9\u79cd\u884c\u4e3a\u3002 \u5f53\u7136\uff0c\u6211\u4eec\u7a0d\u5fae\u4fee\u6539\u4e00\u4e0b\uff0c \u4e0a\u8ff0\u4ee3\u7801 \u5c31\u53ef\u4ee5\u6b63\u5e38\u5de5\u4f5c\u4e86\u3002 const auto testSpeedString = []( int speed ) -> std :: string { if ( speed > 100 ) return \"you're a super fast\" ; return \"you're a regular\" ; }; auto str = testSpeedString ( 100 ); str += \" driver\" ; \u6211\u4eec\u53ea\u662f\u5c06 noexcept \u79fb\u9664\uff0c\u5e76\u66f4\u6362\u4e3a\u4e86 std::string \u3002 \u5f53\u7136\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528\u547d\u540d\u7a7a\u95f4 std::string_literals \u7136\u540e\u8fd4\u56de std::string \u7c7b\u578b\u7684 \u201cyou're a regular\u201d \u3002","title":"\u5c3e\u90e8\u8fd4\u56de\u7c7b\u578b\u8bed\u6cd5"},{"location":"Chapter2/#6-\u8f6c\u5316\u4e3a\u51fd\u6570\u6307\u9488","text":"\u5f53\u4f60\u7684 Lambda \u8868\u8fbe\u5f0f\u6ca1\u6709\u6355\u83b7\u5230\u4efb\u4f55\u53d8\u91cf\u65f6\uff0c\u7f16\u8bd1\u5668\u5c31\u4f1a\u5c06\u5176\u8f6c\u6362\u4e3a\u4e00\u4e2a\u5e38\u89c4\u51fd\u6570\u6307\u9488\u3002 \u53ef\u4ee5\u67e5\u770b\u6807\u51c6\u8349\u6848\u4e2d [expr.prim.lambda#6] \u7684\u5b9a\u4e49\uff1a \u6ca1\u6709\u6355\u83b7\u7684 Lambda \u8868\u8fbe\u5f0f\u7684\u95ed\u5305\u7c7b\u578b\u5177\u6709\u516c\u5171\u975e\u865a\u62df\u3001\u975e\u663e\u5f0f\u7684 const \u8f6c\u6362\u51fd\u6570\uff0c\u6307\u5411\u4e0e\u95ed\u5305\u7c7b\u578b\u7684\u51fd\u6570\u8c03\u7528\u8fd0\u7b97\u7b26\u5177\u6709\u76f8\u540c\u53c2\u6570\u548c\u8fd4\u56de\u7c7b\u578b\u7684\u51fd\u6570\u7684\u6307\u9488\u3002 \u6b64\u8f6c\u6362\u51fd\u6570\u8fd4\u56de\u7684\u503c\u5e94\u4e3a\u51fd\u6570\u7684\u5730\u5740\uff0c\u8be5\u51fd\u6570\u5728\u8c03\u7528\u65f6\u4e0e\u8c03\u7528\u95ed\u5305\u7c7b\u578b\u7684\u51fd\u6570\u8c03\u7528\u8fd0\u7b97\u7b26\u5177\u6709\u76f8\u540c\u7684\u6548\u679c\u3002 \u4e3a\u4e86\u9610\u660e Lambda \u662f\u5982\u4f55\u652f\u6301\u8fd9\u79cd\u8f6c\u6362\uff0c\u8ba9\u6211\u4eec\u8003\u8651\u4ee5\u4e0b\u793a\u4f8b\u3002 \u5b83\u5b9a\u4e49\u4e86\u4e00\u4e2a\u660e\u786e\u5b9a\u4e49\u8f6c\u6362\u8fd0\u7b97\u7b26\u7684\u4eff\u51fd\u6570 baz \uff1a \u4ee3\u7801 2-19 \u8f6c\u5316\u51fd\u6570\u6307\u9488 #include <iostream> void callWith10 ( void ( * bar )( int )) { bar ( 10 ); } int main () { struct { using f_ptr = void ( * )( int ); void operator ()( int s ) const { return call ( s ); } operator f_ptr () const { return & call ; } private : static void call ( int s ) { std :: cout << s << '\\n' ; }; } baz ; callWith10 ( baz ); callWith10 ([]( int x ) { std :: cout << x << '\\n' ; }); } \u5728\u8fd9\u4e2a\u7a0b\u5e8f\u4e2d\uff0c\u6709\u4e00\u4e2a callWith10 \u51fd\u6570\uff0c\u5b83\u63a5\u53d7\u4e00\u4e2a\u51fd\u6570\u6307\u9488\u3002 \u7136\u540e\u6211\u4eec\u7528\u4e24\u4e2a\u53c2\u6570\u8c03\u7528\u5b83\uff08\u7b2c 23 \u884c\u548c\u7b2c 24 \u884c\uff09\uff1a\u7b2c\u4e00\u4e2a\u4f7f\u7528 baz \uff0c\u5b83\u662f\u4e00\u4e2a\u5305\u542b\u5fc5\u8981\u8f6c\u6362\u8fd0\u7b97\u7b26\u7684\u4eff\u51fd\u6570 - \u5b83\u8f6c\u6362\u4e3a f_ptr \uff0c\u4e0e callWith10 \u7684\u8f93\u5165\u53c2\u6570\u76f8\u540c\u3002\u7b2c\u4e8c\u4e2a\u4f7f\u7528 Lambda\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7f16\u8bd1\u5668\u5c06\u6267\u884c\u6240\u9700\u7684\u8f6c\u6362\u3002 \u5f53\u60a8\u9700\u8981\u8c03\u7528\u9700\u8981\u56de\u8c03\u7684 C \u98ce\u683c\u7684\u51fd\u6570\u65f6\uff0c\u8fd9\u79cd\u8f6c\u6362\u53ef\u80fd\u4f1a\u5f88\u65b9\u4fbf\u3002 \u4f8b\u5982\uff0c\u4e0b\u9762\u7684\u4ee3\u7801\u662f\u4ece C \u6807\u51c6\u5e93\u4e2d\u8c03\u7528 qsort \u51fd\u6570\uff0c\u540c\u65f6\u4f7f\u7528 Lambda \u6765\u8fdb\u884c\u53cd\u5411\u6392\u5e8f\u3002 \u4ee3\u7801 2-20 \u8c03\u7528 C \u98ce\u683c\u51fd\u6570 #include <cstdlib> #include <iostream> int main () { int values [] = { 8 , 9 , 2 , 5 , 1 , 4 , 7 , 3 , 6 }; constexpr size_t numElements = sizeof ( values ) / sizeof ( values [ 0 ]); std :: qsort ( values , numElements , sizeof ( int ), []( const void * a , const void * b ) noexcept { return ( * ( int * ) b - * ( int * ) a ); }); for ( const auto & val : values ) std :: cout << val << \", \" ; } \u6b63\u5982\u60a8\u5728\u4ee3\u7801\u793a\u4f8b\u4e2d\u770b\u5230\u7684\u90a3\u6837\uff0c\u4f7f\u7528 std::qsort \u4ec5\u5c06\u51fd\u6570\u6307\u9488\u4f5c\u4e3a\u6bd4\u8f83\u5668\u3002 \u7f16\u8bd1\u5668\u53ef\u4ee5\u5bf9\u6211\u4eec\u4f20\u9012\u7684\u65e0\u72b6\u6001 Lambda \u8fdb\u884c\u9690\u5f0f\u8f6c\u6362\u3002","title":"6. \u8f6c\u5316\u4e3a\u51fd\u6570\u6307\u9488"},{"location":"Chapter2/#\u4e00\u4e2a\u6709\u8da3\u7684\u4f8b\u5b50","text":"\u5728\u8ba8\u8bba\u522b\u7684\u5185\u5bb9\u4e4b\u524d\uff0c\u8fd9\u513f\u6709\u4e00\u4e2a\u53ef\u80fd\u5341\u5206\u6709\u8da3\u7684\u4f8b\u5b50\uff0c\u6211\u4eec\u53ef\u4ee5\u4e00\u8d77\u6765\u7814\u7a76\u4e0b\uff1a \u4ee3\u7801 2-21 \u52a0\u53f7\u548c Lambda \u8868\u8fbe\u5f0f #include <type_traits> int main () { auto funcPtr = + [] {}; static_assert ( std :: is_same < decltype ( funcPtr ), void ( * )() >:: value ); } \u6ce8\u610f\u4e00\u4e0b\u8fd9\u4e2a\u201c\u5947\u602a\u201d\u7684\u201c + \u201d\u8fd0\u7b97\u7b26\u7684\u8bed\u6cd5\uff0c\u5982\u679c\u4f60\u53bb\u6389\u8fd9\u4e2a\u52a0\u53f7\uff0c\u90a3\u6574\u4e2a static_assert \u5c31\u5931\u8d25\u4e86\u3002 \u8fd9\u662f\u4ec0\u4e48\u795e\u5947\u7684\u539f\u56e0\uff1f \u8981\u7406\u89e3\u5176\u4e2d\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u6211\u4eec\u5f97\u5148\u770b\u770b C++ \u751f\u6210\u7684\u4ee3\u7801\u662f\u4ec0\u4e48\u6837\u7684\uff1a #include <type_traits> int main () { class __lambda_4_18 { public : inline void operator ()() const { } using retType_4_18 = auto ( * )() -> void ; inline operator retType_4_18 () const noexcept { return __invoke ; } private : static inline void __invoke () { } } __lambda_4_18 {}; using FuncPtr_4 = void ( * )(); FuncPtr_4 funcPtr = + static_cast < void ( * )() > ( __lambda_4_18 . operator __lambda_4_18 :: retType_4_18 ()); /* PASSED: static_assert(std::integral_constant<bool, 1>::value); */ } \u4ee3\u7801\u4e2d\u7684 + \u662f\u4e00\u4e2a\u4e00\u5143\u8fd0\u7b97\u7b26\uff0c\u4e14\u53ef\u4ee5\u8fd0\u7528\u5728\u6307\u9488\u4e0a\u3002 \u56e0\u6b64\u7f16\u8bd1\u5668\u5c06\u65e0\u72b6\u6001\u7684 Lambda \u8f6c\u6362\u6210\u4e86\u51fd\u6570\u6307\u9488\uff0c\u518d\u5206\u914d\u7ed9 funcPtr \u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u5982\u679c\u5220\u9664\u4e86\u201c + \u201d\u53f7\uff0c\u90a3\u4e48 funcPtr \u5c31\u4ec5\u4ec5\u662f\u4e00\u4e2a\u5355\u7eaf\u7684\u95ed\u5305\u5bf9\u8c61\uff0c\u6240\u4ee5\u5728 static_assert \u65f6\u4f1a\u5931\u8d25\u3002 \u867d\u7136\u7528 + \u8fd9\u6837\u7684\u8bed\u6cd5\u53ef\u80fd\u4e0d\u662f\u4e00\u4e2a\u6700\u597d\u7684\u65b9\u5f0f\uff0c\u4f46\u662f\u4f60\u53ef\u4ee5\u7528 static_cast \u6765\u66ff\u4ee3\uff0c\u53ef\u4ee5\u5b9e\u73b0\u548c + \u4e00\u6837\u7684\u6548\u679c\u3002 \u5f53\u60a8\u4e0d\u5e0c\u671b\u7f16\u8bd1\u5668\u521b\u5efa\u592a\u591a\u51fd\u6570\u5b9e\u4f8b\u65f6\uff0c\u60a8\u53ef\u4ee5\u5e94\u7528\u6b64\u6280\u672f\u3002\u4f8b\u5982\uff1a \u4ee3\u7801 2-22 \u5f3a\u5236\u8f6c\u6362\u4e3a\u51fd\u6570\u8c03\u7528 template < typename F > void call_function ( F f ) { f ( 10 ); } int main () { call_function ( static_cast < int ( * )( int ) > ([]( int x ) { return x + 2 ; })); call_function ( static_cast < int ( * )( int ) > ([]( int x ) { return x * 2 ; })); } \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u7f16\u8bd1\u5668\u53ea\u9700\u8981\u521b\u5efa\u4e00\u4e2a call_function \u5b9e\u4f8b\uff0c\u56e0\u4e3a\u5b83\u53ea\u9700\u8981\u4e00\u4e2a\u51fd\u6570\u6307\u9488 int (*)(int) \u3002 \u4f46\u662f\u5982\u679c\u4f60\u5220\u9664 static_casts \u90a3\u4e48\u4f60\u5c06\u5f97\u5230\u4e24\u4e2a\u7248\u672c\u7684 call_function \u56e0\u4e3a\u7f16\u8bd1\u5668\u5fc5\u987b\u4e3a Lambdas \u521b\u5efa\u4e24\u4e2a\u5355\u72ec\u7684\u7c7b\u578b\u3002","title":"\u4e00\u4e2a\u6709\u8da3\u7684\u4f8b\u5b50"},{"location":"Chapter2/#7-iife---\u7acb\u5373\u8c03\u7528\u51fd\u6570\u8868\u8fbe\u5f0f","text":"\u5728\u591a\u6570\u4f8b\u5b50\u4e2d\uff0c\u4f60\u53ef\u80fd\u53d1\u73b0\u4e86\uff0c\u6211\u7ecf\u5e38\u90fd\u662f\u5148\u5b9a\u4e49\u597d Lambda\uff0c\u5728\u4e4b\u540e\u624d\u53bb\u8c03\u7528\u5b83\u3002 \u7136\u800c\uff0c\u4f60\u4e5f\u53ef\u4ee5\u76f4\u63a5\u7acb\u5373\u8c03\u7528\u4e00\u4e2a lambda\uff1a \u4ee3\u7801 2-23 \u201c\u73b0\u5199\u73b0\u7528\u201dLambda #include <iostream> int main () { int x = 1 , y = 1 ; [ & ]() noexcept { ++ x ; ++ y ; }(); // <-- call () std :: cout << x << \", \" << y ; } \u4e0a\u9762\u8fd9\u4e2a\u4f8b\u5b50\uff0cLambda \u5728\u88ab\u521b\u5efa\u4e4b\u540e\u6ca1\u6709\u8d4b\u7ed9\u4efb\u4f55\u4e00\u4e2a\u95ed\u5305\u5bf9\u8c61\uff0c\u800c\u662f\u76f4\u63a5\u88ab\u8c03\u7528\uff08\u901a\u8fc7\u201c () \u201d\u64cd\u4f5c\u7b26\uff09\u3002 \u5982\u679c\u4f60\u8fd0\u884c\u4e0a\u8ff0\u7a0b\u5e8f\uff0c\u671f\u671b\u7ed3\u679c\u5e94\u8be5\u662f\u8f93\u51fa\u4e86\uff1a 2, 2 \u5728\u9047\u5230\u590d\u6742\u7684\u5e38\u91cf\u5bf9\u8c61\u7684\u521d\u59cb\u5316\u65f6\uff0c\u8fd9\u79cd\u8868\u8fbe\u5f0f\u5c06\u5341\u5206\u5730\u6709\u7528\uff1a const auto val = []() { /* several lines of code... */ }(); // call it! \u5176\u4e2d\uff0c val \u662f\u4e00\u4e2a\u5e38\u91cf\uff08constant value\uff09\uff0c\u5e76\u4e14\u5176\u7c7b\u578b\u4e3a Lambda \u8868\u8fbe\u5f0f\u7684\u8fd4\u56de\u7c7b\u578b\uff1a // val1 is int const auto val1 = []() { return 10 ; }(); // val2 is std::string const auto val2 = []() -> std :: string { return \"ABC\" ; }(); \u4e0b\u9762\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u8f83\u957f\u7684\u7528\u4f8b\uff0c\u5728\u51fd\u6570\u5185\u90e8\u4f7f\u7528 IIFE \u5f62\u5f0f\u6765\u6784\u9020\u4e00\u4e2a\u8f85\u52a9 Lambda \u51fd\u6570\uff0c\u53bb\u521b\u5efa\u4e00\u4e2a\u5e38\u91cf\u3002 \u4ee3\u7801 2-24 IIFE \u548c HTML \u751f\u6210\u5668 #include <iostream> #include <string> void ValidateHTML ( const std :: string & ) {} std :: string BuildAHref ( const std :: string & link , const std :: string & text ) { const std :: string html = [ & link , & text ] { const auto & inText = text . empty () ? link : text ; return \"<a href= \\\" \" + link + \" \\\" >\" + inText + \"</a>\" ; }(); // call! ValidateHTML ( html ); return html ; } int main () { try { const auto ahref = BuildAHref ( \"www.leanpub.com\" , \"Leanpub Store\" ); std :: cout << ahref ; } catch (...) { std :: cout << \"bad format...\" ; } } \u8fd9\u4e2a\u7528\u4f8b\u4e2d\uff0c\u51fd\u6570 BuildAHref() \uff0c\u5b83\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\uff0c\u7136\u540e\u6784\u5efa\u4e00\u4e2a <a> </a> HTML \u6807\u7b7e\u3002 \u6839\u636e\u8f93\u5165\u53c2\u6570\uff0c\u6211\u4eec\u6784\u5efa html \u53d8\u91cf\u3002 \u5982\u679c\u6587\u672c\u4e0d\u4e3a\u7a7a\uff0c\u5219\u6211\u4eec\u5c06\u5176\u7528\u4f5c\u5185\u90e8 HTML \u503c\u3002 \u5426\u5219\uff0c\u6211\u4eec\u4f7f\u7528\u9ed8\u8ba4\u94fe\u63a5\u3002 \u6211\u4eec\u5e0c\u671b html \u53d8\u91cf\u662f\u5e38\u91cf\uff0c\u4f46\u5f88\u96be\u7f16\u5199\u5177\u6709\u8f93\u5165\u53c2\u6570\u6240\u9700\u6761\u4ef6\u7684\u7d27\u51d1\u4ee3\u7801\u3002 \u591a\u4e8f\u4e86 IIFE\uff0c\u6211\u4eec\u53ef\u4ee5\u7f16\u5199\u5355\u72ec\u7684 Lambda\uff0c\u7136\u540e\u7528 const \u6807\u8bb0\u6211\u4eec\u7684\u53d8\u91cf\u3002 \u7a0d\u540e\u53ef\u4ee5\u5c06\u53d8\u91cf\u4f20\u9012\u7ed9 ValidateHTML \u3002","title":"7. IIFE - \u7acb\u5373\u8c03\u7528\u51fd\u6570\u8868\u8fbe\u5f0f"},{"location":"Chapter2/#\u53ef\u8bfb\u6027\u63d0\u793a","text":"\u6709\u4e9b\u65f6\u5019\uff0c\u5229\u7528\u73b0\u5199\u73b0\u7528\u7684 Lambda \u8868\u8fbe\u5f0f\u4f1a\u9020\u6210\u4e00\u4e9b\u4ee3\u7801\u53ef\u8bfb\u6027\u4e0a\u7684\u56f0\u6270\u3002 \u4f8b\u5982\uff1a const auto EnableErrorReporting = [ & ]() { if ( HighLevelWarningEnabled ()) return true ; if ( HighLevelWarningEnabled ()) return UsersWantReporting (); return false ; }(); if ( EnableErrorReporting ) { // ... } \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0cLambda \u4ee3\u7801\u76f8\u5f53\u590d\u6742\uff0c\u9605\u8bfb\u4ee3\u7801\u7684\u5f00\u53d1\u4eba\u5458\u4e0d\u4ec5\u8981\u89e3\u5bc6 Lambda \u662f\u7acb\u5373\u8c03\u7528\u7684\uff0c\u800c\u4e14\u8fd8\u8981\u5bf9 EnableErrorReporting \u7c7b\u578b\u8fdb\u884c\u63a8\u7406\u3002 \u4ed6\u4eec\u53ef\u80fd\u4f1a\u5047\u8bbe EnableErrorReporting \u662f\u95ed\u5305\u5bf9\u8c61\u800c\u4e0d\u4ec5\u4ec5\u662f\u4e00\u4e2a\u5e38\u91cf\u53d8\u91cf\u3002 \u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\uff0c\u60a8\u53ef\u80fd\u4f1a\u8003\u8651\u4e0d\u4f7f\u7528 auto \uff0c\u4ee5\u4fbf\u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u67e5\u770b\u7c7b\u578b\u3002 \u751a\u81f3\u53ef\u4ee5\u5728 }() \u65c1\u8fb9\u6dfb\u52a0\u6ce8\u91ca\uff0c\u4f8b\u5982 // call it now \u3002 \u5728 C++17 \u7ae0\u8282\u6211\u4eec\u4f1a\u9047\u5230\u4e00\u4e2a\u201c\u5347\u7ea7\u7248\u201d\u7684 IIFE\u3002","title":"\u53ef\u8bfb\u6027\u63d0\u793a"},{"location":"Chapter2/#8-lambda-\u7ee7\u627f","text":"\u4e5f\u8bb8\u4f60\u4f1a\u6709\u4e9b\u5403\u60ca\uff0cLambda \u5c45\u7136\u8fd8\u53ef\u4ee5\u6d3e\u751f\uff1f \u7531\u4e8e\u7f16\u8bd1\u5668\u5c06 Lambda \u6269\u5c55\u4e3a\u4e86\u4e00\u4e2a\u4eff\u51fd\u6570\u5bf9\u8c61\uff0c\u5e76\u91cd\u8f7d\u4e86\u5176\u8c03\u7528\u64cd\u4f5c\u7b26 () \uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4ece\u8fd9\u70b9\u53bb\u7ee7\u627f Lambda\u3002 \u6765\u770b\u770b\u4e00\u4e2a\u57fa\u7840\u4ee3\u7801\uff1a \u4ee3\u7801 2-25 \u4ece\u5355\u4e2a Lambda \u4e2d\u7ee7\u627f #include <iostream> template < typename Callable > class ComplexFunctor : public Callable { public : explicit ComplexFunctor ( Callable f ) : Callable ( f ) {} }; template < typename Callable > ComplexFunctor < Callable > MakeComplexFunctor ( Callable && cal ) { return ComplexFunctor < Callable > ( cal ); } int main () { const auto func = MakeComplexFunctor ([]() { std :: cout << \"Hello Functor!\" ; }); func (); } \u8fd9\u6bb5\u4ee3\u7801\u4e2d\uff0c\u6709\u4e00\u4e2a ComplexFunctor \u7c7b\uff0c\u5b83\u6d3e\u751f\u81ea Callable \uff0c\u5b83\u662f\u4e00\u4e2a\u6a21\u677f\u53c2\u6570\u3002\u5982\u679c\u6211\u4eec\u60f3\u4ece Lambda \u6d3e\u751f\uff0c\u6211\u4eec\u9700\u8981\u505a\u4e00\u4e2a\u5c0f\u6280\u5de7\uff0c\u56e0\u4e3a\u6211\u4eec\u65e0\u6cd5\u62fc\u51fa\u95ed\u5305\u7c7b\u578b\u7684\u786e\u5207\u7c7b\u578b\uff08\u9664\u975e\u6211\u4eec\u5c06\u5b83\u5305\u88c5\u5230 std::function \u4e2d\uff09\u3002 \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u9700\u8981\u53ef\u4ee5\u6267\u884c\u6a21\u677f\u53c2\u6570\u63a8\u5bfc\u5e76\u83b7\u53d6 Lambda \u95ed\u5305\u7c7b\u578b\u7684 MakeComplexFunctor \u51fd\u6570\u3002 \u9664\u4e86\u540d\u79f0\u4e4b\u5916\uff0c ComplexFunctor \u53ea\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u5305\u88c5\u5668\uff0c\u6ca1\u6709\u591a\u5927\u7528\u5904\u3002\u662f\u5426\u6709\u6b64\u7c7b\u4ee3\u7801\u6a21\u5f0f\u7684\u7528\u4f8b\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u6269\u5c55\u4e0a\u9762\u7684\u4ee3\u7801\u5e76\u7ee7\u627f\u4e24\u4e2a Lambdas \u5e76\u521b\u5efa\u4e00\u4e2a\u91cd\u8f7d\u96c6\uff1a \u4ee3\u7801 2-25 \u4ece\u4e24\u4e2a Lambda \u4e2d\u7ee7\u627f #include <iostream> template < typename TCall , typename UCall > class SimpleOverloaded : public TCall , UCall { public : SimpleOverloaded ( TCall tf , UCall uf ) : TCall ( tf ), UCall ( uf ) {} using TCall :: operator (); using UCall :: operator (); }; template < typename TCall , typename UCall > SimpleOverloaded < TCall , UCall > MakeOverloaded ( TCall && tf , UCall && uf ) { return SimpleOverloaded < TCall , UCall > ( tf , uf ); } int main () { const auto func = MakeOverloaded ( []( int ) { std :: cout << \"Int! \\n \" ; }, []( float ) { std :: cout << \"Float! \\n \" ; }); func ( 10 ); func ( 10.0f ); } \u8fd9\u6b21\u6211\u4eec\u6709\u66f4\u591a\u7684\u4ee3\u7801\uff1a\u6211\u4eec\u4ece\u4e24\u4e2a\u6a21\u677f\u53c2\u6570\u6d3e\u751f\uff0c\u4f46\u6211\u4eec\u8fd8\u9700\u8981\u663e\u5f0f\u5730\u516c\u5f00\u5b83\u4eec\u7684\u8c03\u7528\u8fd0\u7b97\u7b26\u3002 \u8fd9\u662f\u4e3a\u4ec0\u4e48\u5462\uff1f\u8fd9\u662f\u56e0\u4e3a\u5728\u5bfb\u627e\u6b63\u786e\u7684\u51fd\u6570\u91cd\u8f7d\u65f6\uff0c\u7f16\u8bd1\u5668\u8981\u6c42\u5019\u9009\u5bf9\u8c61\u5728\u540c\u4e00\u8303\u56f4\u5185\u3002 \u4e3a\u4e86\u7406\u89e3\u8fd9\u4e00\u70b9\uff0c\u8ba9\u6211\u4eec\u7f16\u5199\u4e00\u4e2a\u6d3e\u751f\u81ea\u4e24\u4e2a\u57fa\u7c7b\u7684\u7b80\u5355\u7c7b\u578b\u3002 \u8be5\u793a\u4f8b\u8fd8\u6ce8\u91ca\u6389\u4e86\u4e24\u4e2a using \u8bed\u53e5\u3002 #include <iostream> struct BaseInt { void Func ( int ) { std :: cout << \"BaseInt... \\n \" ; } }; struct BaseDouble { void Func ( double ) { std :: cout << \"BaseDouble... \\n \" ; } }; struct Derived : public BaseInt , BaseDouble { // using BaseInt::Func; // using BaseDouble::Func; }; int main () { Derived d ; d . Func ( 10.0 ); } \u6211\u4eec\u6709\u4e24\u4e2a\u5b9e\u73b0 Func \u7684\u57fa\u7c7b\u3002\u6211\u4eec\u60f3\u4ece\u6d3e\u751f\u5bf9\u8c61\u8c03\u7528\u8fd9\u4e2a Func \u65b9\u6cd5\u3002 GCC \u7f16\u8bd1\u4fbf\u4f1a\u62a5\u51fa\u9519\u8bef\uff1a error:request formember 'Func' is ambiguous \u56e0\u4e3a\u6211\u4eec\u6ce8\u91ca\u6389\u4e86\u5168\u90e8\u7684\u58f0\u660e\u6765\u81ea BaseInt \u548c BaseDouble \u7684 ::Func \u7684 using \u8bed\u53e5\u3002 \u7f16\u8bd1\u5668\u6709\u4e24\u4e2a\u4f5c\u7528\u57df\u6765\u641c\u7d22\u6700\u4f73\u5019\u9009\uff0c\u6839\u636e\u6807\u51c6\uff0c\u8fd9\u662f\u4e0d\u5141\u8bb8\u7684\u3002 \u597d\u5427\uff0c\u8ba9\u6211\u4eec\u56de\u5230\u6211\u4eec\u7684\u66f4\u4e0a\u9762\u90a3\u4e2a\u4f8b\u5b50\uff1a SimpleOverloaded \u662f\u4e00\u4e2a\u57fa\u672c\u7c7b\uff0c\u5b83\u4e0d\u662f\u751f\u4ea7\u5c31\u7eea\u7684\u3002 \u770b\u770b C++17 \u7ae0\uff0c\u6211\u4eec\u5c06\u8ba8\u8bba\u6b64\u6a21\u5f0f\u7684\u9ad8\u7ea7\u7248\u672c\u3002 \u591a\u4e8f\u4e86 C++17 \u7684\u51e0\u4e2a\u7279\u6027\uff0c\u6211\u4eec\u5c06\u80fd\u591f\u4ece\u591a\u4e2a Lambda \u7ee7\u627f\uff08\u611f\u8c22\u53ef\u53d8\u53c2\u6570\u6a21\u677f\uff09\u5e76\u5229\u7528\u66f4\u591a\u7684\u7d27\u51d1\u8bed\u6cd5\uff01","title":"8. Lambda \u7ee7\u627f"},{"location":"Chapter2/#9-\u5728\u5bb9\u5668\u4e2d\u5b58\u50a8-lambda","text":"\u4f5c\u4e3a\u672c\u7ae0\u7684\u6700\u540e\u4e00\u4e2a\u6280\u5de7\uff0c\u8ba9\u6211\u4eec\u6765\u770b\u770b\u5728\u5bb9\u5668\u4e2d\u5b58\u50a8\u95ed\u5305\u7684\u95ee\u9898\u3002 \u4f46\u662f\u6211\u4e0d\u662f\u5199\u8fc7\u4e0d\u80fd\u9ed8\u8ba4\u521b\u5efa\u548c\u5206\u914d Lambdas \u5417\uff1f \u662f\u7684\u2026\u2026\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u5728\u8fd9\u91cc\u505a\u4e00\u4e9b\u6280\u5de7\u3002 \u6280\u672f\u4e4b\u4e00\u662f\u5229\u7528\u8f6c\u6362\u4e3a\u51fd\u6570\u6307\u9488\u7684\u65e0\u72b6\u6001 Lambda \u7684\u5c5e\u6027\u3002 \u867d\u7136\u60a8\u4e0d\u80fd\u76f4\u63a5\u5b58\u50a8\u95ed\u5305\u5bf9\u8c61\uff0c\u4f46\u60a8\u53ef\u4ee5\u4fdd\u5b58\u4ece Lambda \u8868\u8fbe\u5f0f\u8f6c\u6362\u800c\u6765\u7684\u51fd\u6570\u6307\u9488\u3002 \u4f8b\u5982\uff1a \u4ee3\u7801 2-26 \u5c06 Lambda \u5b58\u4e3a\u51fd\u6570\u6307\u9488 #include <iostream> #include <vector> int main () { using TFunc = void ( * )( int & ); std :: vector < TFunc > ptrFuncVec ; ptrFuncVec . push_back ([]( int & x ) { std :: cout << x << '\\n' ; }); ptrFuncVec . push_back ([]( int & x ) { x *= 2 ; }); ptrFuncVec . push_back ( ptrFuncVec [ 0 ]); // print it again; int x = 10 ; for ( const auto & entry : ptrFuncVec ) entry ( x ); } \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u5c06\u5e94\u7528\u4e8e\u53d8\u91cf\u7684\u51fd\u6570\u5411\u91cf\u3002\u5bb9\u5668\u4e2d\u6709\u4e09\u4e2a\u6761\u76ee\uff1a \u7b2c\u4e00\u4e2a\u6253\u5370\u8f93\u5165\u53c2\u6570\u7684\u503c\u3002 \u7b2c\u4e8c\u4e2a\u4fee\u6539\u503c\u3002 \u7b2c\u4e09\u4e2a\u662f\u7b2c\u4e00\u4e2a\u7684\u526f\u672c\uff0c\u56e0\u6b64\u5b83\u4e5f\u6253\u5370\u503c\u3002 \u8be5\u89e3\u51b3\u65b9\u6848\u6709\u6548\uff0c\u4f46\u4ec5\u9650\u4e8e\u65e0\u72b6\u6001 Lambda\u3002 \u5982\u679c\u6211\u4eec\u60f3\u89e3\u9664\u8fd9\u4e2a\u9650\u5236\u600e\u4e48\u529e\uff1f \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u91cd\u5ea6\u52a9\u624b\uff1a std::function \u3002 \u4e3a\u4e86\u4f7f\u793a\u4f8b\u6709\u8da3\uff0c\u5b83\u8fd8\u4ece\u7b80\u5355\u7684\u6574\u6570\u5207\u6362\u5230\u5904\u7406 std::string objects \u7684 Lambdas\uff1a \u4ee3\u7801 2-27 \u5c06 Lambda \u5b58\u4e3a std::function #include <algorithm> #include <functional> #include <iostream> #include <vector> int main () { std :: vector < std :: function < std :: string ( const std :: string & ) >> vecFilters ; size_t removedSpaceCounter = 0 ; const auto removeSpacesCnt = [ & removedSpaceCounter ]( const std :: string & str ) { std :: string tmp ; std :: copy_if ( str . begin (), str . end (), std :: back_inserter ( tmp ), []( char ch ) { return ! isspace ( ch ); }); removedSpaceCounter += str . length () - tmp . length (); return tmp ; }; const auto makeUpperCase = []( const std :: string & str ) { std :: string tmp = str ; std :: transform ( tmp . begin (), tmp . end (), tmp . begin (), []( unsigned char c ){ return std :: toupper ( c ); }); return tmp ; }; vecFilters . emplace_back ( removeSpacesCnt ); vecFilters . emplace_back ([]( const std :: string & x ) { return x + \" Amazing\" ; }); vecFilters . emplace_back ([]( const std :: string & x ) { return x + \" Modern\" ; }); vecFilters . emplace_back ([]( const std :: string & x ) { return x + \" C++\" ; }); vecFilters . emplace_back ([]( const std :: string & x ) { return x + \" World!\" ; }); vecFilters . emplace_back ( makeUpperCase ); const std :: string str = \" H e l l o \" ; auto temp = str ; for ( const auto & entryFunc : vecFilters ) temp = entryFunc ( temp ); std :: cout << temp ; std :: cout << \" \\n removed spaces: \" << removedSpaceCounter << '\\n' ; } \u8f93\u51fa\uff1a HELLO AMAZING MODERN C++ WORLD! removed spaces: 12 \u8fd9\u6b21\u6211\u4eec\u5c06 std::function<std::string(const std::string&)> \u5b58\u50a8\u5728\u5bb9\u5668\u4e2d\u3002 \u8fd9\u5141\u8bb8\u6211\u4eec\u4f7f\u7528\u4efb\u4f55\u7c7b\u578b\u7684\u51fd\u6570\u5bf9\u8c61\uff0c\u5305\u62ec\u5e26\u6709\u6355\u83b7\u53d8\u91cf\u7684 Lambda \u8868\u8fbe\u5f0f\u3002 \u5176\u4e2d\u4e00\u4e2a lambda removeSpacesCnt \u6355\u83b7\u4e00\u4e2a\u53d8\u91cf\uff0c\u8be5\u53d8\u91cf\u7528\u4e8e\u5b58\u50a8\u6709\u5173\u4ece\u8f93\u5165\u5b57\u7b26\u4e32\u4e2d\u5220\u9664\u7684\u7a7a\u683c\u7684\u4fe1\u606f\u3002","title":"9. \u5728\u5bb9\u5668\u4e2d\u5b58\u50a8 Lambda"},{"location":"Chapter2/#10-\u603b\u7ed3","text":"\u5728\u672c\u7ae0\u4e2d\uff0c\u60a8\u5b66\u4e60\u4e86\u5982\u4f55\u521b\u5efa\u548c\u4f7f\u7528 Lambda \u8868\u8fbe\u5f0f\u3002\u6211\u63cf\u8ff0\u4e86 Lambda \u7684\u8bed\u6cd5\u3001\u6355\u83b7\u5b50\u53e5\u3001\u7c7b\u578b\uff0c\u5e76\u4e14\u6211\u4eec\u6db5\u76d6\u4e86\u8bb8\u591a\u793a\u4f8b\u548c\u7528\u4f8b\u3002 \u6211\u4eec\u751a\u81f3\u66f4\u8fdb\u4e00\u6b65\uff0c\u6211\u5411\u60a8\u5c55\u793a\u4e86\u4ece Lambda \u6d3e\u751f\u6216\u5c06\u5176\u5b58\u50a8\u5728\u5bb9\u5668\u4e2d\u7684\u6a21\u5f0f\u3002 \u4f46\u8fd9\u8fd8\u4e0d\u662f\u5168\u90e8\uff01 Lambda \u8868\u8fbe\u5f0f\u6210\u4e3a\u73b0\u4ee3 C++ \u7684\u91cd\u8981\u7ec4\u6210\u90e8\u5206\u3002 \u968f\u7740\u5e94\u7528\u573a\u666f\u8d8a\u6765\u8d8a\u591a\uff0c\u5f00\u53d1\u4eba\u5458\u4e5f\u770b\u5230\u4e86\u6539\u8fdb\u6b64\u529f\u80fd\u7684\u53ef\u80fd\u6027\u3002 \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u60a8\u73b0\u5728\u53ef\u4ee5\u8f6c\u5230\u4e0b\u4e00\u7ae0\u5e76\u67e5\u770b ISO \u59d4\u5458\u4f1a\u5728 C++14 \u4e2d\u6dfb\u52a0\u7684\u91cd\u8981\u66f4\u65b0\u7684\u539f\u56e0\u3002","title":"10. \u603b\u7ed3"},{"location":"Chapter3/","text":"\u4e09\u3001Lambda in C++14 C++14 \u4e3a Lambda \u8868\u8fbe\u5f0f\u63d0\u4f9b\u4e86\u4e24\u4e2a\u663e\u8457\u7684\u589e\u5f3a\u7279\u6027 \u5e26\u6709\u521d\u59cb\u5316\u7684\u6355\u83b7 \u6cdb\u578b Lambda \u6b64\u5916\uff0c\u8be5\u6807\u51c6\u8fd8\u66f4\u65b0\u4e86\u4e00\u4e9b\u89c4\u5219\uff0c\u4f8b\u5982\uff1a Lambda \u8868\u8fbe\u5f0f\u7684\u9ed8\u8ba4\u53c2\u6570 auto \u8fd4\u56de\u7c7b\u578b \u8fd9\u4e9b\u65b0\u589e\u7279\u6027\u53ef\u4ee5\u5728 N4140 \u4e2d\u7684 Lambda \u90e8\u5206 [expr.prim.lambda] \u627e\u5230\u3002 \u5728\u672c\u7ae0\u4e2d\uff0c\u4f60\u5c06\u5b66\u5230\uff1a \u6355\u83b7\u6210\u5458\u53d8\u91cf \u7528\u73b0\u4ee3 C++ \u6280\u672f\u4ee3\u66ff\u65e7\u529f\u80fd\uff0c\u5982 std::bind1st LIFTING \u9012\u5f52 Lambda 1. \u4e3a Lambda \u589e\u52a0\u9ed8\u8ba4\u53c2\u6570 \u8ba9\u6211\u4eec\u4ece\u5c0f\u7684\u53d8\u5316\u8bf4\u8d77\u5427\uff1a \u5728 C++14 \u4e2d\uff0c\u4f60\u53ef\u4ee5\u5728 Lambda \u8c03\u7528\u4e2d\u4f7f\u7528\u9ed8\u8ba4\u53c2\u6570\u4e86\u3002\u8fd9\u4e00\u5c0f\u5c0f\u7684\u66f4\u65b0\u8ba9 Lambda \u51fd\u6570\u66f4\u50cf\u4e00\u4e2a\u5e38\u89c4\u51fd\u6570\u4e86\u3002 \u4ee3\u7801 3-1 \u5e26\u6709\u9ed8\u8ba4\u53c2\u6570\u7684 Lambda #include <iostream> int main () { const auto lam = []( int x = 10 ) { std :: cout << x << '\\n' ; }; lam (); lam ( 100 ); } \u89c1\u7528\u4f8b\u6240\u793a\uff0c\u6211\u4eec\u53ef\u4ee5\u8c03\u7528\u8fd9\u4e2a Lambda \u4e24\u6b21\uff1a\u7b2c\u4e00\u6b21\u4e0d\u643a\u5e26\u4efb\u4f55\u53c2\u6570\uff0c\u7ed3\u679c\u5c06\u8f93\u51fa\u9ed8\u8ba4\u7684 10 \uff0c\u7b2c\u4e8c\u6b21\u6211\u4eec\u4f20\u9012\u53c2\u6570 100 \u8fdb\u53bb\uff0c\u7ed3\u679c\u4f1a\u8f93\u51fa 100 \u3002 \u4e0d\u8fc7\uff0c\u8fd9\u4e00\u7279\u6027\u65e9\u5df2\u5728 GCC \u548c Clang \u7684 C++11 \u7248\u672c\u4e2d\u88ab\u652f\u6301\u4e86\u3002 2. \u8fd4\u56de\u7c7b\u578b \u5982\u679c\u4f60\u8fd8\u8bb0\u5f97\u4e4b\u524d\u7ae0\u8282\u7684\u5185\u5bb9\uff0c\u90a3\u4e48\u4f60\u4e00\u5b9a\u77e5\u9053\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u7b80\u5355\u7684 Lambda\uff0c\u7f16\u8bd1\u5668\u53ef\u4ee5\u63a8\u65ad\u51fa\u5b83\u7684\u8fd4\u56de\u7c7b\u578b\u3002 \u8fd9\u4e2a\u529f\u80fd\u662f\u5728\u5e38\u89c4\u51fd\u6570\u4e0a\u201c\u6269\u5c55\u201d\u7684\uff0c\u5728 C++14 \u4e2d\u4f60\u53ef\u4ee5\u4f7f\u7528 auto \u4f5c\u4e3a\u8fd4\u56de\u7c7b\u578b auto myFunction () { int x = computeX (...); int y = computeY (...); return x + y ; } \u5982\u4e0a\uff0c\u7f16\u8bd1\u5668\u4f1a\u63a8\u65ad\u8fd4\u56de\u7c7b\u578b\u4e3a int \u3002 \u63a8\u65ad\u8fd4\u56de\u7c7b\u578b\u7684\u8fd9\u90e8\u5206\u5185\u5bb9\u5728 C++14 \u4e2d\u5f97\u5230\u4e86\u6539\u5584\u548c\u6269\u5c55\u3002\u5bf9\u4e8e Lambda \u8868\u8fbe\u5f0f\u6765\u8bf4\uff0c\u8fd9\u610f\u5473\u7740\u4ed6\u4eec\u53ef\u4ee5\u548c\u5e38\u89c4\u51fd\u6570\u4eab\u6709\u540c\u6837\u7684 auto \u8fd4\u56de\u7c7b\u578b\uff08 [expr.prim.lambda] \uff09\uff1a \u5982\u679c Lambda \u8fd4\u56de\u7c7b\u578b\u662f auto \uff0c\u90a3\u4e48\u5b83\u4f1a\u88ab\u5c3e\u90e8\u8fd4\u56de\u7c7b\u578b\u6240\u66ff\u4ee3\uff08\u5982\u679c\u63d0\u4f9b\u4e86\uff09\u6216\u8005\u4ece return \u8bed\u53e5\u4e2d\u63a8\u5bfc\u3002\u8be6\u89c1 [dcl.spec.auto] \u5982\u679c\u5728 Lambda \u4e2d\u6709\u591a\u6761\u8fd4\u56de\u8bed\u53e5\uff0c\u4ed6\u4eec\u5fc5\u987b\u80fd\u591f\u63a8\u65ad\u51fa\u540c\u6837\u7684\u7c7b\u578b\uff1a auto foo = []( int x ){ if ( x < 0 ) return x * 1.1f else return x * 2.1 } \u8fd9\u6bb5\u4ee3\u7801\u5c31\u65e0\u6cd5\u6210\u529f\u7f16\u8bd1\u4e86\uff0c\u56e0\u4e3a\u7b2c\u4e00\u6761\u8fd4\u56de\u8bed\u53e5\u8fd4\u56de float \u7c7b\u578b\u4f46\u7b2c\u4e8c\u6761\u8fd4\u56de double \u7c7b\u578b\u3002 \u7f16\u8bd1\u5668\u65e0\u6cd5\u51b3\u5b9a\u51fa\u5230\u5e95\u5e94\u8be5\u5c06\u8fd4\u56de\u7c7b\u578b\u5b9a\u4e3a\u54ea\u4e2a\uff0c\u6240\u4ee5\u60a8\u5fc5\u987b\u9009\u62e9\u5176\u4e2d\u4e00\u4e2a\uff0c\u4fdd\u8bc1\u8fd4\u56de\u7c7b\u578b\u7684\u552f\u4e00\u6027\u3002 \u5c3d\u7ba1\u63a8\u65ad\u6574\u5f62\u548c\u53cc\u7cbe\u5ea6\u578b\u4e5f\u662f\u5f88\u6709\u7528\u7684\uff0c\u4f46\u662f\u63a8\u65ad\u8fd4\u56de\u7c7b\u578b\u4e4b\u6240\u4ee5\u6709\u66f4\u663e\u8457\u7684\u4ef7\u503c\uff0c\u662f\u56e0\u4e3a\u5b83\u53ef\u4ee5\u5728\u6a21\u677f\u4ee3\u7801\u8fd9\u79cd\u201c\u672a\u77e5\u201d\u9886\u57df\u53d1\u6325\u6781\u5927\u5730\u5728\u4f5c\u7528\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0cLambda \u95ed\u5305\u7c7b\u578b\u662f\u533f\u540d\u7684\uff0c\u5e76\u4e14\u6211\u4eec\u65e0\u6cd5\u663e\u5f0f\u7684\u660e\u786e\u5b83\u3002 \u4f46\u662f\u5982\u679c\u4f60\u60f3\u4ece\u51fd\u6570\u4e2d\u8fd4\u56de\u4e00\u4e2a Lambda \u5462\uff1f\u4f60\u8981\u5982\u4f55\u660e\u660e\u786e\u8fd9\u4e2a\u7c7b\u578b\uff1f \u5728 C++14 \u4e4b\u524d\uff0c\u4f60\u53ef\u4ee5\u7528 std::function \uff1a \u4ee3\u7801 3-2 \u8fd4\u56de std::function #include <functional> #include <iostream> std :: function < int ( int ) > CreateMulLambda ( int x ) { return [ x ]( int param ) noexcept { return x * param ; }; } int main () { const auto lam = CreateMulLambda ( 10 ); std :: cout << sizeof ( lam ); return lam ( 2 ); } \u7136\u800c\uff0c\u4e0a\u9762\u8fd9\u79cd\u65b9\u6cd5\u5e76\u4e0d\u8db3\u591f\u76f4\u63a5\u3002\u5b83\u8981\u6c42\u4f60\u660e\u786e\u4e86\u4e00\u4e2a\u51fd\u6570\u7b7e\u540d\uff0c\u751a\u81f3\u5305\u542b\u4e86\u989d\u5916\u7684\u5934\u6587\u4ef6 <functional> \u3002\u5982\u679c\u4f60\u8fd8\u8bb0\u5f97 C++11 \u7684\u5185\u5bb9\u7684\u8bdd\uff0c std::function \u662f\u4e00\u4e2a\u201c\u7b28\u91cd\u201d\u7684\u5bf9\u8c61\uff08\u5728 GCC9 \u4e2d\uff0c function \u7684 sizeof \u662f 32 bytes\uff09\u3002\u5e76\u4e14\uff0c\u5b83\u9700\u8981\u4e00\u4e9b\u9ad8\u7ea7\u7684\u5185\u90e8\u673a\u5236\uff0c\u4ee5\u4fbf\u5b83\u53ef\u4ee5\u5904\u7406\u4efb\u4f55\u53ef\u8c03\u7528\u7684\u5bf9\u8c61\u3002 \u611f\u8c22 C++14 \u5e26\u6765\u7684\u6539\u8fdb\uff0c\u6211\u4eec\u53ef\u4ee5\u6781\u5927\u7684\u7b80\u5316\u4e0a\u9762\u7684\u4ee3\u7801\uff1a \u4ee3\u7801 3-3 Lambda \u63a8\u65ad\u7684 auto \u8fd4\u56de\u7c7b\u578b #include <iostream> auto CreateMulLambda ( int x ) noexcept { return [ x ]( int param ) noexcept { return x * param ; }; } int main () { const auto lam = CreateMulLambda ( 10 ); std :: cout << sizeof ( lam ); return lam ( 2 ); } \u73b0\u5728\u6211\u4eec\u5c31\u53ef\u4ee5\u5b8c\u5168\u4f9d\u9760\u7f16\u8bd1\u65f6\u7684\u7c7b\u578b\u63a8\u5bfc\uff0c\u4e0d\u9700\u8981\u5176\u4ed6\u8f85\u52a9\u7c7b\u578b\u3002 \u5728 GCC \u4e0a\uff0c\u6700\u540e lam \u8fd9\u4e2a\u8fd4\u56de\u7684 Lambda \u5bf9\u8c61\u7684\u5927\u5c0f\u4ec5\u4e3a 4 \u5b57\u8282\uff0c\u5e76\u4e14\u6bd4\u4f7f\u7528 std::function \u7684\u89e3\u51b3\u65b9\u6848\u4fbf\u5b9c\u5f97\u591a\u3002 \u8fd9\u91cc\u6709\u4e00\u70b9\u9700\u8981\u6ce8\u610f\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u5c06 CreateMulLambda \u6807\u8bb0\u4e3a noexcept \uff0c\u8fd9\u6837\u65e0\u8bba\u5982\u4f55\u5b83\u90fd\u4e0d\u53ef\u4ee5\u629b\u51fa\u4efb\u4f55\u5f02\u5e38\u3002 \u4f46\u662f std::function \u5c31\u4e0d\u884c\u4e86\u3002 3. \u5e26\u6709\u521d\u59cb\u5316\u7684\u6355\u83b7 \u73b0\u5728\u6211\u4eec\u6765\u8bb2\u8bb2\u66f4\u52a0\u5177\u6709\u5efa\u8bbe\u6027\u7684\u66f4\u65b0\u3002 \u4f60\u4e00\u5b9a\u8bb0\u5f97\uff0c\u5728 Lambda \u8868\u8fbe\u5f0f\u4e2d\uff0c\u4f60\u53ef\u4ee5\u4ece\u5916\u90e8\u8303\u56f4\u4e2d\u6355\u83b7\u53d8\u91cf\u3002 \u7f16\u8bd1\u5668\u4f1a\u62d3\u5c55\u4f60\u7684\u6355\u83b7\u8bed\u6cd5\u5e76\u4e14\u5728\u95ed\u5305\u7c7b\u578b\u4e2d\u521b\u5efa\u6210\u5458\u53d8\u91cf\uff08\u975e\u9759\u6001\u6570\u636e\u6210\u5458\uff09\u3002 \u73b0\u5728\u5728 C++14 \u4e2d\uff0c\u4f60\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6210\u5458\u53d8\u91cf\u5e76\u4e14\u5728\u6355\u83b7\u8bed\u53e5\u4e2d\u521d\u59cb\u5316\u4ed6\u4eec\u3002 \u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u5728 Lambda \u5185\u90e8\u8bbf\u95ee\u90a3\u4e9b\u53d8\u91cf\u4e86\u3002 \u8fd9\u53eb\u505a \u901a\u8fc7\u521d\u59cb\u5316\u5668\u6355\u83b7 \u6216\u8005\u4f60\u4e5f\u53ef\u4ee5\u7528\u53e6\u4e00\u4e2a\u540d\u5b57 \u5e7f\u4e49 Lambda \u6355\u83b7 \u3002 \u770b\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a \u4ee3\u7801 3-4 \u901a\u8fc7\u521d\u59cb\u5316\u5668\u6355\u83b7 #include <iostream> int main () { int x = 30 ; int y = 12 ; const auto foo = [ z = x + y ]() { std :: cout << z << '\\n' ; }; x = 0 ; y = 0 ; foo (); } \u8f93\u51fa\u4e3a 42 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u7f16\u8bd1\u4f1a\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u6210\u5458\u53d8\u91cf\u5e76\u4e14\u5c06\u5176\u521d\u59cb\u5316\u4e3a x + y \u3002 \u8fd9\u4e2a\u65b0\u53d8\u91cf\u7684\u7c7b\u578b\u4f1a\u88ab\u81ea\u52a8\u63a8\u65ad\u51fa\u6765\uff0c\u5373\u4fbf\u4f60\u5728\u53d8\u91cf\u524d\u52a0\u4e0a\u4e86 auto \u5173\u952e\u5b57\uff1a auto z = x + y \u603b\u4e4b\uff0c\u524d\u9762\u793a\u4f8b\u4e2d\u7684 Lambda \u4f1a\u88ab\u89e3\u6790\u4e3a\u4ee5\u4e0b\uff08\u7b80\u5316\u7684\uff09\u4eff\u51fd\u6570\uff1a struct _unnamedLambda { void operator ()() const { std :: cout << z << '\\n' ; } int z ; } someInstance ; \u5f53 Lambda \u7684\u8868\u8fbe\u5f0f\u5b9a\u4e49\u5b8c\u6210\u65f6\uff0c z \u5c06\u4f1a\u88ab\u76f4\u63a5\u521d\u59cb\u5316 x + y \u3002 \u4e0a\u9762\u8fd9\u53e5\u7684\u542b\u4e49\u5c31\u662f\uff1a\u65b0\u53d8\u91cf\u5728\u4f60\u5b9a\u4e49 Lambda \u7684\u5730\u65b9\u521d\u59cb\u5316\uff0c\u800c\u4e0d\u662f\u4f60\u8c03\u7528\u5b83\u7684\u5730\u65b9\u3002 \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u5982\u679c\u4f60\u5728\u521b\u5efa Lambda \u540e\u4fee\u6539 x \u6216\u8005 y \u53d8\u91cf\uff0c\u53d8\u91cf z \u7684\u503c\u4e0d\u4f1a\u6539\u53d8\u3002 \u5728\u793a\u4f8b\u4e2d\uff0c\u4f60\u53ef\u4ee5\u770b\u5230\u5728\u5b9a\u4e49 Lambda \u4e4b\u540e\uff0c\u6211\u7acb\u5373\u66f4\u6539\u4e86 x \u548c y \u7684\u503c\u3002 \u7136\u800c\uff0c\u8f93\u51fa\u4ecd\u5c06\u662f 42\uff0c\u56e0\u4e3a z \u5728\u8fd9\u4e4b\u524d\u5c31\u5df2\u7ecf\u88ab\u521d\u59cb\u5316\u3002 \u5f53\u7136\uff0c\u901a\u8fc7\u521d\u59cb\u5316\u5668\u521b\u5efa\u53d8\u91cf\u4e5f\u53ef\u4ee5\u662f\u7075\u6d3b\u7684\uff0c\u4e0d\u59a8\u770b\u770b\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\uff1a\u521b\u5efa\u4e00\u4e2a\u5916\u90e8\u8303\u56f4\u7684\u5f15\u7528\u53d8\u91cf\u3002 \u4ee3\u7801 3-5 \u901a\u8fc7\u521d\u59cb\u5316\u5668\u8fdb\u884c\u5f15\u7528\u6355\u83b7 #include <iostream> int main () { int x = 30 ; const auto foo = [ & z = x ]() { std :: cout << z << '\\n' ; }; foo (); x = 0 ; foo (); } \u8fd9\u6b21\uff0c\u53d8\u91cf z \u662f\u5f15\u7528\u81ea\u53d8\u91cf x \uff0c\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u5199\u6210\u8fd9\u6837 auto & z = x \u3002 \u5982\u679c\u8fd0\u884c\u8fd9\u6bb5\u4ee3\u7801\uff0c\u4f60\u5e94\u8be5\u53ef\u4ee5\u770b\u5230\uff0c\u7b2c\u4e00\u884c\u4f1a\u8f93\u51fa 30\uff0c\u4f46\u662f\u7b2c\u4e8c\u884c\u4f1a\u8f93\u51fa 0 \u3002 \u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u8fdb\u884c\u4e86\u4e00\u4e2a\u5f15\u7528\u6355\u83b7\uff0c\u5f53\u4f60\u4fee\u6539\u4e86\u5f15\u7528\u5185\u5bb9\u65f6\uff0c\u5bf9\u8c61 z \u81ea\u7136\u4e5f\u4f1a\u968f\u4e4b\u53d8\u5316\u3002 \u9650\u5236 \u9700\u8981\u6ce8\u610f\uff0c\u5728\u4f7f\u7528\u521d\u59cb\u5316\u5668\u6355\u83b7\u65f6\uff0c\u6709\u4e00\u4e9b\u9650\u5236\uff1a \u4e00\u4e2a\u662f\uff0c\u5f53\u4f60\u901a\u8fc7\u521d\u59cb\u5316\u5668\u8fdb\u884c\u5f15\u7528\u6355\u83b7\u65f6\uff0c\u5979\u4e0d\u53ef\u80fd\u5199\u5165\u4e00\u4e2a\u53f3\u503c\u5f15\u7528 && \u3002\u8fd9\u662f\u56e0\u4e3a\u5982\u4e0b\u7684\u4ee3\u7801\u76ee\u524d\u662f\u975e\u6cd5\u7684\uff1a [ && z = x ] //\u975e\u6cd5\u8bed\u6cd5 \u53e6\u4e00\u4e2a\u8be5\u7279\u6027\u7684\u9650\u5236\u662f\uff0c\u5b83\u4e0d\u5141\u8bb8\u4f20\u5165\u53c2\u6570\u5305\u3002\u5728\u6761\u6b3e [expr.prim.lambda] \u7684 24 \u8282\u53ef\u4ee5\u9605\u8bfb\u5230\u5982\u4e0b\u5185\u5bb9\uff1a \u5e26\u6709\u7701\u7565\u53f7\u7684\u7b80\u5355\u6355\u83b7\u662f\u5305\u6269\u5c55\uff08 [temp.variadic] \uff09\uff0c\u4f46\u662f init-capture \u5e26\u6709\u7701\u7565\u53f7\u662f\u683c\u5f0f\u9519\u8bef\u3002 \u7b80\u800c\u8a00\u4e4b\uff0c\u5728 C++14 \u4e2d\uff0c\u4f60\u5e76\u4e0d\u80fd\u8fd9\u6837\u5199\u4ee3\u7801\uff1a template < class .. Args > auto captureTest ( Args ... args ) { return lambda = [... capturedArgs = std :: move ( args )](){}; ... \u4f46\u662f\uff0c\u8fd9\u4e2a\u8bed\u6cd5\uff0c\u5728 C++20 \u4e2d\u662f\u652f\u6301\u7684\uff0c\u5982\u679c\u60f3\u63d0\u524d\u4e86\u89e3\uff0c\u53ef\u4ee5\u53c2\u8003 \u8fd9\u4e2a \u3002 \u5bf9\u73b0\u6709\u95ee\u9898\u7684\u6539\u8fdb \u603b\u800c\u8a00\u4e4b\uff0c\u8fd9\u4e2a\u65b0\u7684 C++14 \u7279\u6027\u53ef\u4ee5\u89e3\u51b3\u4e00\u4e9b\u95ee\u9898\uff0c\u4f8b\u5982 \u4ec5\u53ef\u79fb\u52a8\u7c7b\u578b \u6216 \u5141\u8bb8\u4e00\u4e9b\u989d\u5916\u7684\u4f18\u5316\u3002 Move \u79fb\u52a8 \u5728 C++11 \u4e2d\uff0c\u4f60\u65e0\u6cd5\u901a\u8fc7\u503c\u6355\u83b7\u7684\u65b9\u5f0f\u6355\u83b7\u4e00\u4e2a\u552f\u4e00\u6307\u9488\uff08 unique_pointer \uff09\uff0c\u53ea\u80fd\u8fdb\u884c\u5f15\u7528\u6355\u83b7\u3002\u4f46\u662f\u73b0\u5728\u5728 C++14 \u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u79fb\u52a8\u4e00\u4e2a\u5bf9\u8c61\u5230\u95ed\u5305\u7c7b\u578b\u7684\u6210\u5458\u4e2d\uff1a \u4ee3\u7801 3-6 \u6355\u83b7\u4e00\u4e2a\u4ec5\u53ef\u79fb\u52a8\u7c7b\u578b #include <iostream> #include <memory> int main () { std :: unique_ptr < int > p ( new int { 10 }); const auto bar = [ ptr = std :: move ( p )] { std :: cout << \"pointer in lambda: \" << ptr . get () << '\\n' ; }; std :: cout << \"pointer in main(): \" << p . get () << '\\n' ; bar (); } \u8f93\u51fa\uff1a pointer in main(): 0 pointer in lambda: 0x1413c20 \u6709\u4e86\u6355\u83b7\u521d\u59cb\u5316\u5668\uff0c\u4f60\u5c31\u53ef\u4ee5\u79fb\u52a8\u4e00\u4e2a\u6307\u9488\u7684\u6240\u6709\u6743\u5230 Lambda \u4e2d\u3002\u5982\u4f60\u6240\u89c1\uff0c\u5728\u4e0a\u9762\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u552f\u4e00\u6307\u9488\u5728\u95ed\u5305\u5bf9\u8c61\u88ab\u521b\u5efa\u540e\u7acb\u5373\u88ab\u8bbe\u4e3a\u4e86 nullptr \u3002 \u4f46\u662f\u5f53\u4f60\u8c03\u7528\u8fd9\u4e2a Lambda \u65f6\uff0c\u4f60\u4f1a\u770b\u89c1\u4e00\u4e2a\u5408\u6cd5\u7684\u5185\u5b58\u5730\u5740\u3002 std::function \u4e2d\u7684\u9677\u9631 \u5728 lambda \u4e2d\u62e5\u6709\u4e00\u4e2a\u4ec5\u53ef\u79fb\u52a8\u7684\u6355\u83b7\u53d8\u91cf\u4f1a\u8ba9\u95ed\u5305\u5bf9\u8c61\u53d8\u5f97\u4e0d\u80fd\u88ab\u62f7\u8d1d\u3002 \u5f53\u4f60\u60f3\u5728 std::function \u4e2d\u5b58\u50a8\u4e00\u4e2a Lambda\uff0c\u800c\u8fd9\u4e2a Lambda \u63a5\u53d7\u4ec5\u53ef\u62f7\u8d1d\u7684\u53ef\u8c03\u7528\u5bf9\u8c61\u7684\u65f6\u5019\uff0c\u5c31\u4f1a\u51fa\u73b0\u95ee\u9898\u3002 \u6211\u4eec\u5728 C++ Insights \u4e0a\u89c2\u5bdf\u4e00\u4e0b\u4e4b\u524d\u7684\u4e00\u4e2a\u4f8b\u5b50\uff08 \u5728\u7ebf\u9884\u89c8 \uff09\uff0c\u4f60\u4f1a\u53d1\u73b0 std::unique_ptr \u662f\u4e00\u4e2a\u95ed\u5305\u7c7b\u578b\u7684\u6210\u5458\u53d8\u91cf\u3002 \u4f46\u662f\uff0c\u62e5\u6709\u4e00\u4e2a\u4ec5\u53ef\u79fb\u52a8\u7684\u6210\u5458\u4f1a\u963b\u6b62\u7f16\u8bd1\u5668\u521b\u5efa\u4e00\u4e2a\u9ed8\u8ba4\u62f7\u8d1d\u6784\u9020\u7684\u3002 \u7b80\u800c\u8a00\u4e4b\uff0c\u8fd9\u6bb5\u4ee3\u7801\u65e0\u6cd5\u7f16\u8bd1\uff1a \u4ee3\u7801 3-7 std::function \u548c std::move std :: unique_ptr < int > p ( new int { 10 }); std :: function < void () > fn = [ ptr = std :: move ( p )](){}; //\u4e0d\u53ef\u7f16\u8bd1 \u5982\u679c\u60a8\u60f3\u8981\u5b8c\u6574\u7684\u7ec6\u8282\uff0c\u60a8\u8fd8\u53ef\u4ee5\u67e5\u770b\u8349\u6848\uff08 P0288 \uff09\u4e2d\u7684 any_invokable\uff0c\u8fd9\u662f std::function \u672a\u6765\u53ef\u80fd\u7684\u6539\u8fdb\uff0c\u5e76\u4e14\u8fd8\u4f1a\u5904\u7406\u4ec5\u53ef\u79fb\u52a8\u7c7b\u578b\u3002 \u4f18\u5316 Optimisation \u6709\u4e00\u4e2a\u5c06\u6355\u83b7\u521d\u59cb\u5316\u5668\u4f5c\u4e3a\u6f5c\u5728\u7684\u6027\u80fd\u4f18\u5316\u7684\u70b9\u5b50\uff1a\u6211\u4eec\u53ef\u4ee5\u5728\u521d\u59cb\u5316\u5668\u4e2d\u8ba1\u7b97\u4e00\u6b21\uff0c\u800c\u4e0d\u662f\u6bcf\u6b21\u8c03\u7528 Lambda \u65f6\u90fd\u8ba1\u7b97\u67d0\u4e2a\u503c\uff1a \u4ee3\u7801 3-8 \u7ed9 Lambda \u521b\u5efa\u4e00\u4e2a string #include <algorithm> #include <iostream> #include <string> #include <vector> int main () { using namespace std :: string_literals ; const std :: vector < std :: string > vs = { \"apple\" , \"orange\" , \"foobar\" , \"lemon\" }; const auto prefix = \"foo\" s ; auto result = std :: find_if ( vs . begin (), vs . end (), [ & prefix ]( const std :: string & s ) { return s == prefix + \"bar\" s ; }); if ( result != vs . end ()) std :: cout << prefix << \"-something found! \\n \" ; result = std :: find_if ( vs . begin (), vs . end (), [ savedString = prefix + \"bar\" s ]( const std :: string & s ) { return s == savedString ; }); if ( result != vs . end ()) std :: cout << prefix << \"-something found! \\n \" ; } \u4e0a\u9762\u7684\u4ee3\u7801\u5bf9 std::find_if \u8c03\u7528\u4e86\u4e24\u6b21\u3002\u5728\u7b2c\u4e00\u4e2a\u573a\u666f\u4e2d\uff0c\u6211\u4eec\u6355\u83b7 prefix \u5e76\u5c06\u8f93\u5165\u503c\u4e0e prefix + \"bar\"s \u8fdb\u884c\u6bd4\u8f83\u3002 \u6bcf\u6b21\u8c03\u7528 Lambda \u65f6\uff0c\u90fd\u5fc5\u987b\u521b\u5efa\u5e76\u8ba1\u7b97\u4e00\u4e2a\u4e34\u65f6\u503c\u6765\u5b58\u50a8\u8fd9\u4e9b\u5b57\u7b26\u4e32\u7684\u603b\u548c\u3002 \u7b2c\u4e8c\u6b21\u8c03\u7528 find_if \u4f18\u5316\uff1a\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u6355\u83b7\u7684\u53d8\u91cf savedString \u6765\u8ba1\u7b97\u5b57\u7b26\u4e32\u7684\u603b\u548c\u3002 \u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5b89\u5168\u5730\u5728 Lambda \u4f53\u4e2d\u5f15\u7528\u5b83\u3002 \u5b57\u7b26\u4e32\u7684\u603b\u548c\u53ea\u4f1a\u8fd0\u884c\u4e00\u6b21\uff0c\u800c\u4e0d\u662f\u6bcf\u6b21\u8c03\u7528 lambda \u65f6\u90fd\u4f1a\u8fd0\u884c\u3002 \u8be5\u793a\u4f8b\u8fd8\u4f7f\u7528\u4e86 std::string_literals \uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u53ef\u4ee5\u7f16\u5199\u4ee3\u8868 std::string \u5bf9\u8c61\u7684 \"foo\"s \u3002 \u6355\u83b7\u6210\u5458\u53d8\u91cf \u521d\u59cb\u5316\u5668\u4e5f\u88ab\u7528\u6765\u6355\u83b7\u6210\u5458\u53d8\u91cf\u3002\u6211\u4eec\u53ef\u4ee5\u6355\u83b7\u4e00\u4e2a\u6210\u5458\u53d8\u91cf\u7684\u62f7\u8d1d\u5e76\u4e14\u4e0d\u7528\u62c5\u5fc3\u60ac\u7a7a\u5f15\u7528\u3002 \u770b\u4e2a\u4f8b\u5b50\u5427\uff1a \u4ee3\u7801 3-9 \u6355\u83b7\u4e00\u4e2a\u6210\u5458\u53d8\u91cf #include <algorithm> #include <iostream> struct Baz { auto foo () const { return [ s = s ] { std :: cout << s << std :: endl ; }; } std :: string s ; }; int main () { const auto f1 = Baz { \"abc\" }. foo (); const auto f2 = Baz { \"xyz\" }. foo (); f1 (); f2 (); } \u5728 foo() \u4e2d\u6211\u4eec\u901a\u8fc7\u62f7\u8d1d\u7684\u65b9\u5f0f\u5c06\u6210\u5458\u53d8\u91cf\u62f7\u8d1d\u8fdb\u4e86\u95ed\u5305\u7c7b\u578b\u4e2d\u3002 \u6b64\u5916\uff0c\u6211\u4eec\u4f7f\u7528 auto \u6765\u8fdb\u884c\u6210\u5458\u51fd\u6570 foo() \u8fd4\u56de\u7c7b\u578b\u7684\u63a8\u65ad\u3002 \u5f53\u7136\uff0c\u5728 C++11 \u4e2d\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 std::function \uff0c\u8be6\u89c1 \u6355\u83b7\u6210\u5458\u53d8\u91cf\u548c this \u6307\u9488 \u3002 \u5728\u8fd9\u91cc\u6211\u4eec\u5728 lambda \u4e2d\u4f7f\u7528\u4e86\u4e00\u4e2a\u5f88\u201c\u5947\u602a\u201d\u7684\u8bed\u6cd5 [ s = s ] \uff0c\u8fd9\u6bb5\u4ee3\u7801\u80fd\u591f\u5de5\u4f5c\u7684\u539f\u56e0\u662f\u6355\u83b7\u5230\u7684\u53d8\u91cf\u662f\u5728\u95ed\u5305\u7c7b\u578b\u5185\u90e8\u7684\uff0c\u800c\u975e\u5916\u90e8\u3002\u6240\u4ee5\u8fd9\u91cc\u5c31\u6ca1\u6709\u6b67\u4e49\u51b2\u7a81\u4e86\u3002 4. \u6cdb\u578b Lambda \u8fd9\u662f C++14 \u4e2d\u6709\u5173 Lambda \u7684\u6700\u5927\u7684\u66f4\u65b0\uff01 Lambda \u7684\u65e9\u671f\u89c4\u8303\u5141\u8bb8\u6211\u4eec\u521b\u5efa\u533f\u540d\u51fd\u6570\u5bf9\u8c61\u5e76\u5c06\u5b83\u4eec\u4f20\u9012\u7ed9\u6807\u51c6\u5e93\u4e2d\u7684\u5404\u79cd\u6cdb\u578b\u7b97\u6cd5\u3002 \u7136\u800c\uff0c\u95ed\u5305\u672c\u8eab\u5e76\u4e0d\u662f\u201c\u6cdb\u578b\u201d\u7684\u3002\u4f8b\u5982\uff0c\u60a8\u4e0d\u80fd\u5c06\u6a21\u677f\u53c2\u6570\u6307\u5b9a\u4e3a Lambda \u7684\u53c2\u6570\u3002 \u5f53\u7136\uff0c\u5728 C++14 \u4e2d\uff0c\u6807\u51c6\u5f15\u5165\u4e86 \u6cdb\u578b Lambda \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u5199\uff1a const auto foo = []( auto x , int y ) { std :: cout << x << \", \" << y << '\\n' ; }; foo ( 10 , 1 ); foo ( 10.1234 , 2 ); foo ( \"hello world\" , 3 ); \u6ce8\u610f Lambda \u7684\u53c2\u6570 auto x \uff0c\u5b83\u7b49\u540c\u4e8e\u5728\u95ed\u5305\u7c7b\u578b\u4e2d\u4f7f\u7528\u4e00\u4e2a\u6a21\u677f\u58f0\u660e\uff1a struct { template < typename T > void operator ()( T x , int y ) const { std :: cout << x << \", \" << y << '\\n' ; } } someInstance \u5f53\u7136\uff0c\u5f53\u6709\u591a\u4e2a auto \u53c2\u6570\u65f6\uff0c\u4ee3\u7801\u5c06\u88ab\u6269\u5c55\u4e3a\u591a\u4e2a\u6a21\u677f\u53c2\u6570\uff1a const auto fooDouble = []( auto x , auto y ) { /*...*/ }; \u6269\u5c55\u4e3a\uff1a struct { template < typename T , typename U > void operator ()( T x , U y ) const { /*...*/ } } someOtherInstance ; \u53ef\u53d8\u6cdb\u578b\u53c2\u6570 \u4f46\u662f\u8fd9\u5e76\u4e0d\u662f\u5168\u90e8\uff0c\u5982\u679c\u4f60\u9700\u8981\u66f4\u66f4\u591a\u7684\u51fd\u6570\u53c2\u6570\u7c7b\u578b\uff0c\u4f60\u53ef\u4ee5\u81ea\u5df1\u8fdb\u884c\u53ef\u53d8\u6027\u6539\u9020\u3002 \u770b\u8fd9\u4e2a\u6817\u5b50\uff1a \u4ee3\u7801 3-10 \u7528\u4e8e\u6c42\u548c\u7684\u53ef\u53d8\u6cdb\u578b Lambda #include <iostream> template < typename T > auto sum ( T x ) { return x ; } template < typename T1 , typename ... T > auto sum ( T1 s , T ... ts ) { return s + sum ( ts ...); } int main () { const auto sumLambda = []( auto ... args ) { std :: cout << \"sum of: \" << sizeof ...( args ) << \" numbers \\n \" ; return sum ( args ...); }; std :: cout << sumLambda ( 1.1 , 2.2 , 3.3 , 4.4 , 5.5 , 6.6 , 7.7 , 8.8 , 9.9 ); } \u8fd9\u6bb5\u6cdb\u578b Lambda \u4ee3\u7801\u4e2d\u4f7f\u7528\u4e86 auto ... \u6765\u4ee3\u8868\u4e00\u4e2a\u53ef\u53d8\u957f\u53c2\u6570\u5305\u3002\u7406\u8bba\u4e0a\uff0c\u5b83\u5c06\u5728\u8c03\u7528\u64cd\u4f5c\u7b26\u4e2d\u88ab\u5c55\u5f00\u4e3a\uff1a struct __anoymousLambda { template < typename ... T > void operator ()( T ... args ) const { /*...*/ } }; \u5728 C++17 \u4e2d\uff0c\u6211\u4eec\u6709\u4e86\u65b0\u7684\u9009\u62e9 \u6298\u53e0\u8868\u8fbe\u5f0f \uff0c\u5b83\u53ef\u4ee5\u6539\u8fdb\u6cdb\u578b\u53ef\u53d8\u53c2\u6570 Lambdas\uff0c\u800c\u5728 C++20 \u4e2d\uff0c\u6211\u4eec\u5c06\u83b7\u5f97\u5bf9\u6a21\u677f\u53c2\u6570\u7684\u66f4\u591a\u63a7\u5236\u3002 \u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 C++17 \u5bf9\u53ef\u53d8\u53c2\u6570\u6cdb\u578b Lambdas \u7684\u66f4\u65b0\u4ee5\u53ca C++20 \u4e2d\u5173\u4e8e \u6a21\u677f Lambda \u7684\u4fe1\u606f \u4f7f\u7528\u6cdb\u578b Lambda \u8fdb\u884c\u5b8c\u7f8e\u8f6c\u53d1 \u4f7f\u7528\u6cdb\u578b Lambda \u8868\u8fbe\u5f0f\uff0c\u5176\u5b9e\u5e76\u4e0d\u9650\u5b9a\u5728\u53ea\u4f7f\u7528 auto x \uff0c\u60a8\u53ef\u4ee5\u50cf\u5176\u4ed6 auto \u53d8\u91cf\u4e00\u6837\u6dfb\u52a0\u4efb\u4f55\u9650\u5b9a\u7b26\uff0c\u5982 auto& \u3001 const auto& \u6216 auto&& \u3002 \u6709\u4e00\u4e2a\u5341\u5206\u4fbf\u5229\u7684\u70b9\u662f\uff0c\u4f60\u53ef\u4ee5\u6307\u5b9a auto&& x \u4f7f\u5176\u6210\u4e3a\u8f6c\u53d1\uff08\u6cdb\u578b\uff09\u5f15\u7528\u3002\u8fd9\u4f7f\u60a8\u53ef\u4ee5\u5b8c\u7f8e\u5730\u8f6c\u53d1\u8f93\u5165\u53c2\u6570\uff1a \u4ee3\u7801 3-11 \u6cdb\u578b Lambda \u8fdb\u884c\u5b8c\u7f8e\u8f6c\u53d1 #include <iostream> #include <string> void foo ( const std :: string & ) { std :: cout << \"foo(const string&) \\n \" ; } void foo ( std :: string && ) { std :: cout << \"foo(string&&) \\n \" ; } int main () { const auto callFoo = []( auto && str ) { std :: cout << \"Calling foo() on: \" << str << '\\n' ; foo ( std :: forward < decltype ( str ) > ( str )); }; const std :: string str = \"Hello World\" ; callFoo ( str ); callFoo ( \"Hello World Ref Ref\" ); } \u8f93\u51fa Calling foo() on: Hello World foo(const string&) Calling foo() on: Hello World Ref Ref foo(string&&) \u793a\u4f8b\u4ee3\u7801\u5b9a\u4e49\u4e86\u4e24\u4e2a\u51fd\u6570\u91cd\u8f7d foo \u7528\u4e8e\u5bf9 std::string \u7684 const \u5f15\u7528\uff0c\u53e6\u4e00\u4e2a\u7528\u4e8e\u5bf9 std::string \u7684\u53f3\u503c\u5f15\u7528\u3002 callFoolambda \u4f7f\u7528\u6cdb\u578b\u53c2\u6570\u4f5c\u4e3a\u6cdb\u578b\u5f15\u7528\uff08 \u5f15\u7528\u8d44\u6599 6 \uff09\u3002 \u5982\u679c\u60a8\u60f3\u5c06\u6b64 Lambda \u91cd\u5199\u4e3a\u5e38\u89c4\u51fd\u6570\u6a21\u677f\uff0c\u5b83\u53ef\u80fd\u5982\u4e0b\u6240\u793a\uff1a template < typename T > void callFooFunc ( T && str ) { std :: cout << \"Calling foo() on: \" << str << '\\n' ; foo ( std :: forward < T > ( str )); } \u5982\u4f60\u6240\u89c1\uff0c\u5728\u6cdb\u578b Lambda \u7684\u52a0\u6301\u4e0b\uff0c\u5728\u7f16\u5199\u672c\u5730\u533f\u540d\u51fd\u6570\u65f6\u5019\uff0c\u4f60\u73b0\u5728\u6709\u66f4\u591a\u7684\u9009\u62e9\u4e86\u3002 \u4f46\u662f\uff0c\u8fd9\u8fd8\u4e0d\u662f\u5168\u90e8\u3002 \u51cf\u5c11\u4e00\u4e9b\u9690\u853d\u7684\u7c7b\u578b\u7ea0\u6b63 \u6cdb\u578b Lambda \u5728\u53d1\u73b0\u7c7b\u578b\u63a8\u65ad\u6709\u95ee\u9898\u65f6\uff0c\u5f88\u6709\u5e2e\u52a9\u3002 \u6765\u770b\u4e2a\u4f8b\u5b50\uff1a \u4ee3\u7801 3-13 \u5bf9 std::map \u7684\u8fed\u4ee3\u5668\u8fdb\u884c\u7c7b\u578b\u7ea0\u6b63 #include <algorithm> #include <iostream> #include <map> #include <string> int main () { const std :: map < std :: string , int > numbers {{ \"one\" , 1 }, { \"two\" , 2 }, { \"three\" , 3 }}; // each time entry is copied from pair<const string, int>! std :: for_each ( std :: begin ( numbers ), std :: end ( numbers ), []( const std :: pair < std :: string , int >& entry ) { std :: cout << entry . first << \" = \" << entry . second << '\\n' ; }); } \u8fd9\u6bb5\u4ee3\u7801\u6709\u95ee\u9898\u5417\uff1f entry \u7684\u7c7b\u578b\u6b63\u786e\u5417\uff1f \u5f88\u660e\u663e\uff0c\u8fd9\u91cc\u662f\u6709\u95ee\u9898\u7684\u3002 std::map \u7684\u7c7b\u578b\u5e94\u8be5\u662f std::pair<const key, T> \u800c\u4e0d\u662f const std::pair<Key, T> \u3002\u800c\u5728\u6211\u4eec\u7684\u4ee3\u7801\u4e2d\uff0c\u4f1a\u9020\u6210\u4e0d\u5fc5\u8981\u7684\u989d\u5916\u62f7\u8d1d\uff0c\u5728 std::pair<const std::string, int> \u548c const std::pair<std::string, int>& \uff08\u5176\u4e2d const std::string \u5bf9 std::string \u7684\u8f6c\u6362\uff09\u4e4b\u95f4\u3002 \u4fee\u590d\u4e00\u4e0b\u4ee3\u7801\uff0c\u5b83\u672c\u5e94\u8be5\u662f\u8fd9\u6837\u7684\uff1a std :: for_each ( std :: begin ( numbers ), std :: end ( numbers ), []( const auto & entry ) { std :: cout << entry . first << \" = \" << entry . second << '\\n' ; }); \u73b0\u5728\u6a21\u677f\u53c2\u6570\u63a8\u5bfc\u5c06\u5145\u5206\u83b7\u5f97 entry \u5bf9\u8c61\u7684\u6b63\u786e\u7c7b\u578b\uff0c\u5e76\u4e14\u4e0d\u4f1a\u521b\u5efa\u989d\u5916\u7684\u526f\u672c\u3002 \u800c\u4e14\u4ee3\u7801\u4e5f\u66f4\u52a0\u7b80\u6d01\u4e14\u6613\u8bfb\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u770b\u770b\u53e6\u4e00\u6bb5\u6bd4\u8f83\u957f\u7684\u4ee3\u7801\uff0c\u6253\u5370\u4e86 entry \u7684\u5185\u5b58\u5730\u5740\uff1a \u4ee3\u7801 3-14 \u5bf9 std::map \u7684\u8fed\u4ee3\u5668\u8fdb\u884c\u7c7b\u578b\u7ea0\u6b63\uff0c\u5b8c\u6574\u7248 #include <algorithm> #include <iostream> #include <map> #include <string> int main () { const std :: map < std :: string , int > numbers {{ \"one\" , 1 }, { \"two\" , 2 }, { \"three\" , 3 }}; // print addresses: for ( auto mit = numbers . cbegin (); mit != numbers . cend (); ++ mit ) std :: cout << & mit -> first << \", \" << & mit -> second << '\\n' ; // each time entry is copied from pair<const string, int>! std :: for_each ( std :: begin ( numbers ), std :: end ( numbers ), []( const std :: pair < std :: string , int >& entry ) { std :: cout << & entry . first << \", \" << & entry . second << \": \" << entry . first << \" = \" << entry . second << '\\n' ; }); // this time entries are not copied, they have the same addresses std :: for_each ( std :: begin ( numbers ), std :: end ( numbers ), []( const auto & entry ) { std :: cout << & entry . first << \", \" << & entry . second << \": \" << entry . first << \" = \" << entry . second << '\\n' ; }); } \u53ef\u80fd\u7684\u8f93\u51fa\u7ed3\u679c\uff1a 1 0x165dc40, 0x165dc60 2 0x165dce0, 0x165dd00 3 0x165dc90, 0x165dcb0 4 0x7ffe5ed29a20, 0x7ffe5ed29a40: one = 1 5 0x7ffe5ed29a20, 0x7ffe5ed29a40: three = 3 6 0x7ffe5ed29a20, 0x7ffe5ed29a40: two = 2 7 0x165dc40, 0x165dc60: one = 1 8 0x165dce0, 0x165dd00: three = 3 9 0x165dc90, 0x165dcb0: two = 2 \u524d\u4e09\u884c\u8f93\u51fa\u4e86 map \u7684 key \u548c value \u7684\u5185\u5b58\u5730\u5740\u3002\u7b2c 4\u30015\u30016 \u884c\u5206\u522b\u5c55\u793a\u4e86\u5728\u5faa\u73af\u8fed\u4ee3\u4e2d\u4e34\u65f6\u62f7\u8d1d\u51fa\u6765\u7684\u5185\u5b58\u503c\u3002\u6700\u540e\u4e09\u884c\u5219\u662f\u4f7f\u7528 const auto& \u7684\u7248\u672c\uff0c\u5f88\u660e\u663e\u53ef\u4ee5\u770b\u51fa\u6765\uff0c\u548c\u524d\u4e09\u884c\u4f7f\u7528\u81ea\u8eab\u8fed\u4ee3\u7684\u5185\u5bb9\u662f\u4e00\u6837\u7684\u3002 \u5728\u6240\u4e3e\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5173\u6ce8\u62f7\u8d1d\u4ea7\u751f\u7684 key \u7684\u989d\u5916\u526f\u672c\uff0c\u4f46\u91cd\u8981\u7684\u662f\u8981\u4e86\u89e3 entry \u4e5f\u88ab\u590d\u5236\u4e86\u3002 \u5f53\u4f7f\u7528\u50cf int \u8fd9\u6837\u7684\u201c\u5ec9\u4ef7\u201d\u7684\u590d\u5236\u7c7b\u578b\u65f6\uff0c\u8fd9\u4e5f\u8bb8\u4e0d\u662f\u4ec0\u4e48\u95ee\u9898\uff0c\u4f46\u5982\u679c\u5bf9\u8c61\u50cf\u5b57\u7b26\u4e32\u4e00\u6837\u66f4\u5927\uff0c\u90a3\u4e48\u5c31\u4f1a\u4ea7\u751f\u5f88\u5927\u7684\u62f7\u8d1d\u5f00\u9500\u548c\u6027\u80fd\u635f\u8017\u3002 \u5728 C++20 \u4e2d\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u66f4\u597d\u5730\u63a7\u5236 Lambda \u7684\u6a21\u677f\u53c2\u6570\uff0c\u56e0\u4e3a C++20 \u7684\u65b0\u4fee\u8ba2\u5f15\u5165\u4e86\u6a21\u677f Lambda\u3001\u6982\u5ff5\u548c\u53d7\u7ea6\u675f\u7684 auto \u53c2\u6570\u3002 5. \u4f7f\u7528 Lambda \u4ee3\u66ff std::bind1st \u548c std::bind2nd \u5728 C++98/03 \u7ae0\u8282\uff0c\u6211\u63d0\u5230\u5e76\u5c55\u793a\u4e86\u4e00\u4e9b\u8f85\u52a9\u51fd\u6570\uff0c\u50cf std::bind1st \u548c std::bind2nd \u4e4b\u7c7b\u3002\u7136\u800c\uff0c\u8fd9\u4e9b\u51fd\u6570\u5728 C++11 \u4e2d\u9010\u6e10\u5e9f\u5f03\uff0c\u5728 C++17 \u4e2d\uff0c\u8fd9\u4e9b\u51fd\u6570\u5df2\u88ab\u5b8c\u5168\u79fb\u9664\u3002 \u50cf bind1st() / bind2nd() / mem_fun() \u7b49\u51fd\u6570\uff0c\u90fd\u662f\u5728 C++98 \u65f6\u671f\u88ab\u5f15\u5165\u8fdb\u6807\u6ce8\u5e93\u7684\uff0c\u800c\u73b0\u5728\u8fd9\u4e9b\u51fd\u6570\u5df2\u4e0d\u518d\u9700\u8981\u4e86\uff0c\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 Lambda \u6216\u8005\u66f4\u73b0\u4ee3\u5316\u7684 C++ \u6280\u5de7\u6765\u4ee3\u66ff\u3002 \u5f53\u7136\u4e86\uff0c\u8fd9\u4e9b\u51fd\u6570\u4e5f\u6ca1\u6709\u83b7\u5f97\u5bf9\u4e8e\u5b8c\u7f8e\u8f6c\u53d1\u3001\u6cdb\u578b\u6a21\u677f\u3001 decltype \u4ee5\u53ca\u5176\u4ed6 C++11 \u7279\u6027\u7684\u66f4\u65b0\uff0c\u6240\u4ee5\uff0c\u6211\u5efa\u8bae\u4e0d\u8981\u5728\u73b0\u4ee3\u7f16\u7a0b\u4e2d\u4f7f\u7528\u8fd9\u4e9b\u5df2\u5f03\u7528\u7684\u5185\u5bb9\u3002 \u4e0b\u9762\u662f\u5df2\u88ab\u5e9f\u5f03\u7684\u51fd\u6570\u5217\u8868\uff1a unary_function()/pointer_to_unary_function() binary_function()/pointer_to_binary_function() bind1st()/binder1st bind2nd()/binder2nd ptr_fun() mem_fun() mem_fun_ref() \u5f53\u7136\uff0c\u4ec5\u4ec5\u662f\u4e3a\u4e86\u66ff\u6362 bind1st \u6216\u8005 bind2nd \u7684\u8bdd\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 std::bind ( C++11 \u5f15\u5165\uff09\u6216\u8005 std::bind_front ( C++20 \u5f15\u5165\uff09\u3002 \u8003\u8651\u4e0b\uff0c\u8fd9\u4e9b\u6211\u4eec\u4e4b\u524d\u4f7f\u7528\u65e7\u51fd\u6570\u6240\u7f16\u5199\u7684\u8fd9\u4e9b\u4ee3\u7801\u8981\u5982\u4f55\u4fee\u6539\uff1a const auto onePlus = std :: bind1st ( std :: plus < int > (), 1 ); const auto minusOne = std :: bind2nd ( std :: minus < int > (), 1 ); std :: cout << onePlus ( 10 ) << \", \" << minusOne ( 10 ) << '\\n' ; \u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c onePlus \u662f\u7531 std::plus \u7ec4\u6210\u7684\u4e00\u4e2a\u53ef\u8c03\u7528\u5bf9\u8c61\uff0c\u5e76\u4e14\u7b2c\u4e00\u53c2\u6570\u88ab\u8c03\u7528\u4fee\u6b63\u3002 \u6362\u79cd\u8bf4\u6cd5\uff0c\u5f53\u4f60\u5199\u4e0b onePlus(n) \u7684\u65f6\u5019\uff0c\u5b83\u4f1a\u88ab\u5c55\u5f00\u4e3a std::plus(1, n) \u3002 \u7c7b\u4f3c\u5730\uff0c minusOne \u662f\u7531 std::minus \u7ec4\u6210\u7684\u4e00\u4e2a\u53ef\u8c03\u7528\u5bf9\u8c61\uff0c\u5e76\u4e14\u7b2c\u4e8c\u53c2\u6570\u88ab\u8c03\u7528\u4fee\u6b63\u3002 miniusOne(n) \u4f1a\u88ab\u5c55\u5f00\u4e3a std::minus(n, 1) \u3002 \u4e0a\u9762\u7684\u8bed\u6cd5\u53ef\u80fd\u4f1a\u5341\u5206\u7684\u9ebb\u70e6\uff0c\u6211\u4eec\u4e0b\u9762\u6765\u770b\u770b\u5982\u4f55\u7528\u73b0\u4ee3\u5316 C++ \u6280\u672f\u6765\u4f18\u5316\u4ed6\u4eec\u3002 \u4f7f\u7528\u73b0\u4ee3 C++ \u6280\u672f \u6211\u4eec\u9996\u5148\u7528 std::bind() \u6765\u66ff\u6362 bind1st \u548c bind2nd \u4ee3\u7801 3-15 \u7528 std::bind \u6765\u4ee3\u66ff #include <algorithm> #include <functional> #include <iostream> int main () { using std :: placeholders :: _1 ; const auto onePlus = std :: bind ( std :: plus < int > (), _1 , 1 ); const auto minusOne = std :: bind ( std :: minus < int > (), 1 , _1 ); std :: cout << onePlus ( 10 ) << \", \" << minusOne ( 10 ) << '\\n' ; } std::bind \u4f1a\u66f4\u52a0\u7075\u6d3b\uff0c\u5b83\u652f\u6301\u591a\u4e2a\u53c2\u6570\uff0c\u751a\u81f3\u4f60\u53ef\u4ee5\u5bf9\u53c2\u6570\u91cd\u65b0\u6392\u5e8f\u3002 \u5728\u53c2\u6570\u7ba1\u7406\u4e0a\uff0c\u4f60\u9700\u8981\u4f7f\u7528 \u5360\u4f4d\u7b26 placeholders \u3002 \u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u4f7f\u7528\u4e86 _1 \u6765\u4ee3\u8868\u7b2c\u4e00\u4e2a\u53c2\u6570\u9700\u8981\u88ab\u4f20\u5165\u6700\u7ec8\u7684\u51fd\u6570\u5bf9\u8c61\u4e2d\u7684\u672a\u77e5\u3002 \u867d\u7136 std::bind \u6bd4\u8d77 C++98/03 \u4e2d\u7684\u8f85\u52a9\u51fd\u6570\u597d\u7528\u591a\u4e86\uff0c\u4f46\u662f\u5b83\u4ecd\u7136\u4e0d\u5982 Lambda \u4f7f\u7528\u8d77\u6765\u81ea\u7136\u548c\u4fbf\u6377\u3002 \u6211\u4eec\u6765\u5c1d\u8bd5\u5199\u4e00\u4e0b\u4e0a\u9762\u4f8b\u5b50\u4e2d\u5bf9\u5e94\u7684 Lambda \u8868\u8fbe\u5f0f\uff1a auto lamOnePlus1 = []( int b ) { return 1 + b ; }; auto lamMinusOne1 = []( int b ) { return b - 1 ; }; std :: cout << lamOnePlus1 ( 10 ) << \", \" << lamMinusOne1 ( 10 ) << '\\n' ; \u5f53\u7136\uff0c\u5728 C++14 \u4e2d\u6211\u4eec\u4e5f\u53ef\u4ee5\u7528\u521d\u59cb\u5316\u5668\u6765\u8fdb\u4e00\u6b65\u4f18\u5316 Lambda\uff0c\u8ba9 Lambda \u66f4\u52a0\u7075\u6d3b\uff1a auto lamOnePlus1 = [ a = 1 ]( int b ) { return a + b ; }; auto lamMinusOne1 = [ a = 1 ]( int b ) { return b - a ; }; std :: cout << lamOnePlus1 ( 10 ) << \", \" << lamMinusOne1 ( 10 ) << '\\n' ; \u5f88\u663e\u7136\uff0cLambda \u7248\u672c\u66f4\u7b80\u6d01\uff0c\u66f4\u6613\u8bfb\u3002\u8fd9\u4e00\u70b9\u5c06\u5728\u540e\u9762\u66f4\u590d\u6742\u7684\u793a\u4f8b\u4e2d\u66f4\u52a0\u51f8\u663e\u51fa\u6765\u3002 \u51fd\u6570\u7ec4\u5408 \u6700\u540e\u4e00\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u6765\u770b\u770b\u8fd9\u4e2a\uff0c\u5728\u8868\u8fbe\u5f0f\u4e2d\u5d4c\u5957\u4f7f\u7528\u51fd\u6570\u7ec4\u5408\uff1a \u4ee3\u7801 3-16 std::bind \u4e2d\u4f7f\u7528\u51fd\u6570\u7ec4\u5408 #include <algorithm> #include <functional> #include <vector> int main () { using std :: placeholders :: _1 ; const std :: vector < int > v { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 }; const auto val = std :: count_if ( v . begin (), v . end (), std :: bind ( std :: logical_and < bool > (), std :: bind ( std :: greater < int > (), _1 , 2 ), std :: bind ( std :: less < int > (), _1 , 6 ) ) ); return val ; } \u4f60\u80fd\u5feb\u901f\u89e3\u8bfb\u51fa\u6765\u8fd9\u6bb5\u4ee3\u7801\u7684\u5de5\u4f5c\u903b\u8f91\u561b\uff1f \u4e0d\u8bba\u662f\u5426\u8bfb\u61c2\u4e86\uff0c\u8fd9\u6bb5\u4ee3\u7801\u90fd\u53ef\u4ee5\u91cd\u65b0\u4e66\u5199\u4e3a\u66f4\u7b80\u6d01\u548c\u53ef\u8bfb\u7684\u7248\u672c\uff1a std :: vector < int > v { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 }; const auto more2less6 = std :: count_if ( v . begin (), v . end (), []( int x ) { return x > 2 && x < 6 ; }); \u73b0\u5728\u5e94\u8be5\u597d\u61c2\u591a\u4e86\uff1f \u6709\u4e00\u4e9b\u5173\u4e8e std::bind \u548c Lambda \u7684\u7b2c\u4e09\u65b9\u6307\u5bfc\u6027\u610f\u89c1\uff1a\u6bd4\u5982\u300aEffective Modern C++\u300b\u4e2d\u7684\u7b2c 34 \u9879\u6761\u6b3e\uff0c\u6bd4\u5982 Google Abseil Blog \u4e2d\u7684 Avoid std::bind 6. Lambda \u63d0\u5347\uff08LIFTing with Lambda\uff09 \u5c3d\u7ba1\u6807\u51c6\u5e93\u4e2d\u63d0\u4f9b\u7684\u5e38\u7528\u7b97\u6cd5\u5df2\u7ecf\u5f88\u65b9\u4fbf\u7684\uff0c\u4f46\u662f\u4ecd\u7136\u6709\u4e00\u4e9b\u60c5\u51b5\u4e0d\u592a\u597d\u89e3\u51b3\u3002 \u6bd4\u5982\uff0c\u5411\u6a21\u677f\u51fd\u6570\u4e2d\u4f20\u9012\u6709\u91cd\u8f7d\u7684\u51fd\u6570\u4f5c\u4e3a\u53ef\u8c03\u7528\u5bf9\u8c61\u3002 \u4ee3\u7801 3-17 \u8c03\u7528\u91cd\u8f7d\u51fd\u6570 #include <algorithm> #include <vector> // two overloads: void foo ( int ) {} void foo ( float ) {} int main () { const std :: vector < int > vi { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 }; std :: for_each ( vi . begin (), vi . end (), foo ); } \u8fd9\u4e2a\u4f8b\u5b50\u91cc\u9762 foo \u5206\u522b\u6709\u5bf9\u4e8e int \u548c float \u7684\u4e24\u4e2a\u91cd\u8f7d\uff0c\u5e76\u4e14\u4f5c\u4e3a\u53ef\u8c03\u7528\u5bf9\u8c61\u4f20\u9012\u7ed9\u4e86\u6a21\u677f\u51fd\u6570 for_each \u3002\u9057\u61be\u7684\u662f\uff0c\u5728 GCC9 \u4e2d\uff0c\u7f16\u8bd1\u4f1a\u63d0\u793a\u5982\u4e0b\u9519\u8bef\uff1a error: no matching function for call to for_each(std::vector<int>::iterator, std::vector<int>::iterator, <unresolved overloaded function type>) std::for_each(vi.begin(), vi.end(), foo); ^^^^^ \u8fd9\u91cc\u51fa\u9519\u7684\u4e3b\u8981\u539f\u56e0\u662f\uff0c foo \u4f5c\u4e3a\u4e00\u4e2a\u6a21\u677f\u53c2\u6570\uff0c\u5b83\u9700\u8981\u91cd\u65b0\u88ab\u786e\u5b9a\u4e3a\u4e00\u4e2a\u786e\u5b9a\u7684\u7c7b\u578b\u3002\u4f46\u662f foo \u672c\u8eab\u53c8\u6709\u4e24\u4e2a\u91cd\u8f7d\uff0c\u5e76\u4e14\u5b9e\u9645\u4e0a\u6570\u636e\u53ef\u4ee5\u540c\u65f6\u88ab\u4e24\u4e2a\u91cd\u8f7d\u90fd\u63a5\u53d7\uff0c\u8fd9\u662f\u7f16\u8bd1\u5668\u6240\u4e0d\u80fd\u63a5\u53d7\u7684\u3002 \u4f46\u662f\uff0c\u8fd9\u91cc\u6709\u4e2a\u6280\u5de7\u5c31\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 Lambda \u6765\u4ee3\u66ff\u91cd\u8f7d\u7684\u53ef\u8c03\u7528\u5bf9\u8c61\u3002\u4e0a\u9762\u7684\u4ee3\u7801\u5373\u53ef\u4fee\u6539\u4e3a\uff1a std :: for_each ( vi . begin (), vi . end (), []( auto x ) { return foo ( x ); }); \u73b0\u5728\u6211\u4eec\u4e5f\u53ef\u4ee5\u7528\u5305\u88c5\u5668\uff08\u6cdb\u578b Lambda\uff09\u6765\u89e3\u51b3\u91cd\u8f7d\u7684\u95ee\u9898\uff0c\u8ba9\u8c03\u7528\u65f6\u53ef\u4ee5\u627e\u5230\u9002\u5f53\u7684\u91cd\u8f7d\u5bf9\u8c61\u3002 \u5f53\u7136\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5b8c\u7f8e\u8f6c\u53d1\u6765\u66f4\u52a0\u5de7\u5999\u7684\u89c4\u907f\u6389\u91cd\u8f7d\u7684\u60c5\u51b5\u3002 std :: for_each ( vi . begin (), vi . end (), []( auto && x ) { return foo ( std :: forward < decltype ( x ) > ( x ); }); \u4e0b\u9762\u662f\u4e00\u4e2a\u5e94\u7528\u7684\u4f8b\u5b50\uff1a \u4ee3\u7801 3-18 \u6cdb\u578b Lambda \u548c\u51fd\u6570\u91cd\u8f7d #include <algorithm> #include <iostream> #include <vector> void foo ( int i ) { std :: cout << \"int: \" << i << \" \\n \" ; } void foo ( float f ) { std :: cout << \"float: \" << f << \" \\n \" ; } int main () { const std :: vector < int > vi { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 }; std :: for_each ( vi . begin (), vi . end (), []( auto && x ) { return foo ( std :: forward < decltype ( x ) > ( x )); }); } \u4f46\u662f\uff0c\u5bf9\u4e8e\u66f4\u9ad8\u7ea7\u6216\u8005\u66f4\u590d\u6742\u7684\u573a\u666f\uff0c\u8fd9\u53ef\u80fd\u4e0d\u662f\u9996\u9009\u89e3\u51b3\u65b9\u6848\uff0c\u56e0\u4e3a\u6211\u4eec\u6ca1\u6709\u4e25\u683c\u9075\u5b88\u53ef\u53d8\u53c2\u6570\u548c\u5f02\u5e38\u89c4\u8303\u3002 \u5982\u679c\u9700\u8981\u4e00\u4e2a\u66f4\u52a0\u6cdb\u578b\u3001\u6216\u8005\u66f4\u597d\u7684\u89e3\u51b3\u529e\u6cd5\u3002\u90a3\u53ef\u80fd\u9700\u8981\u591a\u5199\u4e00\u4e9b\u4ee3\u7801\u4e86\uff1a #define LIFT(foo) \\ [](auto&&... x) noexcept( \\ noexcept(foo(std::forward<decltype(x)>(x)...))) -> decltype(foo(std::forward<decltype(x)>(x)...)) { \\ return foo(std::forward<decltype(x)>(x)...); \\ } \u770b\u7740\u6709\u70b9\u61f5\uff1f\u522b\u6025\uff0c\u6211\u4eec\u6765\u4e00\u70b9\u70b9\u89e3\u6790\u8fd9\u6bb5\u4ee3\u7801\u7684\u529f\u80fd\u3002 \u8fd4\u56de foo(std::forward<decltype(x)>(x)...) \u5b8c\u7f8e\u8f6c\u53d1\uff0c\u8fd9\u6837\u6211\u4eec\u624d\u80fd\u5b8c\u6574\u4f20\u9012\u8f93\u5165\u53c2\u6570\u5230 foo \u51fd\u6570\u4e2d\uff0c\u5e76\u4e14\u4fdd\u7559\u7c7b\u578b\u3002 noexcept(noexcept(foo(std::forward<decltype(x)>(x)...))) \u4f7f\u7528 noexcept \u64cd\u4f5c\u7b26\uff08\u88ab\u5d4c\u5957\u7684\u90a3\u4e00\u4e2a\uff09\u68c0\u67e5 \u53ef\u8c03\u7528\u5bf9\u8c61 foo \u7684\u5f02\u5e38\u89c4\u8303\u3002 \u4f9d\u8d56\u4e8e\u5f02\u5e38\u7684\u68c0\u67e5\u7ed3\u679c\uff0c\u6700\u7ec8\u4f1a\u4ea7\u751f noexcept(true) \u6216\u8005 noexcept(false) \u3002 decltype(foo(std::forward<decltype(x)>(x)...)) \u63a8\u65ad\u5305\u88c5 Lambda \u7684\u6700\u7ec8\u8fd4\u56de\u7c7b\u578b Lambda \u63d0\u5347\uff08LIFT\uff09\u901a\u8fc7\u5b8f\u5b9a\u4e49\u7684\u65b9\u5f0f\u5b9e\u73b0\uff0c\u4e0d\u7136\u6bcf\u6b21\u9700\u8981\u4f7f\u7528\u63d0\u5347\u7684\u65f6\u5019\u4f60\u90fd\u9700\u8981\u7f16\u5199\u7c7b\u4f3c\u7684\u4ee3\u7801\uff0c\u5e76\u5c06\u5176\u4f20\u9012\u7ed9\u4e00\u4e2a\u7b97\u6cd5\u4e2d\u3002\u800c\u4f7f\u7528\u5b8f\u5b9a\u4e49\uff0c\u8fd9\u662f\u4e00\u79cd\u6700\u7b80\u5355\u7684\u8bed\u6cd5\u5b9e\u73b0\u4e86\u3002 \u6709\u5174\u8da3\u7684\u8bdd\uff0c\u53ef\u4ee5\u770b\u770b\u4f7f\u7528 Lambda \u63d0\u5347\u540e\u7684 \u6700\u7ec8\u4ee3\u7801 \u3002 7. \u9012\u5f52 Lambda \u5982\u679c\u4f60\u6709\u4e00\u4e2a\u5e38\u89c4\u51fd\u6570\uff0c\u90a3\u4e48\u9012\u5f52\u8c03\u7528\u8fd9\u51fd\u6570\u5341\u5206\u5bb9\u6613\u7684\u3002\u6bd4\u5982\uff0c\u6211\u4eec\u8ba1\u7b97\u9636\u4e58\u65f6\u5019\u7684\u9012\u5f52\u51fd\u6570\u5e94\u8be5\u662f\u8fd9\u6837\u7684\uff1a \u4ee3\u7801 3-19 \u5e38\u89c4\u51fd\u6570\u7684\u9012\u5f52\u8c03\u7528 int factorial ( int n ) { return n > 1 ? n * factorial ( n - 1 ) : 1 ; } int main () { return factorial ( 5 ); } \u6211\u4eec\u6765\u5c1d\u8bd5\u7528 Lambda \u7684\u65b9\u5f0f\u8fdb\u884c\u9012\u5f52\uff1a \u4ee3\u7801 3-20 Lambda \u9012\u5f52\u7684\u9519\u8bef\u793a\u4f8b int main () { auto factorial = []( int n ) { return n > 1 ? n * factorial ( n - 1 ) : 1 ; }; return factorial ( 5 ); } \u8fd9\u6bb5\u4ee3\u7801\u4e0d\u4f1a\u7f16\u8bd1\u6210\u529f\uff0c\u5728 GCC \u4e2d\u4f1a\u63d0\u793a\u7f16\u8bd1\u9519\u8bef\uff1a error:use of 'factorial'before deduction of 'auto' \u7531\u4e8e\u6211\u4eec\u65e0\u6cd5\u5728 Lambda \u51fd\u6570\u4f53\u5185\u8bbf\u95ee factorial \u672c\u8eab\uff0c\u56e0\u4e3a\u4ed6\u8fd8\u5c1a\u672a\u88ab\u7f16\u8bd1\u5668\u5b8c\u5168\u8bc6\u522b\u51fa\u6765\u3002 \u6211\u4eec\u6df1\u5165\u4e00\u4e0b\uff0c\u5148\u5c06\u8fd9\u6bb5\u4ee3\u7801\u5c55\u5f00\u4e3a\u4e00\u4e2a\u7b80\u5355\u7684\u4eff\u51fd\u6570\uff1a struct fact { int operator ()( int n ) const { return n > 1 ? n * factorial ( n - 1 ) : 1 ; }; }; auto factorial = fact {}; \u8fd9\u6837\u5c31\u6e05\u6670\u5f88\u591a\u4e86\uff0c\u56e0\u4e3a\u5728\u8c03\u7528\u64cd\u4f5c\u7b26 () \u4e2d\uff0c\u6211\u4eec\u538b\u6839\u65e0\u6cd5\u8bbf\u95ee\u5230\u4eff\u51fd\u6570\u7c7b\u578b\u3002 \u5982\u679c\u6211\u4eec\u8981\u5b9e\u73b0\u9012\u5f52\uff0c\u90a3\u4e48\u8fd9\u91cc\u6709\u4e24\u4e2a\u9014\u5f84\u53ef\u4ee5\u8003\u8651\u4e0b\uff1a \u4f7f\u7528 std::function \u5e76\u4e14\u6355\u83b7\u5b83 \u4f7f\u7528\u5185\u90e8 Lambda \u7136\u540e\u4f20\u9012\u6cdb\u578b\u53c2\u6570 \u5229\u7528 std::function \u5c06 Lambda \u8868\u8fbe\u5f0f\u8d4b\u503c\u7ed9\u4e00\u4e2a std::function \uff0c\u540e\u7eed\u6355\u83b7\u8be5\u8fd9\u4e2a\u5bf9\u8c61\u5230 Lambda \u51fd\u6570\u4f53\u5185\uff0c\u5b9e\u73b0\u9012\u5f52\u3002 \u4ee3\u7801 3-21 \u4f7f\u7528 std::function \u5b9e\u73b0 Lambda \u9012\u5f52 #include <functional> int main () { const std :: function < int ( int ) > factorial = [ & factorial ]( int n ) { return n > 1 ? n * factorial ( n - 1 ) : 1 ; }; return factorial ( 5 ); } \u8fd9\u4e2a\u793a\u4f8b\u91cc\u9762\uff0c\u6211\u4eec\u5728 Lambda \u51fd\u6570\u4f53\u5185\u8c03\u7528\u6355\u83b7\u7684 std::function \u5bf9\u8c61 factorial \u3002 \u6b64\u65f6\u8fd9\u4e2a\u5bf9\u8c61\u662f\u5b8c\u6574\u5b9a\u4e49\u7684\uff0c\u6240\u4ee5\u7f16\u8bd1\u5668\u8bbf\u95ee\u5e76\u8c03\u7528\u5bf9\u8c61\u5c31\u4e0d\u5b58\u5728\u95ee\u9898\u4e86\u3002 \u5982\u679c\u4f60\u60f3\u4f7f\u7528\u4e00\u4e2a\u65e0\u72b6\u6001\u7684 Lambda\uff0c\u90a3\u4e48\u4f60\u751a\u81f3\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u51fd\u6570\u6307\u9488\u6765\u4ee3\u66ff std::function \uff0c\u8fd9\u6837\u5185\u5b58\u5360\u7528\u4f1a\u66f4\u5c11\u3002 \u4f46\u662f\uff0c\u4f46\u662f\uff0c\u4e0b\u9762\u8fd9\u79cd\u65b9\u5f0f\u4f1a\u66f4\u597d\u3002 \u5185\u90e8 Lambda \u548c\u6cdb\u578b\u53c2\u6570 \u6765\u770b\u770b C++14 \u4e2d\u7684\u7528\u6cd5\uff1a \u4ee3\u7801 3-22 \u4f7f\u7528\u5185\u90e8 Lambda \u6765\u5b9e\u73b0 Lambda \u9012\u5f52 int main () { const auto factorial = []( int n ) noexcept { const auto f_impl = []( int n , const auto & impl ) noexcept -> int { return n > 1 ? n * impl ( n - 1 , impl ) : 1 ; }; return f_impl ( n , f_impl ); }; return factorial ( 5 ); } \u8fd9\u6b21\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u5185\u90e8 Lambda\uff08 f_impl \uff09\u6765\u6267\u884c\u4e3b\u903b\u8f91\u3002 \u540c\u65f6\uff0c\u6211\u4eec\u5411\u5b83\u4f20\u9012\u4e00\u4e2a\u6cdb\u578b\u53c2\u6570 const auto& impl \uff0c\u8fd9\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u6211\u4eec\u53ef\u4ee5\u9012\u5f52\u8c03\u7528\u7684\u53ef\u8c03\u7528\u5bf9\u8c61\u3002 \u591a\u4e8f\u4e86 C++14 \u4e2d\u7684\u6cdb\u578b Lambda\uff0c\u6211\u4eec\u53ef\u4ee5\u907f\u514d std::function \u7684\u5f00\u9500\u5e76\u4f9d\u8d56 auto \u8fdb\u884c\u7c7b\u578b\u63a8\u5bfc\u3002 \u66f4\u591a\u6280\u5de7 \u53ef\u4ee5\u53c2\u9605\u4e0b\u9762\u4e24\u4e2a\u94fe\u63a5\u6765\u5b66\u4e60\u66f4\u591a\u5173\u4e8e lambda \u9012\u5f52\u7684\u6280\u5de7\uff1a Recursive lambda functions in C++11 Recursive lambdas in C++(14) - Pedro Melendez \u4f7f\u7528\u9012\u5f52 Lambda \u662f\u6700\u597d\u7684\u9009\u62e9\u5417\uff1f \u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5b66\u5230\u4e86\u4e00\u4e9b\u6709\u5173 Lambda \u8868\u8fbe\u5f0f\u7684\u6280\u5de7\u3002 \u5c3d\u7ba1\u5982\u6b64\uff0c\u8fd9\u4e9b\u6280\u5de7\u5b9e\u73b0\u8d77\u6765\u7684\u590d\u6742\u6027\u8fdc\u8fdc\u9ad8\u4e8e\u4ec5\u4f7f\u7528\u5e38\u89c4\u9012\u5f52\u51fd\u6570\u8c03\u7528\u7684\u7b80\u5355\u89e3\u51b3\u65b9\u6848\u3002 \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u9012\u5f52 Lambda \u4e0d\u662f\u6700\u597d\u548c\u6700\u76f4\u63a5\u7684\u9009\u62e9\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u590d\u6742\u9012\u5f52 Lambda \u7684\u4f18\u70b9\u662f\u5b83\u7684\u5c40\u90e8\u6027\u548c\u91c7\u7528 auto \u53c2\u6570\u7684\u80fd\u529b\u3002 8. \u603b\u7ed3 \u5728\u672c\u7ae0\uff0cC++14 \u4e3a Lambda \u8868\u8fbe\u5f0f\u5e26\u6765\u4e86\u51e0\u4e2a\u5173\u952e\u6027\u7684\u6539\u8fdb\u3002 \u7531\u4e8e C++14 \u53ef\u4ee5\u5728 Lambda \u8303\u56f4\u5185\u58f0\u660e\u65b0\u7684\u53d8\u91cf\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u5728\u6a21\u677f\u4ee3\u7801\u4e2d\u66f4\u9ad8\u6548\u7684\u4f7f\u7528 Lambda\u3002 \u5728\u4e0b\u4e00\u7ae0\u4e2d\uff0c\u6211\u4eec\u4f1a\u79fb\u6b65 C++17\uff0c\u6765\u770b\u770b\u66f4\u591a\u7684 Lambda \u66f4\u65b0\u3002","title":"Lambda in C++14"},{"location":"Chapter3/#\u4e09lambda-in-c14","text":"C++14 \u4e3a Lambda \u8868\u8fbe\u5f0f\u63d0\u4f9b\u4e86\u4e24\u4e2a\u663e\u8457\u7684\u589e\u5f3a\u7279\u6027 \u5e26\u6709\u521d\u59cb\u5316\u7684\u6355\u83b7 \u6cdb\u578b Lambda \u6b64\u5916\uff0c\u8be5\u6807\u51c6\u8fd8\u66f4\u65b0\u4e86\u4e00\u4e9b\u89c4\u5219\uff0c\u4f8b\u5982\uff1a Lambda \u8868\u8fbe\u5f0f\u7684\u9ed8\u8ba4\u53c2\u6570 auto \u8fd4\u56de\u7c7b\u578b \u8fd9\u4e9b\u65b0\u589e\u7279\u6027\u53ef\u4ee5\u5728 N4140 \u4e2d\u7684 Lambda \u90e8\u5206 [expr.prim.lambda] \u627e\u5230\u3002 \u5728\u672c\u7ae0\u4e2d\uff0c\u4f60\u5c06\u5b66\u5230\uff1a \u6355\u83b7\u6210\u5458\u53d8\u91cf \u7528\u73b0\u4ee3 C++ \u6280\u672f\u4ee3\u66ff\u65e7\u529f\u80fd\uff0c\u5982 std::bind1st LIFTING \u9012\u5f52 Lambda","title":"\u4e09\u3001Lambda in C++14"},{"location":"Chapter3/#1-\u4e3a-lambda-\u589e\u52a0\u9ed8\u8ba4\u53c2\u6570","text":"\u8ba9\u6211\u4eec\u4ece\u5c0f\u7684\u53d8\u5316\u8bf4\u8d77\u5427\uff1a \u5728 C++14 \u4e2d\uff0c\u4f60\u53ef\u4ee5\u5728 Lambda \u8c03\u7528\u4e2d\u4f7f\u7528\u9ed8\u8ba4\u53c2\u6570\u4e86\u3002\u8fd9\u4e00\u5c0f\u5c0f\u7684\u66f4\u65b0\u8ba9 Lambda \u51fd\u6570\u66f4\u50cf\u4e00\u4e2a\u5e38\u89c4\u51fd\u6570\u4e86\u3002 \u4ee3\u7801 3-1 \u5e26\u6709\u9ed8\u8ba4\u53c2\u6570\u7684 Lambda #include <iostream> int main () { const auto lam = []( int x = 10 ) { std :: cout << x << '\\n' ; }; lam (); lam ( 100 ); } \u89c1\u7528\u4f8b\u6240\u793a\uff0c\u6211\u4eec\u53ef\u4ee5\u8c03\u7528\u8fd9\u4e2a Lambda \u4e24\u6b21\uff1a\u7b2c\u4e00\u6b21\u4e0d\u643a\u5e26\u4efb\u4f55\u53c2\u6570\uff0c\u7ed3\u679c\u5c06\u8f93\u51fa\u9ed8\u8ba4\u7684 10 \uff0c\u7b2c\u4e8c\u6b21\u6211\u4eec\u4f20\u9012\u53c2\u6570 100 \u8fdb\u53bb\uff0c\u7ed3\u679c\u4f1a\u8f93\u51fa 100 \u3002 \u4e0d\u8fc7\uff0c\u8fd9\u4e00\u7279\u6027\u65e9\u5df2\u5728 GCC \u548c Clang \u7684 C++11 \u7248\u672c\u4e2d\u88ab\u652f\u6301\u4e86\u3002","title":"1. \u4e3a Lambda \u589e\u52a0\u9ed8\u8ba4\u53c2\u6570"},{"location":"Chapter3/#2-\u8fd4\u56de\u7c7b\u578b","text":"\u5982\u679c\u4f60\u8fd8\u8bb0\u5f97\u4e4b\u524d\u7ae0\u8282\u7684\u5185\u5bb9\uff0c\u90a3\u4e48\u4f60\u4e00\u5b9a\u77e5\u9053\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u7b80\u5355\u7684 Lambda\uff0c\u7f16\u8bd1\u5668\u53ef\u4ee5\u63a8\u65ad\u51fa\u5b83\u7684\u8fd4\u56de\u7c7b\u578b\u3002 \u8fd9\u4e2a\u529f\u80fd\u662f\u5728\u5e38\u89c4\u51fd\u6570\u4e0a\u201c\u6269\u5c55\u201d\u7684\uff0c\u5728 C++14 \u4e2d\u4f60\u53ef\u4ee5\u4f7f\u7528 auto \u4f5c\u4e3a\u8fd4\u56de\u7c7b\u578b auto myFunction () { int x = computeX (...); int y = computeY (...); return x + y ; } \u5982\u4e0a\uff0c\u7f16\u8bd1\u5668\u4f1a\u63a8\u65ad\u8fd4\u56de\u7c7b\u578b\u4e3a int \u3002 \u63a8\u65ad\u8fd4\u56de\u7c7b\u578b\u7684\u8fd9\u90e8\u5206\u5185\u5bb9\u5728 C++14 \u4e2d\u5f97\u5230\u4e86\u6539\u5584\u548c\u6269\u5c55\u3002\u5bf9\u4e8e Lambda \u8868\u8fbe\u5f0f\u6765\u8bf4\uff0c\u8fd9\u610f\u5473\u7740\u4ed6\u4eec\u53ef\u4ee5\u548c\u5e38\u89c4\u51fd\u6570\u4eab\u6709\u540c\u6837\u7684 auto \u8fd4\u56de\u7c7b\u578b\uff08 [expr.prim.lambda] \uff09\uff1a \u5982\u679c Lambda \u8fd4\u56de\u7c7b\u578b\u662f auto \uff0c\u90a3\u4e48\u5b83\u4f1a\u88ab\u5c3e\u90e8\u8fd4\u56de\u7c7b\u578b\u6240\u66ff\u4ee3\uff08\u5982\u679c\u63d0\u4f9b\u4e86\uff09\u6216\u8005\u4ece return \u8bed\u53e5\u4e2d\u63a8\u5bfc\u3002\u8be6\u89c1 [dcl.spec.auto] \u5982\u679c\u5728 Lambda \u4e2d\u6709\u591a\u6761\u8fd4\u56de\u8bed\u53e5\uff0c\u4ed6\u4eec\u5fc5\u987b\u80fd\u591f\u63a8\u65ad\u51fa\u540c\u6837\u7684\u7c7b\u578b\uff1a auto foo = []( int x ){ if ( x < 0 ) return x * 1.1f else return x * 2.1 } \u8fd9\u6bb5\u4ee3\u7801\u5c31\u65e0\u6cd5\u6210\u529f\u7f16\u8bd1\u4e86\uff0c\u56e0\u4e3a\u7b2c\u4e00\u6761\u8fd4\u56de\u8bed\u53e5\u8fd4\u56de float \u7c7b\u578b\u4f46\u7b2c\u4e8c\u6761\u8fd4\u56de double \u7c7b\u578b\u3002 \u7f16\u8bd1\u5668\u65e0\u6cd5\u51b3\u5b9a\u51fa\u5230\u5e95\u5e94\u8be5\u5c06\u8fd4\u56de\u7c7b\u578b\u5b9a\u4e3a\u54ea\u4e2a\uff0c\u6240\u4ee5\u60a8\u5fc5\u987b\u9009\u62e9\u5176\u4e2d\u4e00\u4e2a\uff0c\u4fdd\u8bc1\u8fd4\u56de\u7c7b\u578b\u7684\u552f\u4e00\u6027\u3002 \u5c3d\u7ba1\u63a8\u65ad\u6574\u5f62\u548c\u53cc\u7cbe\u5ea6\u578b\u4e5f\u662f\u5f88\u6709\u7528\u7684\uff0c\u4f46\u662f\u63a8\u65ad\u8fd4\u56de\u7c7b\u578b\u4e4b\u6240\u4ee5\u6709\u66f4\u663e\u8457\u7684\u4ef7\u503c\uff0c\u662f\u56e0\u4e3a\u5b83\u53ef\u4ee5\u5728\u6a21\u677f\u4ee3\u7801\u8fd9\u79cd\u201c\u672a\u77e5\u201d\u9886\u57df\u53d1\u6325\u6781\u5927\u5730\u5728\u4f5c\u7528\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0cLambda \u95ed\u5305\u7c7b\u578b\u662f\u533f\u540d\u7684\uff0c\u5e76\u4e14\u6211\u4eec\u65e0\u6cd5\u663e\u5f0f\u7684\u660e\u786e\u5b83\u3002 \u4f46\u662f\u5982\u679c\u4f60\u60f3\u4ece\u51fd\u6570\u4e2d\u8fd4\u56de\u4e00\u4e2a Lambda \u5462\uff1f\u4f60\u8981\u5982\u4f55\u660e\u660e\u786e\u8fd9\u4e2a\u7c7b\u578b\uff1f \u5728 C++14 \u4e4b\u524d\uff0c\u4f60\u53ef\u4ee5\u7528 std::function \uff1a \u4ee3\u7801 3-2 \u8fd4\u56de std::function #include <functional> #include <iostream> std :: function < int ( int ) > CreateMulLambda ( int x ) { return [ x ]( int param ) noexcept { return x * param ; }; } int main () { const auto lam = CreateMulLambda ( 10 ); std :: cout << sizeof ( lam ); return lam ( 2 ); } \u7136\u800c\uff0c\u4e0a\u9762\u8fd9\u79cd\u65b9\u6cd5\u5e76\u4e0d\u8db3\u591f\u76f4\u63a5\u3002\u5b83\u8981\u6c42\u4f60\u660e\u786e\u4e86\u4e00\u4e2a\u51fd\u6570\u7b7e\u540d\uff0c\u751a\u81f3\u5305\u542b\u4e86\u989d\u5916\u7684\u5934\u6587\u4ef6 <functional> \u3002\u5982\u679c\u4f60\u8fd8\u8bb0\u5f97 C++11 \u7684\u5185\u5bb9\u7684\u8bdd\uff0c std::function \u662f\u4e00\u4e2a\u201c\u7b28\u91cd\u201d\u7684\u5bf9\u8c61\uff08\u5728 GCC9 \u4e2d\uff0c function \u7684 sizeof \u662f 32 bytes\uff09\u3002\u5e76\u4e14\uff0c\u5b83\u9700\u8981\u4e00\u4e9b\u9ad8\u7ea7\u7684\u5185\u90e8\u673a\u5236\uff0c\u4ee5\u4fbf\u5b83\u53ef\u4ee5\u5904\u7406\u4efb\u4f55\u53ef\u8c03\u7528\u7684\u5bf9\u8c61\u3002 \u611f\u8c22 C++14 \u5e26\u6765\u7684\u6539\u8fdb\uff0c\u6211\u4eec\u53ef\u4ee5\u6781\u5927\u7684\u7b80\u5316\u4e0a\u9762\u7684\u4ee3\u7801\uff1a \u4ee3\u7801 3-3 Lambda \u63a8\u65ad\u7684 auto \u8fd4\u56de\u7c7b\u578b #include <iostream> auto CreateMulLambda ( int x ) noexcept { return [ x ]( int param ) noexcept { return x * param ; }; } int main () { const auto lam = CreateMulLambda ( 10 ); std :: cout << sizeof ( lam ); return lam ( 2 ); } \u73b0\u5728\u6211\u4eec\u5c31\u53ef\u4ee5\u5b8c\u5168\u4f9d\u9760\u7f16\u8bd1\u65f6\u7684\u7c7b\u578b\u63a8\u5bfc\uff0c\u4e0d\u9700\u8981\u5176\u4ed6\u8f85\u52a9\u7c7b\u578b\u3002 \u5728 GCC \u4e0a\uff0c\u6700\u540e lam \u8fd9\u4e2a\u8fd4\u56de\u7684 Lambda \u5bf9\u8c61\u7684\u5927\u5c0f\u4ec5\u4e3a 4 \u5b57\u8282\uff0c\u5e76\u4e14\u6bd4\u4f7f\u7528 std::function \u7684\u89e3\u51b3\u65b9\u6848\u4fbf\u5b9c\u5f97\u591a\u3002 \u8fd9\u91cc\u6709\u4e00\u70b9\u9700\u8981\u6ce8\u610f\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u5c06 CreateMulLambda \u6807\u8bb0\u4e3a noexcept \uff0c\u8fd9\u6837\u65e0\u8bba\u5982\u4f55\u5b83\u90fd\u4e0d\u53ef\u4ee5\u629b\u51fa\u4efb\u4f55\u5f02\u5e38\u3002 \u4f46\u662f std::function \u5c31\u4e0d\u884c\u4e86\u3002","title":"2. \u8fd4\u56de\u7c7b\u578b"},{"location":"Chapter3/#3-\u5e26\u6709\u521d\u59cb\u5316\u7684\u6355\u83b7","text":"\u73b0\u5728\u6211\u4eec\u6765\u8bb2\u8bb2\u66f4\u52a0\u5177\u6709\u5efa\u8bbe\u6027\u7684\u66f4\u65b0\u3002 \u4f60\u4e00\u5b9a\u8bb0\u5f97\uff0c\u5728 Lambda \u8868\u8fbe\u5f0f\u4e2d\uff0c\u4f60\u53ef\u4ee5\u4ece\u5916\u90e8\u8303\u56f4\u4e2d\u6355\u83b7\u53d8\u91cf\u3002 \u7f16\u8bd1\u5668\u4f1a\u62d3\u5c55\u4f60\u7684\u6355\u83b7\u8bed\u6cd5\u5e76\u4e14\u5728\u95ed\u5305\u7c7b\u578b\u4e2d\u521b\u5efa\u6210\u5458\u53d8\u91cf\uff08\u975e\u9759\u6001\u6570\u636e\u6210\u5458\uff09\u3002 \u73b0\u5728\u5728 C++14 \u4e2d\uff0c\u4f60\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6210\u5458\u53d8\u91cf\u5e76\u4e14\u5728\u6355\u83b7\u8bed\u53e5\u4e2d\u521d\u59cb\u5316\u4ed6\u4eec\u3002 \u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u5728 Lambda \u5185\u90e8\u8bbf\u95ee\u90a3\u4e9b\u53d8\u91cf\u4e86\u3002 \u8fd9\u53eb\u505a \u901a\u8fc7\u521d\u59cb\u5316\u5668\u6355\u83b7 \u6216\u8005\u4f60\u4e5f\u53ef\u4ee5\u7528\u53e6\u4e00\u4e2a\u540d\u5b57 \u5e7f\u4e49 Lambda \u6355\u83b7 \u3002 \u770b\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a \u4ee3\u7801 3-4 \u901a\u8fc7\u521d\u59cb\u5316\u5668\u6355\u83b7 #include <iostream> int main () { int x = 30 ; int y = 12 ; const auto foo = [ z = x + y ]() { std :: cout << z << '\\n' ; }; x = 0 ; y = 0 ; foo (); } \u8f93\u51fa\u4e3a 42 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u7f16\u8bd1\u4f1a\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u6210\u5458\u53d8\u91cf\u5e76\u4e14\u5c06\u5176\u521d\u59cb\u5316\u4e3a x + y \u3002 \u8fd9\u4e2a\u65b0\u53d8\u91cf\u7684\u7c7b\u578b\u4f1a\u88ab\u81ea\u52a8\u63a8\u65ad\u51fa\u6765\uff0c\u5373\u4fbf\u4f60\u5728\u53d8\u91cf\u524d\u52a0\u4e0a\u4e86 auto \u5173\u952e\u5b57\uff1a auto z = x + y \u603b\u4e4b\uff0c\u524d\u9762\u793a\u4f8b\u4e2d\u7684 Lambda \u4f1a\u88ab\u89e3\u6790\u4e3a\u4ee5\u4e0b\uff08\u7b80\u5316\u7684\uff09\u4eff\u51fd\u6570\uff1a struct _unnamedLambda { void operator ()() const { std :: cout << z << '\\n' ; } int z ; } someInstance ; \u5f53 Lambda \u7684\u8868\u8fbe\u5f0f\u5b9a\u4e49\u5b8c\u6210\u65f6\uff0c z \u5c06\u4f1a\u88ab\u76f4\u63a5\u521d\u59cb\u5316 x + y \u3002 \u4e0a\u9762\u8fd9\u53e5\u7684\u542b\u4e49\u5c31\u662f\uff1a\u65b0\u53d8\u91cf\u5728\u4f60\u5b9a\u4e49 Lambda \u7684\u5730\u65b9\u521d\u59cb\u5316\uff0c\u800c\u4e0d\u662f\u4f60\u8c03\u7528\u5b83\u7684\u5730\u65b9\u3002 \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u5982\u679c\u4f60\u5728\u521b\u5efa Lambda \u540e\u4fee\u6539 x \u6216\u8005 y \u53d8\u91cf\uff0c\u53d8\u91cf z \u7684\u503c\u4e0d\u4f1a\u6539\u53d8\u3002 \u5728\u793a\u4f8b\u4e2d\uff0c\u4f60\u53ef\u4ee5\u770b\u5230\u5728\u5b9a\u4e49 Lambda \u4e4b\u540e\uff0c\u6211\u7acb\u5373\u66f4\u6539\u4e86 x \u548c y \u7684\u503c\u3002 \u7136\u800c\uff0c\u8f93\u51fa\u4ecd\u5c06\u662f 42\uff0c\u56e0\u4e3a z \u5728\u8fd9\u4e4b\u524d\u5c31\u5df2\u7ecf\u88ab\u521d\u59cb\u5316\u3002 \u5f53\u7136\uff0c\u901a\u8fc7\u521d\u59cb\u5316\u5668\u521b\u5efa\u53d8\u91cf\u4e5f\u53ef\u4ee5\u662f\u7075\u6d3b\u7684\uff0c\u4e0d\u59a8\u770b\u770b\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\uff1a\u521b\u5efa\u4e00\u4e2a\u5916\u90e8\u8303\u56f4\u7684\u5f15\u7528\u53d8\u91cf\u3002 \u4ee3\u7801 3-5 \u901a\u8fc7\u521d\u59cb\u5316\u5668\u8fdb\u884c\u5f15\u7528\u6355\u83b7 #include <iostream> int main () { int x = 30 ; const auto foo = [ & z = x ]() { std :: cout << z << '\\n' ; }; foo (); x = 0 ; foo (); } \u8fd9\u6b21\uff0c\u53d8\u91cf z \u662f\u5f15\u7528\u81ea\u53d8\u91cf x \uff0c\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u5199\u6210\u8fd9\u6837 auto & z = x \u3002 \u5982\u679c\u8fd0\u884c\u8fd9\u6bb5\u4ee3\u7801\uff0c\u4f60\u5e94\u8be5\u53ef\u4ee5\u770b\u5230\uff0c\u7b2c\u4e00\u884c\u4f1a\u8f93\u51fa 30\uff0c\u4f46\u662f\u7b2c\u4e8c\u884c\u4f1a\u8f93\u51fa 0 \u3002 \u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u8fdb\u884c\u4e86\u4e00\u4e2a\u5f15\u7528\u6355\u83b7\uff0c\u5f53\u4f60\u4fee\u6539\u4e86\u5f15\u7528\u5185\u5bb9\u65f6\uff0c\u5bf9\u8c61 z \u81ea\u7136\u4e5f\u4f1a\u968f\u4e4b\u53d8\u5316\u3002","title":"3. \u5e26\u6709\u521d\u59cb\u5316\u7684\u6355\u83b7"},{"location":"Chapter3/#\u9650\u5236","text":"\u9700\u8981\u6ce8\u610f\uff0c\u5728\u4f7f\u7528\u521d\u59cb\u5316\u5668\u6355\u83b7\u65f6\uff0c\u6709\u4e00\u4e9b\u9650\u5236\uff1a \u4e00\u4e2a\u662f\uff0c\u5f53\u4f60\u901a\u8fc7\u521d\u59cb\u5316\u5668\u8fdb\u884c\u5f15\u7528\u6355\u83b7\u65f6\uff0c\u5979\u4e0d\u53ef\u80fd\u5199\u5165\u4e00\u4e2a\u53f3\u503c\u5f15\u7528 && \u3002\u8fd9\u662f\u56e0\u4e3a\u5982\u4e0b\u7684\u4ee3\u7801\u76ee\u524d\u662f\u975e\u6cd5\u7684\uff1a [ && z = x ] //\u975e\u6cd5\u8bed\u6cd5 \u53e6\u4e00\u4e2a\u8be5\u7279\u6027\u7684\u9650\u5236\u662f\uff0c\u5b83\u4e0d\u5141\u8bb8\u4f20\u5165\u53c2\u6570\u5305\u3002\u5728\u6761\u6b3e [expr.prim.lambda] \u7684 24 \u8282\u53ef\u4ee5\u9605\u8bfb\u5230\u5982\u4e0b\u5185\u5bb9\uff1a \u5e26\u6709\u7701\u7565\u53f7\u7684\u7b80\u5355\u6355\u83b7\u662f\u5305\u6269\u5c55\uff08 [temp.variadic] \uff09\uff0c\u4f46\u662f init-capture \u5e26\u6709\u7701\u7565\u53f7\u662f\u683c\u5f0f\u9519\u8bef\u3002 \u7b80\u800c\u8a00\u4e4b\uff0c\u5728 C++14 \u4e2d\uff0c\u4f60\u5e76\u4e0d\u80fd\u8fd9\u6837\u5199\u4ee3\u7801\uff1a template < class .. Args > auto captureTest ( Args ... args ) { return lambda = [... capturedArgs = std :: move ( args )](){}; ... \u4f46\u662f\uff0c\u8fd9\u4e2a\u8bed\u6cd5\uff0c\u5728 C++20 \u4e2d\u662f\u652f\u6301\u7684\uff0c\u5982\u679c\u60f3\u63d0\u524d\u4e86\u89e3\uff0c\u53ef\u4ee5\u53c2\u8003 \u8fd9\u4e2a \u3002","title":"\u9650\u5236"},{"location":"Chapter3/#\u5bf9\u73b0\u6709\u95ee\u9898\u7684\u6539\u8fdb","text":"\u603b\u800c\u8a00\u4e4b\uff0c\u8fd9\u4e2a\u65b0\u7684 C++14 \u7279\u6027\u53ef\u4ee5\u89e3\u51b3\u4e00\u4e9b\u95ee\u9898\uff0c\u4f8b\u5982 \u4ec5\u53ef\u79fb\u52a8\u7c7b\u578b \u6216 \u5141\u8bb8\u4e00\u4e9b\u989d\u5916\u7684\u4f18\u5316\u3002","title":"\u5bf9\u73b0\u6709\u95ee\u9898\u7684\u6539\u8fdb"},{"location":"Chapter3/#4-\u6cdb\u578b-lambda","text":"\u8fd9\u662f C++14 \u4e2d\u6709\u5173 Lambda \u7684\u6700\u5927\u7684\u66f4\u65b0\uff01 Lambda \u7684\u65e9\u671f\u89c4\u8303\u5141\u8bb8\u6211\u4eec\u521b\u5efa\u533f\u540d\u51fd\u6570\u5bf9\u8c61\u5e76\u5c06\u5b83\u4eec\u4f20\u9012\u7ed9\u6807\u51c6\u5e93\u4e2d\u7684\u5404\u79cd\u6cdb\u578b\u7b97\u6cd5\u3002 \u7136\u800c\uff0c\u95ed\u5305\u672c\u8eab\u5e76\u4e0d\u662f\u201c\u6cdb\u578b\u201d\u7684\u3002\u4f8b\u5982\uff0c\u60a8\u4e0d\u80fd\u5c06\u6a21\u677f\u53c2\u6570\u6307\u5b9a\u4e3a Lambda \u7684\u53c2\u6570\u3002 \u5f53\u7136\uff0c\u5728 C++14 \u4e2d\uff0c\u6807\u51c6\u5f15\u5165\u4e86 \u6cdb\u578b Lambda \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u5199\uff1a const auto foo = []( auto x , int y ) { std :: cout << x << \", \" << y << '\\n' ; }; foo ( 10 , 1 ); foo ( 10.1234 , 2 ); foo ( \"hello world\" , 3 ); \u6ce8\u610f Lambda \u7684\u53c2\u6570 auto x \uff0c\u5b83\u7b49\u540c\u4e8e\u5728\u95ed\u5305\u7c7b\u578b\u4e2d\u4f7f\u7528\u4e00\u4e2a\u6a21\u677f\u58f0\u660e\uff1a struct { template < typename T > void operator ()( T x , int y ) const { std :: cout << x << \", \" << y << '\\n' ; } } someInstance \u5f53\u7136\uff0c\u5f53\u6709\u591a\u4e2a auto \u53c2\u6570\u65f6\uff0c\u4ee3\u7801\u5c06\u88ab\u6269\u5c55\u4e3a\u591a\u4e2a\u6a21\u677f\u53c2\u6570\uff1a const auto fooDouble = []( auto x , auto y ) { /*...*/ }; \u6269\u5c55\u4e3a\uff1a struct { template < typename T , typename U > void operator ()( T x , U y ) const { /*...*/ } } someOtherInstance ;","title":"4. \u6cdb\u578b Lambda"},{"location":"Chapter3/#\u53ef\u53d8\u6cdb\u578b\u53c2\u6570","text":"\u4f46\u662f\u8fd9\u5e76\u4e0d\u662f\u5168\u90e8\uff0c\u5982\u679c\u4f60\u9700\u8981\u66f4\u66f4\u591a\u7684\u51fd\u6570\u53c2\u6570\u7c7b\u578b\uff0c\u4f60\u53ef\u4ee5\u81ea\u5df1\u8fdb\u884c\u53ef\u53d8\u6027\u6539\u9020\u3002 \u770b\u8fd9\u4e2a\u6817\u5b50\uff1a \u4ee3\u7801 3-10 \u7528\u4e8e\u6c42\u548c\u7684\u53ef\u53d8\u6cdb\u578b Lambda #include <iostream> template < typename T > auto sum ( T x ) { return x ; } template < typename T1 , typename ... T > auto sum ( T1 s , T ... ts ) { return s + sum ( ts ...); } int main () { const auto sumLambda = []( auto ... args ) { std :: cout << \"sum of: \" << sizeof ...( args ) << \" numbers \\n \" ; return sum ( args ...); }; std :: cout << sumLambda ( 1.1 , 2.2 , 3.3 , 4.4 , 5.5 , 6.6 , 7.7 , 8.8 , 9.9 ); } \u8fd9\u6bb5\u6cdb\u578b Lambda \u4ee3\u7801\u4e2d\u4f7f\u7528\u4e86 auto ... \u6765\u4ee3\u8868\u4e00\u4e2a\u53ef\u53d8\u957f\u53c2\u6570\u5305\u3002\u7406\u8bba\u4e0a\uff0c\u5b83\u5c06\u5728\u8c03\u7528\u64cd\u4f5c\u7b26\u4e2d\u88ab\u5c55\u5f00\u4e3a\uff1a struct __anoymousLambda { template < typename ... T > void operator ()( T ... args ) const { /*...*/ } }; \u5728 C++17 \u4e2d\uff0c\u6211\u4eec\u6709\u4e86\u65b0\u7684\u9009\u62e9 \u6298\u53e0\u8868\u8fbe\u5f0f \uff0c\u5b83\u53ef\u4ee5\u6539\u8fdb\u6cdb\u578b\u53ef\u53d8\u53c2\u6570 Lambdas\uff0c\u800c\u5728 C++20 \u4e2d\uff0c\u6211\u4eec\u5c06\u83b7\u5f97\u5bf9\u6a21\u677f\u53c2\u6570\u7684\u66f4\u591a\u63a7\u5236\u3002 \u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 C++17 \u5bf9\u53ef\u53d8\u53c2\u6570\u6cdb\u578b Lambdas \u7684\u66f4\u65b0\u4ee5\u53ca C++20 \u4e2d\u5173\u4e8e \u6a21\u677f Lambda \u7684\u4fe1\u606f","title":"\u53ef\u53d8\u6cdb\u578b\u53c2\u6570"},{"location":"Chapter3/#\u4f7f\u7528\u6cdb\u578b-lambda-\u8fdb\u884c\u5b8c\u7f8e\u8f6c\u53d1","text":"\u4f7f\u7528\u6cdb\u578b Lambda \u8868\u8fbe\u5f0f\uff0c\u5176\u5b9e\u5e76\u4e0d\u9650\u5b9a\u5728\u53ea\u4f7f\u7528 auto x \uff0c\u60a8\u53ef\u4ee5\u50cf\u5176\u4ed6 auto \u53d8\u91cf\u4e00\u6837\u6dfb\u52a0\u4efb\u4f55\u9650\u5b9a\u7b26\uff0c\u5982 auto& \u3001 const auto& \u6216 auto&& \u3002 \u6709\u4e00\u4e2a\u5341\u5206\u4fbf\u5229\u7684\u70b9\u662f\uff0c\u4f60\u53ef\u4ee5\u6307\u5b9a auto&& x \u4f7f\u5176\u6210\u4e3a\u8f6c\u53d1\uff08\u6cdb\u578b\uff09\u5f15\u7528\u3002\u8fd9\u4f7f\u60a8\u53ef\u4ee5\u5b8c\u7f8e\u5730\u8f6c\u53d1\u8f93\u5165\u53c2\u6570\uff1a \u4ee3\u7801 3-11 \u6cdb\u578b Lambda \u8fdb\u884c\u5b8c\u7f8e\u8f6c\u53d1 #include <iostream> #include <string> void foo ( const std :: string & ) { std :: cout << \"foo(const string&) \\n \" ; } void foo ( std :: string && ) { std :: cout << \"foo(string&&) \\n \" ; } int main () { const auto callFoo = []( auto && str ) { std :: cout << \"Calling foo() on: \" << str << '\\n' ; foo ( std :: forward < decltype ( str ) > ( str )); }; const std :: string str = \"Hello World\" ; callFoo ( str ); callFoo ( \"Hello World Ref Ref\" ); } \u8f93\u51fa Calling foo() on: Hello World foo(const string&) Calling foo() on: Hello World Ref Ref foo(string&&) \u793a\u4f8b\u4ee3\u7801\u5b9a\u4e49\u4e86\u4e24\u4e2a\u51fd\u6570\u91cd\u8f7d foo \u7528\u4e8e\u5bf9 std::string \u7684 const \u5f15\u7528\uff0c\u53e6\u4e00\u4e2a\u7528\u4e8e\u5bf9 std::string \u7684\u53f3\u503c\u5f15\u7528\u3002 callFoolambda \u4f7f\u7528\u6cdb\u578b\u53c2\u6570\u4f5c\u4e3a\u6cdb\u578b\u5f15\u7528\uff08 \u5f15\u7528\u8d44\u6599 6 \uff09\u3002 \u5982\u679c\u60a8\u60f3\u5c06\u6b64 Lambda \u91cd\u5199\u4e3a\u5e38\u89c4\u51fd\u6570\u6a21\u677f\uff0c\u5b83\u53ef\u80fd\u5982\u4e0b\u6240\u793a\uff1a template < typename T > void callFooFunc ( T && str ) { std :: cout << \"Calling foo() on: \" << str << '\\n' ; foo ( std :: forward < T > ( str )); } \u5982\u4f60\u6240\u89c1\uff0c\u5728\u6cdb\u578b Lambda \u7684\u52a0\u6301\u4e0b\uff0c\u5728\u7f16\u5199\u672c\u5730\u533f\u540d\u51fd\u6570\u65f6\u5019\uff0c\u4f60\u73b0\u5728\u6709\u66f4\u591a\u7684\u9009\u62e9\u4e86\u3002 \u4f46\u662f\uff0c\u8fd9\u8fd8\u4e0d\u662f\u5168\u90e8\u3002","title":"\u4f7f\u7528\u6cdb\u578b Lambda \u8fdb\u884c\u5b8c\u7f8e\u8f6c\u53d1"},{"location":"Chapter3/#\u51cf\u5c11\u4e00\u4e9b\u9690\u853d\u7684\u7c7b\u578b\u7ea0\u6b63","text":"\u6cdb\u578b Lambda \u5728\u53d1\u73b0\u7c7b\u578b\u63a8\u65ad\u6709\u95ee\u9898\u65f6\uff0c\u5f88\u6709\u5e2e\u52a9\u3002 \u6765\u770b\u4e2a\u4f8b\u5b50\uff1a \u4ee3\u7801 3-13 \u5bf9 std::map \u7684\u8fed\u4ee3\u5668\u8fdb\u884c\u7c7b\u578b\u7ea0\u6b63 #include <algorithm> #include <iostream> #include <map> #include <string> int main () { const std :: map < std :: string , int > numbers {{ \"one\" , 1 }, { \"two\" , 2 }, { \"three\" , 3 }}; // each time entry is copied from pair<const string, int>! std :: for_each ( std :: begin ( numbers ), std :: end ( numbers ), []( const std :: pair < std :: string , int >& entry ) { std :: cout << entry . first << \" = \" << entry . second << '\\n' ; }); } \u8fd9\u6bb5\u4ee3\u7801\u6709\u95ee\u9898\u5417\uff1f entry \u7684\u7c7b\u578b\u6b63\u786e\u5417\uff1f \u5f88\u660e\u663e\uff0c\u8fd9\u91cc\u662f\u6709\u95ee\u9898\u7684\u3002 std::map \u7684\u7c7b\u578b\u5e94\u8be5\u662f std::pair<const key, T> \u800c\u4e0d\u662f const std::pair<Key, T> \u3002\u800c\u5728\u6211\u4eec\u7684\u4ee3\u7801\u4e2d\uff0c\u4f1a\u9020\u6210\u4e0d\u5fc5\u8981\u7684\u989d\u5916\u62f7\u8d1d\uff0c\u5728 std::pair<const std::string, int> \u548c const std::pair<std::string, int>& \uff08\u5176\u4e2d const std::string \u5bf9 std::string \u7684\u8f6c\u6362\uff09\u4e4b\u95f4\u3002 \u4fee\u590d\u4e00\u4e0b\u4ee3\u7801\uff0c\u5b83\u672c\u5e94\u8be5\u662f\u8fd9\u6837\u7684\uff1a std :: for_each ( std :: begin ( numbers ), std :: end ( numbers ), []( const auto & entry ) { std :: cout << entry . first << \" = \" << entry . second << '\\n' ; }); \u73b0\u5728\u6a21\u677f\u53c2\u6570\u63a8\u5bfc\u5c06\u5145\u5206\u83b7\u5f97 entry \u5bf9\u8c61\u7684\u6b63\u786e\u7c7b\u578b\uff0c\u5e76\u4e14\u4e0d\u4f1a\u521b\u5efa\u989d\u5916\u7684\u526f\u672c\u3002 \u800c\u4e14\u4ee3\u7801\u4e5f\u66f4\u52a0\u7b80\u6d01\u4e14\u6613\u8bfb\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u770b\u770b\u53e6\u4e00\u6bb5\u6bd4\u8f83\u957f\u7684\u4ee3\u7801\uff0c\u6253\u5370\u4e86 entry \u7684\u5185\u5b58\u5730\u5740\uff1a \u4ee3\u7801 3-14 \u5bf9 std::map \u7684\u8fed\u4ee3\u5668\u8fdb\u884c\u7c7b\u578b\u7ea0\u6b63\uff0c\u5b8c\u6574\u7248 #include <algorithm> #include <iostream> #include <map> #include <string> int main () { const std :: map < std :: string , int > numbers {{ \"one\" , 1 }, { \"two\" , 2 }, { \"three\" , 3 }}; // print addresses: for ( auto mit = numbers . cbegin (); mit != numbers . cend (); ++ mit ) std :: cout << & mit -> first << \", \" << & mit -> second << '\\n' ; // each time entry is copied from pair<const string, int>! std :: for_each ( std :: begin ( numbers ), std :: end ( numbers ), []( const std :: pair < std :: string , int >& entry ) { std :: cout << & entry . first << \", \" << & entry . second << \": \" << entry . first << \" = \" << entry . second << '\\n' ; }); // this time entries are not copied, they have the same addresses std :: for_each ( std :: begin ( numbers ), std :: end ( numbers ), []( const auto & entry ) { std :: cout << & entry . first << \", \" << & entry . second << \": \" << entry . first << \" = \" << entry . second << '\\n' ; }); } \u53ef\u80fd\u7684\u8f93\u51fa\u7ed3\u679c\uff1a 1 0x165dc40, 0x165dc60 2 0x165dce0, 0x165dd00 3 0x165dc90, 0x165dcb0 4 0x7ffe5ed29a20, 0x7ffe5ed29a40: one = 1 5 0x7ffe5ed29a20, 0x7ffe5ed29a40: three = 3 6 0x7ffe5ed29a20, 0x7ffe5ed29a40: two = 2 7 0x165dc40, 0x165dc60: one = 1 8 0x165dce0, 0x165dd00: three = 3 9 0x165dc90, 0x165dcb0: two = 2 \u524d\u4e09\u884c\u8f93\u51fa\u4e86 map \u7684 key \u548c value \u7684\u5185\u5b58\u5730\u5740\u3002\u7b2c 4\u30015\u30016 \u884c\u5206\u522b\u5c55\u793a\u4e86\u5728\u5faa\u73af\u8fed\u4ee3\u4e2d\u4e34\u65f6\u62f7\u8d1d\u51fa\u6765\u7684\u5185\u5b58\u503c\u3002\u6700\u540e\u4e09\u884c\u5219\u662f\u4f7f\u7528 const auto& \u7684\u7248\u672c\uff0c\u5f88\u660e\u663e\u53ef\u4ee5\u770b\u51fa\u6765\uff0c\u548c\u524d\u4e09\u884c\u4f7f\u7528\u81ea\u8eab\u8fed\u4ee3\u7684\u5185\u5bb9\u662f\u4e00\u6837\u7684\u3002 \u5728\u6240\u4e3e\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5173\u6ce8\u62f7\u8d1d\u4ea7\u751f\u7684 key \u7684\u989d\u5916\u526f\u672c\uff0c\u4f46\u91cd\u8981\u7684\u662f\u8981\u4e86\u89e3 entry \u4e5f\u88ab\u590d\u5236\u4e86\u3002 \u5f53\u4f7f\u7528\u50cf int \u8fd9\u6837\u7684\u201c\u5ec9\u4ef7\u201d\u7684\u590d\u5236\u7c7b\u578b\u65f6\uff0c\u8fd9\u4e5f\u8bb8\u4e0d\u662f\u4ec0\u4e48\u95ee\u9898\uff0c\u4f46\u5982\u679c\u5bf9\u8c61\u50cf\u5b57\u7b26\u4e32\u4e00\u6837\u66f4\u5927\uff0c\u90a3\u4e48\u5c31\u4f1a\u4ea7\u751f\u5f88\u5927\u7684\u62f7\u8d1d\u5f00\u9500\u548c\u6027\u80fd\u635f\u8017\u3002 \u5728 C++20 \u4e2d\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u66f4\u597d\u5730\u63a7\u5236 Lambda \u7684\u6a21\u677f\u53c2\u6570\uff0c\u56e0\u4e3a C++20 \u7684\u65b0\u4fee\u8ba2\u5f15\u5165\u4e86\u6a21\u677f Lambda\u3001\u6982\u5ff5\u548c\u53d7\u7ea6\u675f\u7684 auto \u53c2\u6570\u3002","title":"\u51cf\u5c11\u4e00\u4e9b\u9690\u853d\u7684\u7c7b\u578b\u7ea0\u6b63"},{"location":"Chapter3/#5-\u4f7f\u7528-lambda-\u4ee3\u66ff-stdbind1st-\u548c-stdbind2nd","text":"\u5728 C++98/03 \u7ae0\u8282\uff0c\u6211\u63d0\u5230\u5e76\u5c55\u793a\u4e86\u4e00\u4e9b\u8f85\u52a9\u51fd\u6570\uff0c\u50cf std::bind1st \u548c std::bind2nd \u4e4b\u7c7b\u3002\u7136\u800c\uff0c\u8fd9\u4e9b\u51fd\u6570\u5728 C++11 \u4e2d\u9010\u6e10\u5e9f\u5f03\uff0c\u5728 C++17 \u4e2d\uff0c\u8fd9\u4e9b\u51fd\u6570\u5df2\u88ab\u5b8c\u5168\u79fb\u9664\u3002 \u50cf bind1st() / bind2nd() / mem_fun() \u7b49\u51fd\u6570\uff0c\u90fd\u662f\u5728 C++98 \u65f6\u671f\u88ab\u5f15\u5165\u8fdb\u6807\u6ce8\u5e93\u7684\uff0c\u800c\u73b0\u5728\u8fd9\u4e9b\u51fd\u6570\u5df2\u4e0d\u518d\u9700\u8981\u4e86\uff0c\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 Lambda \u6216\u8005\u66f4\u73b0\u4ee3\u5316\u7684 C++ \u6280\u5de7\u6765\u4ee3\u66ff\u3002 \u5f53\u7136\u4e86\uff0c\u8fd9\u4e9b\u51fd\u6570\u4e5f\u6ca1\u6709\u83b7\u5f97\u5bf9\u4e8e\u5b8c\u7f8e\u8f6c\u53d1\u3001\u6cdb\u578b\u6a21\u677f\u3001 decltype \u4ee5\u53ca\u5176\u4ed6 C++11 \u7279\u6027\u7684\u66f4\u65b0\uff0c\u6240\u4ee5\uff0c\u6211\u5efa\u8bae\u4e0d\u8981\u5728\u73b0\u4ee3\u7f16\u7a0b\u4e2d\u4f7f\u7528\u8fd9\u4e9b\u5df2\u5f03\u7528\u7684\u5185\u5bb9\u3002 \u4e0b\u9762\u662f\u5df2\u88ab\u5e9f\u5f03\u7684\u51fd\u6570\u5217\u8868\uff1a unary_function()/pointer_to_unary_function() binary_function()/pointer_to_binary_function() bind1st()/binder1st bind2nd()/binder2nd ptr_fun() mem_fun() mem_fun_ref() \u5f53\u7136\uff0c\u4ec5\u4ec5\u662f\u4e3a\u4e86\u66ff\u6362 bind1st \u6216\u8005 bind2nd \u7684\u8bdd\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 std::bind ( C++11 \u5f15\u5165\uff09\u6216\u8005 std::bind_front ( C++20 \u5f15\u5165\uff09\u3002 \u8003\u8651\u4e0b\uff0c\u8fd9\u4e9b\u6211\u4eec\u4e4b\u524d\u4f7f\u7528\u65e7\u51fd\u6570\u6240\u7f16\u5199\u7684\u8fd9\u4e9b\u4ee3\u7801\u8981\u5982\u4f55\u4fee\u6539\uff1a const auto onePlus = std :: bind1st ( std :: plus < int > (), 1 ); const auto minusOne = std :: bind2nd ( std :: minus < int > (), 1 ); std :: cout << onePlus ( 10 ) << \", \" << minusOne ( 10 ) << '\\n' ; \u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c onePlus \u662f\u7531 std::plus \u7ec4\u6210\u7684\u4e00\u4e2a\u53ef\u8c03\u7528\u5bf9\u8c61\uff0c\u5e76\u4e14\u7b2c\u4e00\u53c2\u6570\u88ab\u8c03\u7528\u4fee\u6b63\u3002 \u6362\u79cd\u8bf4\u6cd5\uff0c\u5f53\u4f60\u5199\u4e0b onePlus(n) \u7684\u65f6\u5019\uff0c\u5b83\u4f1a\u88ab\u5c55\u5f00\u4e3a std::plus(1, n) \u3002 \u7c7b\u4f3c\u5730\uff0c minusOne \u662f\u7531 std::minus \u7ec4\u6210\u7684\u4e00\u4e2a\u53ef\u8c03\u7528\u5bf9\u8c61\uff0c\u5e76\u4e14\u7b2c\u4e8c\u53c2\u6570\u88ab\u8c03\u7528\u4fee\u6b63\u3002 miniusOne(n) \u4f1a\u88ab\u5c55\u5f00\u4e3a std::minus(n, 1) \u3002 \u4e0a\u9762\u7684\u8bed\u6cd5\u53ef\u80fd\u4f1a\u5341\u5206\u7684\u9ebb\u70e6\uff0c\u6211\u4eec\u4e0b\u9762\u6765\u770b\u770b\u5982\u4f55\u7528\u73b0\u4ee3\u5316 C++ \u6280\u672f\u6765\u4f18\u5316\u4ed6\u4eec\u3002","title":"5. \u4f7f\u7528 Lambda \u4ee3\u66ff std::bind1st \u548c std::bind2nd"},{"location":"Chapter3/#\u4f7f\u7528\u73b0\u4ee3-c-\u6280\u672f","text":"\u6211\u4eec\u9996\u5148\u7528 std::bind() \u6765\u66ff\u6362 bind1st \u548c bind2nd \u4ee3\u7801 3-15 \u7528 std::bind \u6765\u4ee3\u66ff #include <algorithm> #include <functional> #include <iostream> int main () { using std :: placeholders :: _1 ; const auto onePlus = std :: bind ( std :: plus < int > (), _1 , 1 ); const auto minusOne = std :: bind ( std :: minus < int > (), 1 , _1 ); std :: cout << onePlus ( 10 ) << \", \" << minusOne ( 10 ) << '\\n' ; } std::bind \u4f1a\u66f4\u52a0\u7075\u6d3b\uff0c\u5b83\u652f\u6301\u591a\u4e2a\u53c2\u6570\uff0c\u751a\u81f3\u4f60\u53ef\u4ee5\u5bf9\u53c2\u6570\u91cd\u65b0\u6392\u5e8f\u3002 \u5728\u53c2\u6570\u7ba1\u7406\u4e0a\uff0c\u4f60\u9700\u8981\u4f7f\u7528 \u5360\u4f4d\u7b26 placeholders \u3002 \u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u4f7f\u7528\u4e86 _1 \u6765\u4ee3\u8868\u7b2c\u4e00\u4e2a\u53c2\u6570\u9700\u8981\u88ab\u4f20\u5165\u6700\u7ec8\u7684\u51fd\u6570\u5bf9\u8c61\u4e2d\u7684\u672a\u77e5\u3002 \u867d\u7136 std::bind \u6bd4\u8d77 C++98/03 \u4e2d\u7684\u8f85\u52a9\u51fd\u6570\u597d\u7528\u591a\u4e86\uff0c\u4f46\u662f\u5b83\u4ecd\u7136\u4e0d\u5982 Lambda \u4f7f\u7528\u8d77\u6765\u81ea\u7136\u548c\u4fbf\u6377\u3002 \u6211\u4eec\u6765\u5c1d\u8bd5\u5199\u4e00\u4e0b\u4e0a\u9762\u4f8b\u5b50\u4e2d\u5bf9\u5e94\u7684 Lambda \u8868\u8fbe\u5f0f\uff1a auto lamOnePlus1 = []( int b ) { return 1 + b ; }; auto lamMinusOne1 = []( int b ) { return b - 1 ; }; std :: cout << lamOnePlus1 ( 10 ) << \", \" << lamMinusOne1 ( 10 ) << '\\n' ; \u5f53\u7136\uff0c\u5728 C++14 \u4e2d\u6211\u4eec\u4e5f\u53ef\u4ee5\u7528\u521d\u59cb\u5316\u5668\u6765\u8fdb\u4e00\u6b65\u4f18\u5316 Lambda\uff0c\u8ba9 Lambda \u66f4\u52a0\u7075\u6d3b\uff1a auto lamOnePlus1 = [ a = 1 ]( int b ) { return a + b ; }; auto lamMinusOne1 = [ a = 1 ]( int b ) { return b - a ; }; std :: cout << lamOnePlus1 ( 10 ) << \", \" << lamMinusOne1 ( 10 ) << '\\n' ; \u5f88\u663e\u7136\uff0cLambda \u7248\u672c\u66f4\u7b80\u6d01\uff0c\u66f4\u6613\u8bfb\u3002\u8fd9\u4e00\u70b9\u5c06\u5728\u540e\u9762\u66f4\u590d\u6742\u7684\u793a\u4f8b\u4e2d\u66f4\u52a0\u51f8\u663e\u51fa\u6765\u3002","title":"\u4f7f\u7528\u73b0\u4ee3 C++ \u6280\u672f"},{"location":"Chapter3/#\u51fd\u6570\u7ec4\u5408","text":"\u6700\u540e\u4e00\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u6765\u770b\u770b\u8fd9\u4e2a\uff0c\u5728\u8868\u8fbe\u5f0f\u4e2d\u5d4c\u5957\u4f7f\u7528\u51fd\u6570\u7ec4\u5408\uff1a \u4ee3\u7801 3-16 std::bind \u4e2d\u4f7f\u7528\u51fd\u6570\u7ec4\u5408 #include <algorithm> #include <functional> #include <vector> int main () { using std :: placeholders :: _1 ; const std :: vector < int > v { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 }; const auto val = std :: count_if ( v . begin (), v . end (), std :: bind ( std :: logical_and < bool > (), std :: bind ( std :: greater < int > (), _1 , 2 ), std :: bind ( std :: less < int > (), _1 , 6 ) ) ); return val ; } \u4f60\u80fd\u5feb\u901f\u89e3\u8bfb\u51fa\u6765\u8fd9\u6bb5\u4ee3\u7801\u7684\u5de5\u4f5c\u903b\u8f91\u561b\uff1f \u4e0d\u8bba\u662f\u5426\u8bfb\u61c2\u4e86\uff0c\u8fd9\u6bb5\u4ee3\u7801\u90fd\u53ef\u4ee5\u91cd\u65b0\u4e66\u5199\u4e3a\u66f4\u7b80\u6d01\u548c\u53ef\u8bfb\u7684\u7248\u672c\uff1a std :: vector < int > v { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 }; const auto more2less6 = std :: count_if ( v . begin (), v . end (), []( int x ) { return x > 2 && x < 6 ; }); \u73b0\u5728\u5e94\u8be5\u597d\u61c2\u591a\u4e86\uff1f \u6709\u4e00\u4e9b\u5173\u4e8e std::bind \u548c Lambda \u7684\u7b2c\u4e09\u65b9\u6307\u5bfc\u6027\u610f\u89c1\uff1a\u6bd4\u5982\u300aEffective Modern C++\u300b\u4e2d\u7684\u7b2c 34 \u9879\u6761\u6b3e\uff0c\u6bd4\u5982 Google Abseil Blog \u4e2d\u7684 Avoid std::bind","title":"\u51fd\u6570\u7ec4\u5408"},{"location":"Chapter3/#6-lambda-\u63d0\u5347lifting-with-lambda","text":"\u5c3d\u7ba1\u6807\u51c6\u5e93\u4e2d\u63d0\u4f9b\u7684\u5e38\u7528\u7b97\u6cd5\u5df2\u7ecf\u5f88\u65b9\u4fbf\u7684\uff0c\u4f46\u662f\u4ecd\u7136\u6709\u4e00\u4e9b\u60c5\u51b5\u4e0d\u592a\u597d\u89e3\u51b3\u3002 \u6bd4\u5982\uff0c\u5411\u6a21\u677f\u51fd\u6570\u4e2d\u4f20\u9012\u6709\u91cd\u8f7d\u7684\u51fd\u6570\u4f5c\u4e3a\u53ef\u8c03\u7528\u5bf9\u8c61\u3002 \u4ee3\u7801 3-17 \u8c03\u7528\u91cd\u8f7d\u51fd\u6570 #include <algorithm> #include <vector> // two overloads: void foo ( int ) {} void foo ( float ) {} int main () { const std :: vector < int > vi { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 }; std :: for_each ( vi . begin (), vi . end (), foo ); } \u8fd9\u4e2a\u4f8b\u5b50\u91cc\u9762 foo \u5206\u522b\u6709\u5bf9\u4e8e int \u548c float \u7684\u4e24\u4e2a\u91cd\u8f7d\uff0c\u5e76\u4e14\u4f5c\u4e3a\u53ef\u8c03\u7528\u5bf9\u8c61\u4f20\u9012\u7ed9\u4e86\u6a21\u677f\u51fd\u6570 for_each \u3002\u9057\u61be\u7684\u662f\uff0c\u5728 GCC9 \u4e2d\uff0c\u7f16\u8bd1\u4f1a\u63d0\u793a\u5982\u4e0b\u9519\u8bef\uff1a error: no matching function for call to for_each(std::vector<int>::iterator, std::vector<int>::iterator, <unresolved overloaded function type>) std::for_each(vi.begin(), vi.end(), foo); ^^^^^ \u8fd9\u91cc\u51fa\u9519\u7684\u4e3b\u8981\u539f\u56e0\u662f\uff0c foo \u4f5c\u4e3a\u4e00\u4e2a\u6a21\u677f\u53c2\u6570\uff0c\u5b83\u9700\u8981\u91cd\u65b0\u88ab\u786e\u5b9a\u4e3a\u4e00\u4e2a\u786e\u5b9a\u7684\u7c7b\u578b\u3002\u4f46\u662f foo \u672c\u8eab\u53c8\u6709\u4e24\u4e2a\u91cd\u8f7d\uff0c\u5e76\u4e14\u5b9e\u9645\u4e0a\u6570\u636e\u53ef\u4ee5\u540c\u65f6\u88ab\u4e24\u4e2a\u91cd\u8f7d\u90fd\u63a5\u53d7\uff0c\u8fd9\u662f\u7f16\u8bd1\u5668\u6240\u4e0d\u80fd\u63a5\u53d7\u7684\u3002 \u4f46\u662f\uff0c\u8fd9\u91cc\u6709\u4e2a\u6280\u5de7\u5c31\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 Lambda \u6765\u4ee3\u66ff\u91cd\u8f7d\u7684\u53ef\u8c03\u7528\u5bf9\u8c61\u3002\u4e0a\u9762\u7684\u4ee3\u7801\u5373\u53ef\u4fee\u6539\u4e3a\uff1a std :: for_each ( vi . begin (), vi . end (), []( auto x ) { return foo ( x ); }); \u73b0\u5728\u6211\u4eec\u4e5f\u53ef\u4ee5\u7528\u5305\u88c5\u5668\uff08\u6cdb\u578b Lambda\uff09\u6765\u89e3\u51b3\u91cd\u8f7d\u7684\u95ee\u9898\uff0c\u8ba9\u8c03\u7528\u65f6\u53ef\u4ee5\u627e\u5230\u9002\u5f53\u7684\u91cd\u8f7d\u5bf9\u8c61\u3002 \u5f53\u7136\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5b8c\u7f8e\u8f6c\u53d1\u6765\u66f4\u52a0\u5de7\u5999\u7684\u89c4\u907f\u6389\u91cd\u8f7d\u7684\u60c5\u51b5\u3002 std :: for_each ( vi . begin (), vi . end (), []( auto && x ) { return foo ( std :: forward < decltype ( x ) > ( x ); }); \u4e0b\u9762\u662f\u4e00\u4e2a\u5e94\u7528\u7684\u4f8b\u5b50\uff1a \u4ee3\u7801 3-18 \u6cdb\u578b Lambda \u548c\u51fd\u6570\u91cd\u8f7d #include <algorithm> #include <iostream> #include <vector> void foo ( int i ) { std :: cout << \"int: \" << i << \" \\n \" ; } void foo ( float f ) { std :: cout << \"float: \" << f << \" \\n \" ; } int main () { const std :: vector < int > vi { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 }; std :: for_each ( vi . begin (), vi . end (), []( auto && x ) { return foo ( std :: forward < decltype ( x ) > ( x )); }); } \u4f46\u662f\uff0c\u5bf9\u4e8e\u66f4\u9ad8\u7ea7\u6216\u8005\u66f4\u590d\u6742\u7684\u573a\u666f\uff0c\u8fd9\u53ef\u80fd\u4e0d\u662f\u9996\u9009\u89e3\u51b3\u65b9\u6848\uff0c\u56e0\u4e3a\u6211\u4eec\u6ca1\u6709\u4e25\u683c\u9075\u5b88\u53ef\u53d8\u53c2\u6570\u548c\u5f02\u5e38\u89c4\u8303\u3002 \u5982\u679c\u9700\u8981\u4e00\u4e2a\u66f4\u52a0\u6cdb\u578b\u3001\u6216\u8005\u66f4\u597d\u7684\u89e3\u51b3\u529e\u6cd5\u3002\u90a3\u53ef\u80fd\u9700\u8981\u591a\u5199\u4e00\u4e9b\u4ee3\u7801\u4e86\uff1a #define LIFT(foo) \\ [](auto&&... x) noexcept( \\ noexcept(foo(std::forward<decltype(x)>(x)...))) -> decltype(foo(std::forward<decltype(x)>(x)...)) { \\ return foo(std::forward<decltype(x)>(x)...); \\ } \u770b\u7740\u6709\u70b9\u61f5\uff1f\u522b\u6025\uff0c\u6211\u4eec\u6765\u4e00\u70b9\u70b9\u89e3\u6790\u8fd9\u6bb5\u4ee3\u7801\u7684\u529f\u80fd\u3002 \u8fd4\u56de foo(std::forward<decltype(x)>(x)...) \u5b8c\u7f8e\u8f6c\u53d1\uff0c\u8fd9\u6837\u6211\u4eec\u624d\u80fd\u5b8c\u6574\u4f20\u9012\u8f93\u5165\u53c2\u6570\u5230 foo \u51fd\u6570\u4e2d\uff0c\u5e76\u4e14\u4fdd\u7559\u7c7b\u578b\u3002 noexcept(noexcept(foo(std::forward<decltype(x)>(x)...))) \u4f7f\u7528 noexcept \u64cd\u4f5c\u7b26\uff08\u88ab\u5d4c\u5957\u7684\u90a3\u4e00\u4e2a\uff09\u68c0\u67e5 \u53ef\u8c03\u7528\u5bf9\u8c61 foo \u7684\u5f02\u5e38\u89c4\u8303\u3002 \u4f9d\u8d56\u4e8e\u5f02\u5e38\u7684\u68c0\u67e5\u7ed3\u679c\uff0c\u6700\u7ec8\u4f1a\u4ea7\u751f noexcept(true) \u6216\u8005 noexcept(false) \u3002 decltype(foo(std::forward<decltype(x)>(x)...)) \u63a8\u65ad\u5305\u88c5 Lambda \u7684\u6700\u7ec8\u8fd4\u56de\u7c7b\u578b Lambda \u63d0\u5347\uff08LIFT\uff09\u901a\u8fc7\u5b8f\u5b9a\u4e49\u7684\u65b9\u5f0f\u5b9e\u73b0\uff0c\u4e0d\u7136\u6bcf\u6b21\u9700\u8981\u4f7f\u7528\u63d0\u5347\u7684\u65f6\u5019\u4f60\u90fd\u9700\u8981\u7f16\u5199\u7c7b\u4f3c\u7684\u4ee3\u7801\uff0c\u5e76\u5c06\u5176\u4f20\u9012\u7ed9\u4e00\u4e2a\u7b97\u6cd5\u4e2d\u3002\u800c\u4f7f\u7528\u5b8f\u5b9a\u4e49\uff0c\u8fd9\u662f\u4e00\u79cd\u6700\u7b80\u5355\u7684\u8bed\u6cd5\u5b9e\u73b0\u4e86\u3002 \u6709\u5174\u8da3\u7684\u8bdd\uff0c\u53ef\u4ee5\u770b\u770b\u4f7f\u7528 Lambda \u63d0\u5347\u540e\u7684 \u6700\u7ec8\u4ee3\u7801 \u3002","title":"6. Lambda \u63d0\u5347\uff08LIFTing with Lambda\uff09"},{"location":"Chapter3/#7-\u9012\u5f52-lambda","text":"\u5982\u679c\u4f60\u6709\u4e00\u4e2a\u5e38\u89c4\u51fd\u6570\uff0c\u90a3\u4e48\u9012\u5f52\u8c03\u7528\u8fd9\u51fd\u6570\u5341\u5206\u5bb9\u6613\u7684\u3002\u6bd4\u5982\uff0c\u6211\u4eec\u8ba1\u7b97\u9636\u4e58\u65f6\u5019\u7684\u9012\u5f52\u51fd\u6570\u5e94\u8be5\u662f\u8fd9\u6837\u7684\uff1a \u4ee3\u7801 3-19 \u5e38\u89c4\u51fd\u6570\u7684\u9012\u5f52\u8c03\u7528 int factorial ( int n ) { return n > 1 ? n * factorial ( n - 1 ) : 1 ; } int main () { return factorial ( 5 ); } \u6211\u4eec\u6765\u5c1d\u8bd5\u7528 Lambda \u7684\u65b9\u5f0f\u8fdb\u884c\u9012\u5f52\uff1a \u4ee3\u7801 3-20 Lambda \u9012\u5f52\u7684\u9519\u8bef\u793a\u4f8b int main () { auto factorial = []( int n ) { return n > 1 ? n * factorial ( n - 1 ) : 1 ; }; return factorial ( 5 ); } \u8fd9\u6bb5\u4ee3\u7801\u4e0d\u4f1a\u7f16\u8bd1\u6210\u529f\uff0c\u5728 GCC \u4e2d\u4f1a\u63d0\u793a\u7f16\u8bd1\u9519\u8bef\uff1a error:use of 'factorial'before deduction of 'auto' \u7531\u4e8e\u6211\u4eec\u65e0\u6cd5\u5728 Lambda \u51fd\u6570\u4f53\u5185\u8bbf\u95ee factorial \u672c\u8eab\uff0c\u56e0\u4e3a\u4ed6\u8fd8\u5c1a\u672a\u88ab\u7f16\u8bd1\u5668\u5b8c\u5168\u8bc6\u522b\u51fa\u6765\u3002 \u6211\u4eec\u6df1\u5165\u4e00\u4e0b\uff0c\u5148\u5c06\u8fd9\u6bb5\u4ee3\u7801\u5c55\u5f00\u4e3a\u4e00\u4e2a\u7b80\u5355\u7684\u4eff\u51fd\u6570\uff1a struct fact { int operator ()( int n ) const { return n > 1 ? n * factorial ( n - 1 ) : 1 ; }; }; auto factorial = fact {}; \u8fd9\u6837\u5c31\u6e05\u6670\u5f88\u591a\u4e86\uff0c\u56e0\u4e3a\u5728\u8c03\u7528\u64cd\u4f5c\u7b26 () \u4e2d\uff0c\u6211\u4eec\u538b\u6839\u65e0\u6cd5\u8bbf\u95ee\u5230\u4eff\u51fd\u6570\u7c7b\u578b\u3002 \u5982\u679c\u6211\u4eec\u8981\u5b9e\u73b0\u9012\u5f52\uff0c\u90a3\u4e48\u8fd9\u91cc\u6709\u4e24\u4e2a\u9014\u5f84\u53ef\u4ee5\u8003\u8651\u4e0b\uff1a \u4f7f\u7528 std::function \u5e76\u4e14\u6355\u83b7\u5b83 \u4f7f\u7528\u5185\u90e8 Lambda \u7136\u540e\u4f20\u9012\u6cdb\u578b\u53c2\u6570","title":"7. \u9012\u5f52 Lambda"},{"location":"Chapter3/#\u5229\u7528-stdfunction","text":"\u5c06 Lambda \u8868\u8fbe\u5f0f\u8d4b\u503c\u7ed9\u4e00\u4e2a std::function \uff0c\u540e\u7eed\u6355\u83b7\u8be5\u8fd9\u4e2a\u5bf9\u8c61\u5230 Lambda \u51fd\u6570\u4f53\u5185\uff0c\u5b9e\u73b0\u9012\u5f52\u3002 \u4ee3\u7801 3-21 \u4f7f\u7528 std::function \u5b9e\u73b0 Lambda \u9012\u5f52 #include <functional> int main () { const std :: function < int ( int ) > factorial = [ & factorial ]( int n ) { return n > 1 ? n * factorial ( n - 1 ) : 1 ; }; return factorial ( 5 ); } \u8fd9\u4e2a\u793a\u4f8b\u91cc\u9762\uff0c\u6211\u4eec\u5728 Lambda \u51fd\u6570\u4f53\u5185\u8c03\u7528\u6355\u83b7\u7684 std::function \u5bf9\u8c61 factorial \u3002 \u6b64\u65f6\u8fd9\u4e2a\u5bf9\u8c61\u662f\u5b8c\u6574\u5b9a\u4e49\u7684\uff0c\u6240\u4ee5\u7f16\u8bd1\u5668\u8bbf\u95ee\u5e76\u8c03\u7528\u5bf9\u8c61\u5c31\u4e0d\u5b58\u5728\u95ee\u9898\u4e86\u3002 \u5982\u679c\u4f60\u60f3\u4f7f\u7528\u4e00\u4e2a\u65e0\u72b6\u6001\u7684 Lambda\uff0c\u90a3\u4e48\u4f60\u751a\u81f3\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u51fd\u6570\u6307\u9488\u6765\u4ee3\u66ff std::function \uff0c\u8fd9\u6837\u5185\u5b58\u5360\u7528\u4f1a\u66f4\u5c11\u3002 \u4f46\u662f\uff0c\u4f46\u662f\uff0c\u4e0b\u9762\u8fd9\u79cd\u65b9\u5f0f\u4f1a\u66f4\u597d\u3002","title":"\u5229\u7528 std::function"},{"location":"Chapter3/#\u5185\u90e8-lambda-\u548c\u6cdb\u578b\u53c2\u6570","text":"\u6765\u770b\u770b C++14 \u4e2d\u7684\u7528\u6cd5\uff1a \u4ee3\u7801 3-22 \u4f7f\u7528\u5185\u90e8 Lambda \u6765\u5b9e\u73b0 Lambda \u9012\u5f52 int main () { const auto factorial = []( int n ) noexcept { const auto f_impl = []( int n , const auto & impl ) noexcept -> int { return n > 1 ? n * impl ( n - 1 , impl ) : 1 ; }; return f_impl ( n , f_impl ); }; return factorial ( 5 ); } \u8fd9\u6b21\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u5185\u90e8 Lambda\uff08 f_impl \uff09\u6765\u6267\u884c\u4e3b\u903b\u8f91\u3002 \u540c\u65f6\uff0c\u6211\u4eec\u5411\u5b83\u4f20\u9012\u4e00\u4e2a\u6cdb\u578b\u53c2\u6570 const auto& impl \uff0c\u8fd9\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u6211\u4eec\u53ef\u4ee5\u9012\u5f52\u8c03\u7528\u7684\u53ef\u8c03\u7528\u5bf9\u8c61\u3002 \u591a\u4e8f\u4e86 C++14 \u4e2d\u7684\u6cdb\u578b Lambda\uff0c\u6211\u4eec\u53ef\u4ee5\u907f\u514d std::function \u7684\u5f00\u9500\u5e76\u4f9d\u8d56 auto \u8fdb\u884c\u7c7b\u578b\u63a8\u5bfc\u3002","title":"\u5185\u90e8 Lambda \u548c\u6cdb\u578b\u53c2\u6570"},{"location":"Chapter3/#\u66f4\u591a\u6280\u5de7","text":"\u53ef\u4ee5\u53c2\u9605\u4e0b\u9762\u4e24\u4e2a\u94fe\u63a5\u6765\u5b66\u4e60\u66f4\u591a\u5173\u4e8e lambda \u9012\u5f52\u7684\u6280\u5de7\uff1a Recursive lambda functions in C++11 Recursive lambdas in C++(14) - Pedro Melendez","title":"\u66f4\u591a\u6280\u5de7"},{"location":"Chapter3/#\u4f7f\u7528\u9012\u5f52-lambda-\u662f\u6700\u597d\u7684\u9009\u62e9\u5417","text":"\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5b66\u5230\u4e86\u4e00\u4e9b\u6709\u5173 Lambda \u8868\u8fbe\u5f0f\u7684\u6280\u5de7\u3002 \u5c3d\u7ba1\u5982\u6b64\uff0c\u8fd9\u4e9b\u6280\u5de7\u5b9e\u73b0\u8d77\u6765\u7684\u590d\u6742\u6027\u8fdc\u8fdc\u9ad8\u4e8e\u4ec5\u4f7f\u7528\u5e38\u89c4\u9012\u5f52\u51fd\u6570\u8c03\u7528\u7684\u7b80\u5355\u89e3\u51b3\u65b9\u6848\u3002 \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u9012\u5f52 Lambda \u4e0d\u662f\u6700\u597d\u548c\u6700\u76f4\u63a5\u7684\u9009\u62e9\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u590d\u6742\u9012\u5f52 Lambda \u7684\u4f18\u70b9\u662f\u5b83\u7684\u5c40\u90e8\u6027\u548c\u91c7\u7528 auto \u53c2\u6570\u7684\u80fd\u529b\u3002","title":"\u4f7f\u7528\u9012\u5f52 Lambda \u662f\u6700\u597d\u7684\u9009\u62e9\u5417\uff1f"},{"location":"Chapter3/#8-\u603b\u7ed3","text":"\u5728\u672c\u7ae0\uff0cC++14 \u4e3a Lambda \u8868\u8fbe\u5f0f\u5e26\u6765\u4e86\u51e0\u4e2a\u5173\u952e\u6027\u7684\u6539\u8fdb\u3002 \u7531\u4e8e C++14 \u53ef\u4ee5\u5728 Lambda \u8303\u56f4\u5185\u58f0\u660e\u65b0\u7684\u53d8\u91cf\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u5728\u6a21\u677f\u4ee3\u7801\u4e2d\u66f4\u9ad8\u6548\u7684\u4f7f\u7528 Lambda\u3002 \u5728\u4e0b\u4e00\u7ae0\u4e2d\uff0c\u6211\u4eec\u4f1a\u79fb\u6b65 C++17\uff0c\u6765\u770b\u770b\u66f4\u591a\u7684 Lambda \u66f4\u65b0\u3002","title":"8. \u603b\u7ed3"},{"location":"Chapter4/","text":"\u56db\u3001Lambda in C++17 C++17 \u4e3a Lambda \u8868\u8fbe\u5f0f\u6dfb\u52a0\u4e86\u4e24\u4e2a\u91cd\u8981\u7684\u589e\u5f3a\u7279\u6027\uff1a constexpr Lambdas *this \u7684\u6355\u83b7 \u65b0\u7684 C++ \u4fee\u8ba2\u7248\u66f4\u65b0\u4e86\u5176\u7c7b\u578b\u7cfb\u7edf\uff0c\u73b0\u5728\u5305\u542b\u4e86\u5173\u4e8e Lambda \u8868\u8fbe\u5f0f\u7684\u5f02\u5e38\u89c4\u8303\u3002 \u4f60\u53ef\u4ee5\u5728 N4659 \u4e2d\u7684 [expr.prim.lambda] \u7ae0\u8282\u67e5\u9605\u6807\u51c6\u89c4\u8303\u4e2d Lambda \u76f8\u5173\u7684\u5185\u5bb9\u3002 \u5728\u672c\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u91cd\u70b9\u5173\u6ce8\u4ee5\u4e0b\u5185\u5bb9\uff1a \u5728 C++17 \u4e2d\u5982\u4f55\u63d0\u5347 \u7acb\u5373\u8c03\u7528\u51fd\u6570\u8868\u8fbe\u5f0f\uff08IIFE pattern\uff09 \u5728 C++17 \u4e2d\u5982\u4f55\u63d0\u5347 \u5e26\u6709\u6298\u53e0\u8868\u8fbe\u5f0f\u7684\u53ef\u53d8\u6cdb\u578b Lambda\uff08Vriadic Generic Lambdas with Fold Expressions\uff09 \u4ece\u591a\u4e2a Lambda \u6d3e\u751f Lambda \u548c\u5f02\u6b65\u7f16\u7a0b 1. Lambda \u8bed\u6cd5\u66f4\u65b0 \u5728 C++17\uff0c\u6709\u4e00\u4e9b\u5173\u4e8e Lamdba \u8868\u8fbe\u5f0f\u7684\u6539\u53d8\uff1a \u4f60\u53ef\u4ee5\u5728\u53c2\u6570\u5217\u8868\u4e4b\u540e\u52a0\u4e0a constexpr \u5173\u952e\u5b57 \u52a8\u6001\u5f02\u5e38\u89c4\u8303\u5728 C++11 \u4e2d\u88ab\u5f03\u7528\uff0c\u5728 C++17 \u4e2d\u88ab\u79fb\u9664\uff0c\u6240\u4ee5\u4f60\u5e94\u8be5\u4f7f\u7528 noexcept [] () specifiers exception attr -> ret { /*code; */ } ^ ^ ^ ^ | | | | | | | optional : trailing return type | | | | | optional : mutable , constexpr , noexcept , attributes | | | parameter list ( optional when no specifiers added ) | lambda introducer with an optional capture list \u4f60\u53ef\u4ee5\u5728\u4e0b\u4e00\u8282\u4e2d\u4e86\u89e3\u5230\u66f4\u591a\u7684\u53d8\u66f4\u3002 2. \u7c7b\u578b\u7cfb\u7edf\u4e2d\u7684\u5f02\u5e38\u89c4\u8303 \u5728\u6211\u4eec\u4e86\u89e3\u5173\u4e8e Lambda \u7684\u8bed\u6cd5\u6539\u8fdb\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u5f15\u5165\u4e00\u4e2a C++17 \u7684\u901a\u7528\u8bed\u8a00\u7279\u6027\u3002 \u51fd\u6570\u7684\u5f02\u5e38\u89c4\u8303\u8fc7\u53bb\u4e0d\u5c5e\u4e8e\u51fd\u6570\u7c7b\u578b\u7684\u4e00\u90e8\u5206\uff0c\u4f46\u662f\u5728 C++17 \u4e2d\u88ab\u7eb3\u5165\u5176\u4e2d\uff0c\u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u6709\u4e24\u79cd\u51fd\u6570\u7c7b\u578b\uff0c\u4e00\u79cd\u6709 noexcept \uff0c\u53e6\u4e00\u79cd\u6ca1\u6709\u3002 \u4ee3\u7801 4-1 \u7c7b\u578b\u7cfb\u7edf\u4e2d\u7684\u5f02\u5e38\u89c4\u8303 using TNoexceptVoidFunc = void ( * )() noexcept ; void SimpleNoexceptCall ( TNoexceptVoidFunc f ) { f (); } using TVoidFunc = void ( * )(); void SimpleCall ( TVoidFunc f ) { f (); } void fNoexcept () noexcept {} void fRegular () {} int main () { SimpleNoexceptCall ( fNoexcept ); SimpleNoexceptCall ([]() noexcept {}); // SimpleNoexceptCall(fRegular); // cannot convert // SimpleNoexceptCall([]() {}); // cannot convert SimpleCall ( fNoexcept ); // converts to regular function SimpleCall ( fRegular ); SimpleCall ([]() noexcept {}); // converts SimpleCall ([]() {}); } \u4e00\u4e2a\u6307\u5411 noexcept \u51fd\u6570\uff08\u5e38\u89c4\u51fd\u6570\u3001\u6210\u5458\u51fd\u6570\u3001Lambda \u51fd\u6570\uff09\u7684\u6307\u9488\u53ef\u4ee5\u88ab\u8f6c\u5316\u6210\u6307\u5411\u4e0d\u5e26 noexcept \u51fd\u6570\uff08\u4e0e\u8f6c\u6362\u524d\u5bf9\u5e94\u7684\u51fd\u6570\u7c7b\u578b\uff09\u7684\u6307\u9488\u3002 \u4f46\u662f\u53cd\u8fc7\u6765\u662f\u4e0d\u884c\u7684\u3002 \u5176\u4e2d\u4e00\u4e2a\u539f\u56e0\u662f\u4ee3\u7801\u4f18\u5316\u3002 \u5982\u679c\u7f16\u8bd1\u5668\u80fd\u591f\u786e\u4fdd\u51fd\u6570\u4e0d\u4f1a\u629b\u51fa\u5f02\u5e38\uff0c\u90a3\u4e48\u5b83\u5c31\u6709\u53ef\u80fd\u751f\u6210 \u66f4\u5feb\u7684\u4ee3\u7801 \u3002 \u5728\u6807\u51c6\u5e93\u4e2d\uff0c\u6709\u5f88\u591a\u5730\u65b9\u4f1a\u57fa\u4e8e noexcept \u5224\u65ad\u4ee3\u7801\u80fd\u591f\u53d8\u5f97\u66f4\u9ad8\u6548\uff0c\u8fd9\u4e5f\u662f std::vector \u5185\u90e8\u8fdb\u884c\u5143\u7d20\u79fb\u52a8\u65f6\u662f\u5426\u4f1a\u629b\u51fa\u5f02\u5e38\u7684\u5224\u65ad\u673a\u5236\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u6817\u5b50 \u4ee3\u7801 4-2 \u4f7f\u7528 type_traits \u5224\u65ad\u53ef\u8c03\u7528\u5bf9\u8c61\u662f\u5426\u6807\u8bb0\u4e3a\u4e86 noexcept #include <iostream> #include <type_traits> template < typename Callable > void CallWith10 ( Callable && fn ) { if constexpr ( std :: is_nothrow_invocable_v < Callable , int > ) { std :: cout << \"Calling fn(10) with optimisation \\n \" ; fn ( 10 ); } else { std :: cout << \"Calling fn(10) normally \\n \" ; fn ( 10 ); } } int main () { int x { 10 }; const auto lam = [ & x ]( int y ) noexcept { x += y ; }; CallWith10 ( lam ); const auto lamEx = [ & x ]( int y ) { std :: cout << \"lamEx with x = \" << x << '\\n' ; x += y ; }; CallWith10 ( lamEx ); } \u8f93\u51fa\u5982\u4e0b\uff1a Calling fn(10) with optimisation Calling fn(10) normally lamEx with x = 20 \u4e0a\u8ff0\u4ee3\u7801\u4f7f\u7528 std::is_nothrow_invocable_v \u53bb\u68c0\u67e5\u4f20\u5165\u7684\u53ef\u8c03\u7528\u5bf9\u8c61\u662f\u5426\u5177\u6709 noexcept \u6807\u8bb0\u3002 \u52a8\u6001\u5f02\u5e38\u89c4\u8303\u5728 C++11 \u4e2d \u88ab\u5f03\u7528 \uff0c\u5728 C++17 \u4e2d \u88ab\u5220\u9664 \uff0c\u53ea\u80fd\u4f7f\u7528 noexcept \u5173\u952e\u5b57\u53bb\u58f0\u660e\u4e00\u4e2a\u4e0d\u4f1a\u629b\u51fa\u5f02\u5e38\u7684\u51fd\u6570\u3002 Question\uff1a\u5982\u679c\u5728\u4e00\u4e2a\u5177\u6709 noexcept \u58f0\u660e\u7684\u51fd\u6570\u4e2d\u629b\u51fa\u5f02\u5e38\uff0c\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f Answer\uff1a\u7f16\u8bd1\u671f\u4f1a\u8c03\u7528 std::terminate \u3002 3. constexpr Lambda \u8868\u8fbe\u5f0f \u4ece C++11 \u5f00\u59cb\uff0c constexpr \u5173\u952e\u5b57\u80fd\u591f\u5728\u7f16\u8bd1\u671f\u8bc4\u4f30\u8d8a\u6765\u8d8a\u591a\u7684\u4ee3\u7801\u3002\u8fd9\u4e0d\u4ec5\u4f1a\u5f71\u54cd\u5230\u7a0b\u5e8f\u7684\u6027\u80fd\uff0c\u4e5f\u8ba9\u7f16\u8bd1\u671f\u7684\u7f16\u7801\u53d8\u5f97\u66f4\u52a0\u6109\u5feb\u548c\u6709\u529b\u3002 \u5728 C++17\uff0c constexpr \u80fd\u591f\u88ab\u7528\u4e8e Lambda \u8868\u8fbe\u5f0f\uff0c\u53ef\u4ee5\u770b\u4e00\u4e0b\u89c4\u8303 [expr.prim.lambda] \u4e2d\u7684 #4\uff1a \u5982\u679c\u51fd\u6570\u662f\u58f0\u660e\u4e2d\u5e26\u6709 constexpr \u6216\u8005 Lambda \u8868\u8fbe\u5f0f\u7684\u53c2\u6570\u58f0\u660e\u5b50\u53e5\u540e\u8ddf constexpr \uff0c\u90a3\u4e48\u8fd9\u662f\u4e00\u4e2a constexpr \u51fd\u6570\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u5982\u679c Lambda \u8868\u8fbe\u5f0f\u9075\u5faa constexpr \u51fd\u6570\u7684\u89c4\u5219\uff0c\u90a3\u4e48 Lambda \u8868\u8fbe\u5f0f\u5bf9\u5e94\u7684 operator() \u51fd\u6570\u88ab\u9690\u5f0f\u5b9a\u4e49\u4e3a constexpr\uff0c\u5728 C++17 \u4e2d\uff0cconstexpr \u51fd\u6570\u6839\u636e [dcl.constexpr] #3 \u9700\u8981\u6ee1\u8db3\u4ee5\u4e0b\u89c4\u5219\uff1a \u4e0d\u662f\u4e00\u4e2a\u865a\u51fd\u6570 \u8fd4\u56de\u7c7b\u578b\u662f literal type\uff08\u53ef\u4ee5\u5728\u7f16\u8bd1\u671f\u8ba1\u7b97\u7684\u53d8\u91cf\uff09 \u6240\u6709\u53c2\u6570\u90fd\u662f literal type \u5176\u51fd\u6570\u4f53\u5e94\u4e3a = delete, = default \u6216\u8005\u662f\u4e00\u4e2a\u4e0d\u5305\u542b\u4ee5\u4e0b\u8bed\u53e5\u7684\u590d\u5408\u8bed\u53e5\uff1a an asm-definition a goto statement an identifier label try block a definition of a variable of non-literal type or of static or thread storage duration or for which no initialisation is performed \u4e3e\u4e2a\u6817\u5b50\uff1a constexpr auto Square = []( int n ) { return n * n ; }; // implicit constexpr static_assert ( Square ( 2 ) == 4 ); \u7531\u4e8e Square \u51fd\u6570\u4f53\u975e\u5e38\u7b80\u5355\u5e76\u4e14\u5b83\u6ca1\u6709\u8fdd\u53cd constexpr \u6240\u9700\u7684\u76f8\u5173\u89c4\u5219\uff0c\u6240\u4ee5\u5b83\u88ab\u9690\u5f0f\u58f0\u660e\u4e3a constexpr \u5e76\u4e14\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 static_assert \u5728\u7f16\u8bd1\u671f\u8c03\u7528\u5b83\u3002 \u7528\u4f8b \u6709\u6ca1\u6709\u66f4\u5b9e\u7528\u7684\u4ee3\u7801\u4f8b\u5b50\uff1f \u6211\u4eec\u5148\u5b9e\u73b0\u4e00\u4e2a\u5e38\u7528\u7684\u7d2f\u52a0\u7b97\u6cd5\uff1a \u4ee3\u7801 4-3 \u7b80\u5355\u7684\u7d2f\u52a0 #include <array> template < typename Range , typename Func , typename T > constexpr T SimpleAccumulate ( Range && range , Func func , T init ) { for ( auto && elem : range ) { init += func ( elem ); } return init ; } int main () { constexpr std :: array arr { 1 , 2 , 3 }; constexpr auto sum = SimpleAccumulate ( arr , []( auto i ) { return i * i ; }, 0 ); static_assert ( sum == 14 ); } \u8be5\u4ee3\u7801\u5728\u5c06 Lamdba \u51fd\u6570\u4f20\u9012\u7ed9 SimpleAccumulate \u65f6\uff0c\u867d\u7136\u6ca1\u6709\u663e\u793a\u58f0\u660e constexpr \uff0c\u4f46\u662f\u7f16\u8bd1\u5668\u4f1a\u53d1\u73b0\u8fd9\u4e2a Lamdba \u51fd\u6570\u88ab\u4e00\u4e2a constexpr \u51fd\u6570\u8c03\u7528\u4e86\uff0c\u5e76\u4e14\u8be5 Lamdba \u51fd\u6570\u4f53\u53ea\u5305\u542b\u7b80\u5355\u7684\u8bed\u53e5\uff0c\u7b26\u5408\u6210\u4e3a constexpr Lamdba \u7684\u6761\u4ef6\uff0c\u6240\u4ee5\u4e0d\u4f1a\u62a5\u9519\u3002 \u5e76\u4e14\u8fd9\u4e00\u8fc7\u7a0b\u540c\u6837\u9002\u7528\u4e8e SimpleAccumulate \u4e2d\u8c03\u7528\u5230\u7684 std::array \uff0c std::begin \uff0c std::end \u3002 \u6240\u4ee5 SimpleAccumulate \u51fd\u6570\u53ef\u80fd\u4f1a\u8fd0\u884c\u5728\u7f16\u8bd1\u671f\u3002 \u53e6\u5916\u4e00\u4e2a\u4f8b\u5b50\u662f\u4f7f\u7528\u4e86\u9012\u5f52\u7684 Lamdba\uff1a \u4ee3\u7801 4-4 \u9012\u5f52\u7684 constexpr Lamdba int main () { constexpr auto factorial = []( int n ) { constexpr auto fact_impl = []( int n , const auto & impl ) -> int { return n > 1 ? n * impl ( n - 1 , impl ) : 1 ; }; return fact_impl ( n , fact_impl ); }; static_assert ( factorial ( 5 ) == 120 ); } \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5c06 factorial \u58f0\u660e\u4e3a constexpr \uff0c\u8fd9\u5c06\u4f1a\u5141\u8bb8\u4f7f\u7528\u7f16\u8bd1\u671f\u8fdb\u884c\u68c0\u67e5\u7684 static_assert \u3002 \u6355\u83b7\u53d8\u91cf \u4f60\u53ef\u4ee5\u6355\u83b7\u53d8\u91cf\uff08\u9700\u8981\u4fdd\u8bc1\u6355\u83b7\u540e\u4ecd\u7136\u662f\u4e2a\u5e38\u91cf\u8868\u8fbe\u5f0f\uff09\uff1a \u4ee3\u7801 4-5 \u6355\u83b7\u5e38\u91cf constexpr int add ( int const & t , int const & u ) { return t + u ; } int main () { constexpr int x = 0 ; constexpr auto lam = [ x ]( int n ) { return add ( x , n ); }; static_assert ( lam ( 10 ) == 10 ); } \u7136\u800c\uff0c\u6709\u8da3\u7684\u4e8b\u60c5\u662f\uff0c\u4ee3\u7801\u5982\u679c\u8fd9\u4e48\u5199\u7684\u8bdd\uff1a constexpr int x = 0 ; constexpr auto lam = [ x ]( int n ) { return n + x }; \u4f60\u5e76\u4e0d\u9700\u8981\u53bb\u6355\u83b7 x \u3002 \u5728 Clang \u4e2d\uff0c\u6211\u4eec\u751a\u81f3\u4f1a\u5f97\u5230\u5982\u4e0b\u7684 warning\uff1a warning: lambda capture 'x' is not required to be captured for this use \u540c\u6837\u7684\uff0c\u5982\u679c\u6211\u4eec\u5c06 add \u51fd\u6570\u6539\u4e3a\u503c\u4f20\u9012\u7684\u8bdd\uff0c\u4e5f\u4f1a\u4ea7\u751f\u540c\u6837\u7684\u6548\u679c\uff1a constexpr int add ( int t , int u ) { return t + u ; } \u8fd9\u662f\u56e0\u4e3a\u5982\u679c\u6211\u4eec\u4f9d\u8d56\u5e38\u91cf\u8868\u8fbe\u5f0f\uff0c\u7f16\u8bd1\u5668\u53ef\u4ee5\u4f18\u5316\u53d8\u91cf\uff0c\u7279\u522b\u662f\u5bf9\u4e8e\u5728\u7f16\u8bd1\u671f\u5c31\u53ef\u4ee5\u77e5\u9053\u503c\u7684\u5185\u7f6e\u7c7b\u578b\u3002 \u4e0b\u9762\u662f\u4e00\u4e9b\u6765\u81ea CppReference \u7684\u63cf\u8ff0\uff1a \u4e00\u4e2a Lamdba \u8868\u8fbe\u5f0f\u5982\u679c\u60f3\u8981\u4e0d\u7ecf\u8fc7\u6355\u83b7\u8bfb\u53d6\u4e00\u4e2a\u53d8\u91cf\u7684\u503c\uff0c\u5f53\u4e14\u4ec5\u5f53\u8be5\u53d8\u91cf\uff1a \u662f\u4e00\u4e2a const non-volatile integral \u6216\u8005 enumeration type \u5e76\u4e14\u88ab constant expression \u521d\u59cb\u5316 \u662f constexpr \u5e76\u4e14\u6ca1\u6709 mutable \u7684\u53d8\u91cf \u5982\u679c\u60f3\u8981\u83b7\u5f97\u66f4\u591a\u5173\u4e8e\u6b64\u7684\u4fe1\u606f\uff0c\u4f60\u53ef\u4ee5\u9605\u8bfb\u8fd9\u90e8\u5206\u7684\u6807\u51c6 [basic.def.odr #4] \u3002 \u5728\u7b2c\u4e00\u4e2a add() \u7684\u4f8b\u5b50\u4e2d\uff0c\u63a5\u6536\u53d8\u91cf\u7684\u65f6\u5019\u4f7f\u7528\u4e86\u5f15\u7528\u4f20\u9012\uff0c\u6211\u4eec\u5f3a\u5236\u7f16\u8bd1\u5668\u521b\u5efa\u4e00\u4e2a\u95ed\u5305\u6210\u5458\uff0c\u7136\u540e\u5c06\u5176\u7ed1\u5b9a\u5230\u5f15\u7528\u3002 \u7136\u540e\u8ba9 add() \u51fd\u6570\u8fd4\u56de\u53c2\u6570\u7684\u5730\u5740\uff0c\u7136\u540e\u5b83\u4eec\u8fdb\u884c\u6bd4\u8f83\uff0c\u50cf\u662f\u8fd9\u6837\uff1a int const * address ( int const & x ) { return & x ; } auto f = [ x ] { auto * p = address ( x ); return p == & x ; // these need to be true }; \u56e0\u6b64\u7f16\u8bd1\u5668\u9700\u8981\u5728\u95ed\u5305\u4e2d\u5b58\u50a8 x \u7684\u62f7\u8d1d\uff0c\u4e5f\u5c31\u662f\u8bf4\u9700\u8981\u6355\u83b7\u5b83\uff0c\u8fd9\u4e2a\u6355\u83b7\u64cd\u4f5c\u5e76\u4e0d\u80fd\u88ab\u4f18\u5316\u6389\u3002 constexpr \u603b\u7ed3 \u7b80\u800c\u8a00\u4e4b\uff1a constexpr \u5141\u8bb8\u4f60\u8fdb\u884c\u6a21\u677f\u7f16\u7a0b\u5e76\u4e14\u53ef\u80fd\u4f7f\u7528\u66f4\u77ed\u7684\u4ee3\u7801\u3002 \u4e3a\u5c06\u6765\u505a\u51c6\u5907\uff1a \u5728 C++20 \u4e2d\uff0c\u6211\u4eec\u5c06\u4f1a\u62e5\u6709\u8bb8\u591a constexpr \u6807\u51c6\u7684\u7b97\u6cd5\u548c\u5bb9\u5668\uff0c\u6bd4\u5982 std::vector \u548c std::string \uff0c\u6240\u4ee5 constexpr Lamdba \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4f1a\u975e\u5e38\u4fbf\u5229\u3002 \u5c4a\u65f6\uff0c\u8fd0\u884c\u65f6\u7684\u4ee3\u7801\u548c\u7f16\u8bd1\u671f\u8fd0\u884c\u7684\u4ee3\u7801\u5c06\u4f1a\u975e\u5e38\u76f8\u4f3c\u3002 \u73b0\u5728\u8ba9\u6211\u4eec\u73b0\u5728\u4e86\u89e3\u81ea C++17 \u5f15\u5165\u7684\u7b2c\u4e8c\u4e2a\u91cd\u8981\u7684\u7279\u6027\u3002 4. \u6355\u83b7 *this \u8fd8\u8bb0\u5f97\u6211\u4eec\u4e4b\u524d\u662f\u5982\u4f55 \u6355\u83b7\u7c7b\u7684\u6210\u5458\u53d8\u91cf \u7684\u5417\uff1f \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u6355\u83b7 this \uff08\u4f5c\u4e3a\u4e00\u4e2a\u6307\u9488\uff09\uff0c\u5e76\u4e14\u5f53\u4e34\u65f6\u521b\u5efa\u7684\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u77ed\u4e8e Lamdba \u51fd\u6570\u7684\u751f\u547d\u5468\u671f\u65f6\uff0c\u5c06\u4f1a\u51fa\u73b0\u9519\u8bef\u3002 \u5728 C++17 \u5f53\u4e2d\uff0c\u6211\u4eec\u6709\u53e6\u5916\u4e00\u79cd\u65b9\u5f0f\uff0c\u6211\u4eec\u53ef\u4ee5\u6355\u83b7 this \u7684\u62f7\u8d1d *this \uff1b \u4ee3\u7801 4-6 \u6355\u83b7 *this #include <iostream> struct Baz { auto foo () { return [ * this ] { std :: cout << s << std :: endl ; }; } std :: string s ; }; int main () { const auto f1 = Baz { \"xyz\" }. foo (); const auto f2 = Baz { \"abc\" }. foo (); f1 (); f2 (); } \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 [*this] \u6765\u6355\u83b7\u4e00\u4e2a\u5bf9\u8c61\u7684\u4e34\u65f6\u62f7\u8d1d\uff0c\u8be5\u62f7\u8d1d\u5b58\u5728\u4e8e\u95ed\u5305\u5185\u5e76\u4e14\u4e0d\u4f1a\u5728\u4e4b\u540e\u8c03\u7528\u8be5 Lamdba \u65f6\u4ea7\u751f UB\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff1a \u5728 C++17 \u4e2d\uff0c\u5982\u679c\u4f60\u5728\u7c7b\u7684\u6210\u5458\u51fd\u6570\u5f53\u4e2d\u4f7f\u7528 [=] \uff0c\u90a3\u4e48 this \u5c06\u4f1a\u88ab\u9690\u5f0f\u6355\u83b7\uff01 \u4f60\u53ef\u4ee5\u67e5\u770b C++20 \u76f8\u5173\u7684\u7ae0\u8282\u77e5\u6653\u8fd9\u5c06\u4f1a\u88ab\u589e\u5f3a\u548c\u5f03\u7528\uff01 \u53ef\u4ee5\u67e5\u770b P0806 \u83b7\u53d6\u66f4\u591a\u8d44\u6599\u3002 \u4e00\u4e9b\u6307\u5bfc\u6027\u610f\u89c1 \u6240\u4ee5\u6211\u4eec\u5e94\u8be5\u6355\u83b7 [this] \u8fd8\u662f [*this] \u5462\uff1f\u4ee5\u53ca\uff0c\u8fd9\u4e3a\u4ec0\u4e48\u90a3\u4e48\u91cd\u8981\uff1f \u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u5f53\u4f60\u5728\u7c7b\u7684\u8303\u56f4\u5185\u91cc\u9762\u4f7f\u7528 Lamdba \u65f6\uff0c\u4f7f\u7528 [this] \u6216\u8005 [&] \u662f\u5f88\u597d\u7684\u65b9\u5f0f\uff0c\u5f53\u4f60\u7684\u5bf9\u8c61\u5f88\u5927\u7684\u65f6\u5019\u4e0d\u4f1a\u4ea7\u751f\u989d\u5916\u7684\u62f7\u8d1d\u4ece\u800c\u5f71\u54cd\u6027\u80fd\u3002 \u5f53\u4f60\u7684 Lamdba \u8868\u8fbe\u5f0f\u7684\u751f\u547d\u5468\u671f\u53ef\u80fd\u6bd4\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u957f\u7684\u65f6\u5019\uff0c\u4f60\u5e94\u5f53\u4f7f\u7528 [*this] \u3002 \u8fd9\u5bf9\u4e8e\u5f02\u6b65\u6216\u8005\u5e76\u884c\u6267\u884c\u4e2d\u7684\u6570\u636e\u7ade\u4e89\u53ef\u80fd\u81f3\u5173\u91cd\u8981\u3002 \u6b64\u5916\uff0c\u5728\u5f02\u6b65/\u591a\u7ebf\u7a0b\u6267\u884c\u6a21\u5f0f\u4e0b\uff0cLamdba \u8868\u8fbe\u5f0f\u7684\u751f\u547d\u5468\u671f\u53ef\u80fd\u6bd4\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u66f4\u957f\uff0c\u56e0\u6b64\u6355\u83b7\u7684 this \u6307\u9488\u53ef\u80fd\u4f1a\u5931\u6548\u3002 5. IIFE \u66f4\u65b0 \u5728 C++11\uff0c\u5f15\u5165\u4e86 IIFE - \u7acb\u5373\u8c03\u7528\u51fd\u6570\u8868\u8fbe\u5f0f \uff0c\u5728 C++17\uff0c\u6709\u4e00\u4e9b\u5173\u4e8e IIFE \u7684\u66f4\u65b0\u3002 \u5728\u4f7f\u7528 IIFE \u8fc7\u7a0b\u4e2d\u4f1a\u9047\u5230\u7684\u4e00\u4e2a\u95ee\u9898\u65f6\uff0cIIFE \u5f0f\u7684\u4ee3\u7801\u4e0d\u6613\u9605\u8bfb\u3002\u56e0\u4e3a\u8c03\u7528\u64cd\u4f5c\u7b26 () \u5f88\u5bb9\u6613\u88ab\u4eba\u5ffd\u7565\uff0c\u4e0b\u9762\u662f\u4e00\u4e2a IIFE \u7684\u4f8b\u5b50\uff1a const auto var = [ & ] { if ( TheFirstCondition ()) return one_value ; if ( TheSecondCindition ()) return second_val ; return default_value ; }(); // call it! \u5728 C++11 \u7ae0\u8282\uff0c\u6211\u4eec\u751a\u81f3\u8ba8\u8bba\u4e86\u4f7f\u7528 const auto var \u4e5f\u4f1a\u6709\u4e00\u4e9b\u8bef\u5bfc\u3002 \u8fd9\u662f\u56e0\u4e3a\u5f00\u53d1\u4eba\u5458\u53ef\u80fd\u5df2\u7ecf\u4e60\u60ef\u4e86 var \u53ef\u80fd\u662f\u4e00\u4e2a\u95ed\u5305\u5bf9\u8c61\u800c\u4e0d\u662f\u51fd\u6570\u8c03\u7528\u7ed3\u679c\u3002 \u5728 C++17 \u6709\u4e00\u4e2a\u66f4\u65b9\u4fbf\u7684\u6a21\u677f\u51fd\u6570 std::invoke() \u53ef\u4ee5\u4f7f IIFE \u66f4\u52a0\u6e05\u6670\u3002 const auto var = std :: invoke ([ & ] { if ( TheFirstCondition ()) return one_value ; if ( TheSecondCindition ()) return second_val ; return default_value ; }); \u5982\u4f60\u6240\u89c1\uff0c\u4e0d\u518d\u9700\u8981\u5728\u672b\u5c3e\u5199\u4e0a () \uff0c\u800c\u662f\u66f4\u6e05\u6670\u7684\u8fdb\u884c\u8c03\u7528\u3002 Note\uff1a std::invoke() \u4f4d\u4e8e <functional> \u5934\u6587\u4ef6\u4e2d\u3002 6. \u53ef\u53d8\u6cdb\u578b Lambda \u7684\u66f4\u65b0 \u5728 C++14 \u7ae0\u8282\uff0c\u6211\u4eec\u4e86\u89e3\u5230\u5728\u6cdb\u578b Lamdba \u4e2d\u53ef\u4ee5\u4f7f\u7528 \u6cdb\u578b\u53c2\u6570\u5217\u8868 \u3002 \u611f\u8c22 C++17 \u5e26\u6765\u7684\u6298\u53e0\u8868\u8fbe\u5f0f\u80fd\u591f\u8ba9\u6211\u4eec\u5199\u51fa\u66f4\u52a0\u7d27\u51d1\u7684\u4ee3\u7801\u3002 \u4ee3\u7801 4-7 \u4f7f\u7528\u6298\u53e0\u8868\u8fbe\u5f0f\u5b9e\u73b0\u7684\u6c42\u548c\u51fd\u6570 #include <iostream> int main () { const auto sumLambda = []( auto ... args ) { std :: cout << \"sum of: \" << sizeof ...( args ) << \" numbers \\n \" ; return ( args + ... + 0 ); }; std :: cout << sumLambda ( 1.1 , 2.2 , 3.3 , 4.4 , 5.5 , 6.6 , 7.7 , 8.8 , 9.9 ); } \u5982\u679c\u4f60\u5c06\u4e0a\u8ff0\u4ee3\u7801\u4e0e\u4e4b\u524d\u624d C++14 \u7ae0\u8282\u4e2d\u6c42\u548c\u51fd\u6570\u7684\u4f8b\u5b50\u8fdb\u884c\u5bf9\u6bd4\uff0c\u4f60\u4f1a\u53d1\u73b0\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u4e0d\u518d\u9700\u8981\u9012\u5f52\u3002 \u5f53\u6211\u4eec\u9700\u8981\u4e66\u5199\u5305\u542b\u53ef\u53d8\u53c2\u6570\u7684\u8868\u8fbe\u5f0f\u65f6\uff0c\u4f7f\u7528\u6298\u53e0\u8868\u8fbe\u5f0f\u4f1a\u76f8\u5bf9\u7b80\u5355\u548c\u76f4\u89c2\u3002 \u4e0b\u9762\u662f\u53e6\u5916\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5b83\u80fd\u591f\u8f93\u51fa\u591a\u4e2a\u53c2\u6570\u3002 \u4ee3\u7801 4-8 \u4f7f\u7528\u6298\u53e0\u8868\u8fbe\u5f0f\u5b9e\u73b0\u7b80\u5355\u7684\u591a\u53c2\u6570\u8f93\u51fa #include <iostream> int main () { const auto printer = []( auto ... args ) { ( std :: cout << ... << args ) << '\\n' ; }; printer ( 1 , 2 , 3 , \"hello\" , 10.5f ); } \u8fd0\u884c\u8be5\u4ee3\u7801\u540e\uff0c\u4f1a\u8f93\u51fa\u6240\u6709\u7684\u53c2\u6570\u5e76\u4e14\u4e0d\u5305\u542b\u5206\u9694\u7b26\uff1a 123hello10.5 \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u5c06\u4ecb\u7ecd\u4e00\u4e2a\u5c0f\u6280\u5de7\uff0c\u4e00\u5e76\u6298\u53e0\u9017\u53f7\u5206\u9694\u7b26\uff1a \u4ee3\u7801 4-9 \u4f7f\u7528\u6298\u53e0\u8868\u8fbe\u5f0f\u5b9e\u73b0\u5e26\u5206\u9694\u7b26\u7684\u591a\u53c2\u6570\u8f93\u51fa #include <iostream> int main () { const auto printer = []( auto ... args ) { const auto printElem = []( auto elem ) { std :: cout << elem << \", \" ; }; ( printElem ( args ), ...); std :: cout << '\\n' ; }; printer ( 1 , 2 , 3 , \"hello\" , 10.5f ); } \u6211\u4eec\u5c06\u5f97\u5230\u5982\u4e0b\u8f93\u51fa\uff1a 1, 2, 3, hello, 10.5, \u4ee3\u7801\u5176\u5b9e\u53ef\u4ee5\u66f4\u77ed\uff1a const auto printer = []( auto ... args ) { (( std :: cout << args << \", \" ), ...); std :: cout << '\\n' ; }; \u5982\u679c\u6211\u4eec\u4e0d\u60f3\u8f93\u51fa\u672b\u5c3e\u9017\u53f7\u7684\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u4ee3\u7801\u6539\u6210\u8fd9\u6837\uff1a \u4ee3\u7801 4-10 \u6ca1\u6709\u5c3e\u9017\u53f7\u7684\u5e26\u5206\u9694\u7b26\u7684\u591a\u53c2\u6570\u8f93\u51fa #include <iostream> int main () { const auto printer = []( auto first , auto ... args ) { std :: cout << first ; (( std :: cout << \", \" << args ), ...); std :: cout << '\\n' ; }; printer ( 1 , 2 , 3 , \"hello\" , 10.5f ); } \u8fd9\u4e00\u6b21\u6211\u4eec\u9700\u8981\u4f7f\u7528\u901a\u7528\u6a21\u677f\u53c2\u6570\u6765\u8f93\u51fa\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002 \u7136\u540e\u4e3a\u5176\u4f59\u5143\u7d20\u4f7f\u7528\u53ef\u53d8\u53c2\u6570\u5217\u8868\uff0c\u5e76\u4e14\u5728\u8f93\u51fa\u5143\u7d20\u524d\u8f93\u51fa\u4e00\u4e2a\u9017\u53f7\u5206\u9694\u7b26\u3002 \u4ee3\u7801\u8f93\u51fa\u5982\u4e0b\uff1a 1, 2, 3, hello, 10.5 7. \u4ece\u591a\u4e2a Lambda \u6d3e\u751f \u5728 C++11 \u7ae0\u8282\uff0c\u6211\u4eec\u4e86\u89e3\u4e86\u4ece Lamdba \u8868\u8fbe\u5f0f\u8fdb\u884c\u6d3e\u751f\uff0c\u867d\u7136\u8fd9\u5f88\u6709\u8da3\uff0c\u4f46\u662f\u4f7f\u7528\u573a\u666f\u5f88\u6709\u9650\u3002 \u4e3b\u8981\u7684\u95ee\u9898\u662f\u5728 C++11 \u4e2d\u53ea\u652f\u6301\u7279\u5b9a\u6570\u91cf\u7684 Lambda\uff0c\u90a3\u4e48\u4f8b\u5b50\u4f7f\u7528\u4e86\u4e00\u4e2a\u6216\u4e24\u4e2a\u57fa\u7c7b\uff0c\u4f46\u662f\u5982\u4f55\u80fd\u591f\u4f7f\u7528\u53ef\u53d8\u6570\u91cf\u7684\u57fa\u7c7b\uff0c\u5373\u53ef\u53d8\u6570\u91cf\u7684 Lamdba \u8868\u8fbe\u5f0f\u3002 \u5728 C++17 \u6211\u4eec\u6709\u4e86\u76f8\u5bf9\u7b80\u5355\u7684\u6a21\u5f0f\u53bb\u5b9e\u73b0\uff1a template < class ... Ts > struct overloaded : Ts ... { using Ts :: operator ()...; }; template < class ... Ts > overloaded ( Ts ...) -> overloaded < Ts ... > ; \u5982\u4f60\u6240\u89c1\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528\u53ef\u53d8\u53c2\u6570\u6a21\u677f\uff0c\u56e0\u4e3a\u5b83\u5141\u8bb8\u6211\u4eec\u4f7f\u7528\u4efb\u610f\u6570\u91cf\u7684\u57fa\u7c7b\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u4f8b\u5b50\uff1a \u4ee3\u7801 4-11 \u91cd\u8f7d\u6a21\u5f0f #include <iostream> template < class ... Ts > struct overloaded : Ts ... { using Ts :: operator ()...; }; template < class ... Ts > overloaded ( Ts ...) -> overloaded < Ts ... > ; int main () { const auto test = overloaded {[]( const int & i ) { std :: cout << \"int: \" << i << '\\n' ; }, []( const float & f ) { std :: cout << \"float: \" << f << '\\n' ; }, []( const std :: string & s ) { std :: cout << \"string: \" << s << '\\n' ; }}; test ( \"10.0f\" ); } \u5728\u4e0a\u8ff0\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u7531\u4e09\u4e2a Lambda \u7ec4\u6210\u7684 Lamdba \u8868\u8fbe\u5f0f\u3002 \u4e4b\u540e\u6211\u4eec\u53ef\u4ee5\u5e26\u4e0a\u53c2\u6570\u8c03\u7528\u8be5 Lamdba \u8868\u8fbe\u5f0f\uff0c\u5c06\u4f1a\u901a\u8fc7\u4f20\u5165\u7684\u53c2\u6570\u7c7b\u578b\u8c03\u7528\u6240\u9700\u7684\u51fd\u6570\u3002 \u73b0\u5728\u8ba9\u6211\u4eec\u4ed4\u7ec6\u770b\u770b\u8fd9\u4e2a\u6a21\u5f0f\u6838\u5fc3\u7684\u4e24\u884c\u4ee3\u7801\u3002 \u8fd9\u4e24\u884c\u4ee3\u7801\u53d7\u76ca\u4e8e\u81ea C++17 \u4ee5\u6765\u53ef\u7528\u7684\u4e09\u4e2a\u7279\u6027\uff1a using \u58f0\u660e\u7684\u5305\u6269\u5c55 - \u7528\u66f4\u7b80\u5355\u4e14\u7d27\u51d1\u7684\u4ee3\u7801\u5b9e\u73b0\u53ef\u53d8\u6a21\u677f\u3002 \u81ea\u5b9a\u4e49\u6a21\u677f\u53c2\u6570\u63a8\u5bfc\u89c4\u5219 - \u5141\u8bb8\u5c06 Lamdba \u5217\u8868\u8f6c\u6362\u4e3a\u91cd\u8f7d\u7c7b\u7684\u57fa\u7c7b\u5217\u8868\u3002\uff08\u5728 C++20 \u4e2d\u4e0d\u9700\u8981\u8fd9\u4e48\u505a\uff09\u3002 \u805a\u5408\u521d\u59cb\u5316\u7684\u6269\u5c55 - \u5728 C++17 \u4e4b\u524d\uff0c\u4e0d\u80fd\u5408\u5e76\u4ece\u5176\u5b83\u7c7b\u578b\u6d3e\u751f\u7684\u521d\u59cb\u5316\u7c7b\u578b\u3002 \u5728 C++11 \u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u4f7f\u7528\u4e86 using declaration\u3002 \u8fd9\u4e2a\u7279\u6027\u5bf9\u4e8e\u4f7f\u7528\u540c\u4e00\u4e2a\u4f5c\u7528\u57df\u5185\u7684\u4eff\u51fd\u6570\u91cd\u8f7d\u5e26\u6765\u5f88\u5927\u5e2e\u52a9\u3002 \u5728 C++17 \u6211\u4eec\u83b7\u5f97\u4e86\u652f\u6301\u53ef\u53d8\u53c2\u6570\u6a21\u677f\u7684\u8bed\u6cd5\uff0c\u8fd9\u5728\u5148\u524d\u7684\u7248\u672c\u4e2d\u662f\u6ca1\u6709\u7684\u3002 \u73b0\u5728\u8ba9\u6211\u4eec\u8bd5\u7740\u53bb\u7406\u89e3\u5269\u4e0b\u7684\u4e24\u4e2a\u7279\u6027\uff1a \u81ea\u5b9a\u4e49\u6a21\u677f\u53c2\u6570\u63a8\u5bfc\u89c4\u5219 \u6211\u4eec\u4ece Lambda \u6d3e\u751f\uff0c\u5e76\u4e14\u5c06\u5b83\u4eec\u7684 operator() \u66b4\u9732\u51fa\u6765\uff0c\u4e0a\u4e00\u8282\u770b\u5230\u7684\u90a3\u6837\u3002 \u90a3\u4e48\u6211\u4eec\u5982\u4f55\u521b\u5efa\u8fd9\u79cd\u91cd\u8f7d\u7c7b\u578b\u7684\u53d8\u91cf\u5462\uff1f \u50cf\u4f60\u77e5\u9053\u7684\u90a3\u6837\uff0c\u6211\u4eec\u65e0\u6cd5\u9884\u5148\u77e5\u9053\u67d0\u4e00\u4e2a Lambda \u7684\u7c7b\u578b\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u4f1a\u4e3a\u6bcf\u4e00\u4e2a Lambda \u751f\u6210\u4e00\u4e2a\u552f\u4e00\u7684\u7c7b\u578b\u540d\u79f0\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u4e0d\u80fd\u5199\u4e0b\u5982\u4e0b\u7684\u4ee3\u7801\uff1a overload < LambdaType1 , LambdaType2 > myOverload { ... } // ??? // what is LambdaType1 and LambdaType2 ?? \u552f\u4e00\u7684\u65b9\u5f0f\u662f\u4f7f\u7528\u4e00\u4e9b make \u51fd\u6570\uff08\u56e0\u4e3a\u6a21\u677f\u53c2\u6570\u63a8\u5bfc\u9002\u7528\u4e8e\u51fd\u6570\u6a21\u677f\uff09\uff0c\u50cf\u4e0b\u9762\u8fd9\u6837\uff1a template < typename ... T > constexpr auto make_overloader ( T && ... t ) { return overloaded < T ... > { std :: forward < T > ( t )...}; } \u5982\u679c\u4f7f\u7528 C++17 \u4e2d\u5f15\u5165\u7684\u6a21\u677f\u53c2\u6570\u63a8\u5bfc\u89c4\u5219\uff0c\u6211\u4eec\u53ef\u4ee5\u7b80\u5316\u5e38\u89c1\u6a21\u677f\u7c7b\u578b\u7684\u521b\u5efa\uff0c\u800c\u4e0d\u9700\u8981\u50cf\u4e0a\u9762\u90a3\u6837\u9700\u8981\u4f7f\u7528\u4e00\u4e2a\u7c7b\u4f3c\u4e8e make_overloader \u7684\u51fd\u6570\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u7b80\u5355\u7684\u7c7b\u578b\uff0c\u6211\u4eec\u53ef\u4ee5\u5199\u4e0b\u5982\u4e0b\u4ee3\u7801\uff1a std :: pair strDouble { std :: string { \"Hello\" }, 10.0 }; // strDouble is std::pair<std::string, double> \u6709\u4e00\u4e2a option \u80fd\u591f\u81ea\u5b9a\u4e49\u63a8\u5bfc\u89c4\u5219\uff0c\u5e76\u4e14\u5728\u6807\u51c6\u5e93\u4e2d\u5927\u91cf\u7684\u4f7f\u7528\u4e86\u5b83\u4eec\uff0c\u6bd4\u5982 std::array \uff1a template < class T , class ... U > array ( T , U ...) -> array < T , 1 + sizeof ...( U ) > ; \u4e0a\u8ff0\u7684\u5199\u6cd5\u5141\u8bb8\u6211\u4eec\u5199\u4e0b\u5982\u4e0b\u7684\u4ee3\u7801\uff1a array test { 1 , 2 , 3 , 4 , 5 }; // test is std::array<int, 5> \u5bf9\u4e8e\u91cd\u8f7d\u6a21\u5f0f\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u7684\u81ea\u5b9a\u4e49\u63a8\u5bfc\u89c4\u5219\uff1a template < class ... Ts > overloaded ( Ts ...) -> overloaded < Ts ... > ; \u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e24\u4e2a Lamdba \u521d\u59cb\u5316\u4e00\u4e2a Lamdba \u8868\u8fbe\u5f0f\uff1a overloaded myOverload { []( int ) { }, []( double ) { } }; \u4e0a\u8ff0\u7684 Lamdba \u8868\u8fbe\u5f0f\u4e2d\u7684\u6a21\u677f\u53c2\u6570\u5c06\u88ab\u6b63\u786e\u63a8\u5bfc\uff0c\u56e0\u4e3a\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u7f16\u8bd1\u5668\u77e5\u9053\u8fd9\u4e24\u4e2a Lamdba \u8868\u8fbe\u5f0f\u53c2\u6570\u7684\u7c7b\u578b\uff0c\u6240\u4ee5\u53ef\u4ee5\u89e3\u6790\u51fa\u7ee7\u627f\u81ea\u8fd9\u4e24\u4e2a\u53c2\u6570\u7684 Lamdba \u8868\u8fbe\u5f0f\u7684\u7c7b\u578b\u3002 \u4f60\u53ef\u4ee5\u5728 C++20 \u7ae0\u8282 \u4e2d\u770b\u5230\u65b0\u7684\u6807\u51c6\uff0c\u7c7b\u6a21\u677f\u53c2\u6570\u63a8\u5bfc\u5c06\u88ab\u63d0\u5347\uff0c\u5bf9\u4e8e\u91cd\u8f7d\u6a21\u5f0f\uff0c\u5c06\u4e0d\u518d\u9700\u8981\u5199\u81ea\u5b9a\u4e49\u7684\u63a8\u5bfc\u89c4\u5219\u3002 \u73b0\u5728\u8ba9\u6211\u4eec\u8fdb\u5165\u6700\u540e\u4e00\u4e2a\u5c0f\u8282 - \u805a\u5408\u521d\u59cb\u5316 \u805a\u5408\u521d\u59cb\u5316\u7684\u6269\u5c55 \u8fd9\u4e2a\u529f\u80fd\u76f8\u5bf9\u7b80\u5355\uff1a\u6211\u4eec\u53ef\u4ee5\u805a\u5408\u521d\u59cb\u5316\u4e00\u4e2a\u4ece\u5176\u5b83\u7c7b\u578b\u6d3e\u751f\u7684\u7c7b\u578b\u3002 \u6765\u81ea\u8fd9\u4e2a\u6807\u51c6 [dcl.init.aggr] \uff1a An aggregate is an array or a class with: no user-provided, explicit, or inherited constructors no private or protected non-static data members no virtual functions, and no virtual, private, or protected base classes \u5982\u4e0b\u8fd9\u4e2a\u4f8b\u5b50\uff08\u4f8b\u5b50\u6765\u81ea\u4e8e\u6807\u51c6\u8349\u6848\uff09\uff1a struct base1 { int b1 , b2 = 32 ; }; struct base2 { base2 () { b3 = 64 ; } int b3 ; }; struct derived : base1 , base2 { int d ; }; derived d1 {{ 1 , 2 }, {}, 4 }; derived d2 {{}, {}, 4 }; \u8be5\u4ee3\u7801\u4e2d\uff1a \u5bf9\u4e8e d1\uff1a d1.b1 \u521d\u59cb\u5316\u4e3a 1 d1.b2 \u521d\u59cb\u5316\u4e3a 2 d1.b3 \u521d\u59cb\u5316\u4e3a 64 d1.d \u521d\u59cb\u5316\u4e3a 4 \u5bf9\u4e8e d2\uff1a d2.b1 \u521d\u59cb\u5316\u4e3a 0 d2.b2 \u521d\u59cb\u5316\u4e3a 32 d2.b3 \u521d\u59cb\u5316\u4e3a 64 d2.d \u521d\u59cb\u5316\u4e3a 4 \u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u805a\u5408\u521d\u59cb\u5316\u6709\u66f4\u663e\u8457\u7684\u5f71\u54cd\u3002\u56e0\u4e3a\u5bf9\u4e8e\u91cd\u8f7d\u7c7b\uff0c\u6ca1\u6709\u805a\u5408\u521d\u59cb\u5316\uff0c\u6211\u4eec\u5fc5\u987b\u5b9e\u73b0\u5982\u4e0b\u7684\u6784\u9020\u51fd\u6570\uff1a struct overloaded : Fs ... { template < class ... Ts > overloaded ( Ts && ... ts ) : Fs { std :: forward < Ts > ( ts )}... {} // ... } \u8fd9\u5c06\u4f1a\u9700\u8981\u5199\u5f88\u591a\u4ee3\u7801\uff0c\u800c\u4e14\u53ef\u80fd\u6ca1\u6709\u6db5\u76d6\u6240\u6709\u7684\u60c5\u51b5\uff0c\u6bd4\u5982 noexcept\u3002 \u901a\u8fc7\u805a\u5408\u521d\u59cb\u5316\uff0c\u6211\u4eec\u300c\u76f4\u63a5\u300d\u4ece\u57fa\u7c7b\u5217\u8868\u4e2d\u8c03\u7528 Lambda \u7684\u6784\u9020\u51fd\u6570\uff0c\u56e0\u6b64\u65e0\u9700\u7f16\u5199\u5411\u5176\u663e\u793a\u8f6c\u53d1\u53c2\u6570\u7684\u4ee3\u7801\u3002 \u81f3\u6b64\u4e3a\u6b62\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86\u5f88\u591a\uff0c\u90a3\u4e48\u6709\u6ca1\u6709\u4ec0\u4e48\u6709\u7528\u7684\u91cd\u8f7d\u6a21\u5f0f\u7684\u4f8b\u5b50\uff1f \u73b0\u5728\u770b\u6765\u4f3c\u4e4e std::variant \u66f4\u4e3a\u65b9\u4fbf\u3002 std::variant \u548c std::visit \u7684\u4f8b\u5b50 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7ee7\u627f\u548c\u91cd\u8f7d\u6a21\u5f0f\u6765\u505a\u4e00\u4e9b\u66f4\u5b9e\u7528\u7684\u4e8b\u60c5\u3002 \u5148\u770b\u4e00\u4e2a std::variant \u548c std::visit \u7684\u4f8b\u5b50 \u4ee3\u7801 4-12 \u4f7f\u7528 variant \u548c visit \u5b9e\u73b0\u91cd\u8f7d\u6a21\u5f0f #include <iostream> #include <variant> template < class ... Ts > struct overloaded : Ts ... { using Ts :: operator ()...; }; template < class ... Ts > overloaded ( Ts ...) -> overloaded < Ts ... > ; int main () { const auto PrintVisitor = []( const auto & t ) { std :: cout << t << \" \\n \" ; }; std :: variant < int , float , std :: string > intFloatString { \"Hello\" }; std :: visit ( PrintVisitor , intFloatString ); std :: visit ( overloaded {[]( int & i ) { i *= 2 ; }, []( float & f ) { f *= 2.0f ; }, []( std :: string & s ) { s = s + s ; }}, intFloatString ); std :: visit ( PrintVisitor , intFloatString ); } \u5728\u4e0a\u8ff0\u7684\u4ee3\u7801\u4e2d\uff1a \u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u652f\u6301 \u6574\u578b\u3001\u6d6e\u70b9\u578b\u548c\u5b57\u7b26\u4e32\u7684 variant \u53d8\u91cf\u3002 \u7136\u540e\u901a\u8fc7\u4e09\u4e2a\u91cd\u8f7d\u51fd\u6570\u8c03\u6574\u4e86 intFloatString \u7684\u503c\u3002 \u6700\u540e\u518d\u901a\u8fc7 PrintVisitor \u5c06\u5176\u8f93\u51fa\u51fa\u6765\u3002 \u7531\u4e8e\u8303\u578b Lamdba \u7684\u652f\u6301\uff0cPrintVisitor \u51fd\u6570\u53ea\u9700\u8981\u5199\u4e00\u4e2a\uff0c\u5b83\u652f\u6301\u6240\u6709\u5b9e\u73b0\u4e86 << \u64cd\u4f5c\u7b26\u7684\u5bf9\u8c61\u3002 \u5176\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a std::visit \u7684\u8c03\u7528\uff0c\u5b83\u521b\u5efa\u4e86\u4e00\u4e2a visitor \uff0c\u91cd\u8f7d\u4e86\u4e09\u79cd\u7c7b\u578b\uff0c\u4e09\u4e2a\u51fd\u6570\u90fd\u662f\u5c06\u5f53\u524d\u503c\u8d4b\u503c\u4e00\u4efd\uff0c\u53ea\u662f\u7c7b\u578b\u4e0d\u540c\u3002 8. \u4f7f\u7528 Lambda \u8fdb\u884c\u5e76\u53d1\u7f16\u7a0b \u5982\u679c\u5728\u540c\u4e00\u4e2a\u7ebf\u7a0b\u4e2d\u8c03\u7528 Lamdba \u662f\u6bd4\u8f83\u5bb9\u6613\u7684\u60c5\u5f62\u3002 \u4f46\u662f\u5982\u679c\u4f60\u60f3\u5728\u4e00\u4e2a\u5355\u72ec\u7684\u7ebf\u7a0b\u4e2d\u8c03\u7528 Lamdba \u7684\u8bdd\uff0c\u5e94\u8be5\u600e\u4e48\u505a\uff1f \u53ef\u80fd\u4f1a\u9047\u5230\u4ec0\u4e48\u95ee\u9898\uff1f \u8ba9\u6211\u4eec\u5728\u672c\u8282\u4e2d\u5c55\u5f00\u8bf4\u8bf4\u3002 \u672c\u8282\u4e0d\u662f\u5173\u4e8e\u5982\u4f55\u7528 C++ \u7f16\u5199\u5e76\u53d1\u4ee3\u7801\u7684\u6559\u7a0b\uff0c\u65e8\u5728\u5c55\u793a\u60a8\u5728\u5f02\u6b65\u4ee3\u7801\u4e2d\u4f7f\u7528 lambda \u53ef\u80fd\u4f1a\u9047\u5230\u7684\u95ee\u9898\u3002 \u6709\u5173 C++ \u4e2d\u7684\u5e76\u53d1\u95ee\u9898\uff0c\u60a8\u53ef\u4ee5\u53c2\u8003\u5355\u72ec\u7684\u4e66\u7c4d\uff0c\u4f8b\u5982 Rainer Grimm \u7684\u300a Concurrency with Modern C++ \u300b\u6216\u8005 Anthony Williams \u7684\u300a C++ Concurrency in Action \u300b\u3002 Lambda \u548c std::thread \u8ba9\u6211\u4eec\u5148\u770b\u4e00\u4e0b\u81ea\u4ece C++11 \u5c31\u5f00\u59cb\u652f\u6301\u7684 std::thread \u3002 \u60a8\u53ef\u80fd\u5df2\u7ecf\u77e5\u9053 std::thread \u5728\u5176\u6784\u9020\u51fd\u6570\u4e2d\u63a5\u53d7\u4e00\u4e2a\u53ef\u8c03\u7528\u5bf9\u8c61\u3002 \u53ef\u8c03\u7528\u5bf9\u8c61\u53ef\u80fd\u662f\u4e00\u4e2a\u666e\u901a\u7684\u51fd\u6570\u6307\u9488\u3001\u4eff\u51fd\u6570\u6216\u8005 Lamdba \u8868\u8fbe\u5f0f\u3002 \u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a \u4ee3\u7801 4-13 \u5c06 Lamdba \u4f20\u9012\u7ed9 thread #include <iostream> #include <numeric> // for std::iota #include <thread> #include <vector> int main () { const auto printThreadID = []( const char * str ) { std :: cout << str << \": \" << std :: this_thread :: get_id () << \" thread id \\n \" ; }; std :: vector < int > numbers ( 100 ); std :: thread iotaThread ( [ & numbers , & printThreadID ]( int startArg ) { std :: iota ( numbers . begin (), numbers . end (), startArg ); printThreadID ( \"iota in\" ); }, 10 ); iotaThread . join (); printThreadID ( \"printing numbers in\" ); for ( const auto & num : numbers ) std :: cout << num << \", \" ; } \u5728\u4e0a\u8ff0\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 Lamdba \u8868\u8fbe\u5f0f\u521b\u5efa\u4e86\u4e00\u4e2a\u7ebf\u7a0b\u3002 std::thread \u7c7b\u62e5\u6709\u975e\u5e38\u7075\u6d3b\u7684\u6784\u9020\u51fd\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u751a\u81f3\u80fd\u591f\u5728 Lamdba \u4e2d\u4f20\u5165\u4e00\u4e2a\u53c2\u6570\uff0c\u5728\u4e0a\u8ff0\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u5c06 10 \u4f5c\u4e3a startArg \u4f20\u7ed9\u4e86 Lamdba\u3002 \u4e0a\u8ff0\u4ee3\u7801\u5f88\u7b80\u5355\uff0c\u56e0\u4e3a\u6211\u4eec\u901a\u8fc7 join \u63a7\u5236\u4e86\u7ebf\u7a0b\u7684\u6267\u884c\uff0c\u4fdd\u8bc1\u6211\u4eec\u5728\u8f93\u51fa numbers \u4e4b\u524d\uff0c numbers \u91cc\u7684\u6570\u636e\u4e00\u5b9a\u4f1a\u51c6\u5907\u597d\u3002 \u5173\u952e\u7684\u662f\uff0c\u867d\u7136 Lamdba \u4f7f\u5f97\u521b\u5efa\u7ebf\u7a0b\u53d8\u5f97\u66f4\u52a0\u5bb9\u6613\u548c\u65b9\u4fbf\uff0c\u4f46\u662f\u5b83\u4ecd\u7136\u662f\u5f02\u6b65\u6267\u884c\u7684\u3002 \u95ed\u5305\u5e76\u4e0d\u4f1a\u6539\u53d8\u5176\u5f02\u6b65\u6267\u884c\u7684\u7279\u6027\uff0c\u95ed\u5305\u540c\u6837\u4f1a\u53d7\u5230\u6240\u6709\u7ade\u4e89\u6761\u4ef6\u548c\u963b\u585e\u7684\u5f71\u54cd\u3002 \u6211\u4eec\u53ef\u4ee5\u770b\u4e00\u4e0b\u4e0b\u9762\u7684\u4f8b\u5b50\uff1a \u4ee3\u7801 4-14 \u901a\u8fc7\u5f88\u591a\u7ebf\u7a0b\u66f4\u6539\u5171\u4eab\u53d8\u91cf #include <iostream> #include <thread> #include <vector> int main () { int counter = 0 ; const auto maxThreads = std :: thread :: hardware_concurrency (); std :: vector < std :: thread > threads ; threads . reserve ( maxThreads ); for ( size_t tCounter = 0 ; tCounter < maxThreads ; ++ tCounter ) { threads . push_back ( std :: thread ([ & counter ]() noexcept { for ( int i = 0 ; i < 1000 ; ++ i ) { ++ counter ; -- counter ; ++ counter ; -- counter ; } })); } for ( auto & thread : threads ) { thread . join (); } std :: cout << counter << std :: endl ; } std::thread::hardware_concurrency() \u662f\u4e00\u4e2a\u9759\u6001\u6210\u5458\u51fd\u6570\u3002\u5b83\u4f1a\u8fd4\u56de\u652f\u6301\u7684\u7ebf\u7a0b\u6570\u91cf\u3002 \u901a\u5e38\u5b83\u662f\u7ed9\u5b9a\u673a\u5668\u4e0a\u7684\u786c\u4ef6\u7ebf\u7a0b\u6570\uff0c\u636e Coliru \u8bf4\uff0c\u5728 Wandbox \u4e0a\u901a\u5e38\u662f 3 \u3002 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u82e5\u5e72\u4e2a\u7ebf\u7a0b\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u5bf9 counter \u6709\u4e00\u4e9b\u8fd0\u7b97\u3002 counter \u53d8\u91cf\u88ab\u6240\u6709\u7ebf\u7a0b\u5171\u4eab\u3002 \u5728 C++20 \u4e2d\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 std::jthread \uff0c\u5b83\u80fd\u591f\u5728\u6790\u6784\u7684\u65f6\u5019\u8fdb\u884c join \u5e76\u4e14\u80fd\u591f\u63a5\u6536\u505c\u6b62\u6807\u8bb0\u7684\u7ebf\u7a0b\u3002 \u8fd9\u79cd\u65b0\u7684\u7ebf\u7a0b\u5bf9\u8c61\u80fd\u591f\u5141\u8bb8\u7528\u6237\u5bf9\u7ebf\u7a0b\u6267\u884c\u8fdb\u884c\u66f4\u591a\u7684\u63a7\u5236\u3002 \u867d\u7136\u60a8\u53ef\u80fd\u5e0c\u671b\u7684\u6700\u7ec8\u7ed3\u679c\u662f 0 \uff0c\u4f46\u662f\u7ed3\u679c\u662f\u672a\u5b9a\u4e49\u7684\u3002 \u5f53\u4e00\u4e2a\u7ebf\u7a0b\u6b63\u5728\u8bfb\u8be5\u53d8\u91cf\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u6b63\u5728\u6709\u53e6\u5916\u4e00\u4e2a\u53d8\u91cf\u5728\u5e76\u53d1\u5199\uff0c\u5bfc\u81f4\u6700\u7ec8\u7684\u7ed3\u679c\u662f\u672a\u5b9a\u4e49\u7684\u3002 \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4e0e\u5e38\u89c4\u7ebf\u7a0b\u573a\u666f\u4e00\u6837\uff0c\u6211\u4eec\u5e94\u8be5\u4f7f\u7528\u67d0\u79cd\u540c\u6b65\u673a\u5236\u3002 \u6bd4\u5982\u4e0a\u9762\u90a3\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u8f83\u4e3a\u6613\u7528\u7684\u539f\u5b50\u53d8\u91cf\u3002 \u4ee3\u7801 4-15 \u4f7f\u7528\u539f\u5b50\u53d8\u91cf #include <atomic> #include <iostream> #include <thread> #include <vector> int main () { std :: atomic < int > counter = 0 ; const auto maxThreads = std :: thread :: hardware_concurrency (); std :: vector < std :: thread > threads ; threads . reserve ( maxThreads ); for ( size_t tCounter = 0 ; tCounter < maxThreads ; ++ tCounter ) { threads . push_back ( std :: thread ([ & counter ]() noexcept { for ( int i = 0 ; i < 1000 ; ++ i ) { counter . fetch_add ( 1 ); counter . fetch_sub ( 1 ); counter . fetch_add ( 1 ); counter . fetch_sub ( 1 ); } })); } for ( auto & thread : threads ) { thread . join (); } std :: cout << counter . load () << std :: endl ; } \u4e0a\u9762\u7684\u4ee3\u7801\u4f1a\u6309\u6211\u4eec\u7684\u9884\u671f\u8fdb\u884c\u6267\u884c\uff0c\u56e0\u4e3a\u589e\u52a0\u548c\u51cf\u5c11\u64cd\u4f5c\u73b0\u5728\u662f\u539f\u5b50\u7684\u3002 \u8fd9\u610f\u5473\u7740\u5f53 counter \u6539\u53d8\u7684\u65f6\u5019\uff0c\u5176\u5b83\u7ebf\u7a0b\u4e0d\u80fd\u4e2d\u65ad\u8fd9\u4e2a\u64cd\u4f5c\u3002 \u300c\u540c\u6b65\u300d\u4f7f\u5f97\u4ee3\u7801\u66f4\u52a0\u5b89\u5168\uff0c\u4f46\u662f\u9700\u8981\u4ee5\u6027\u80fd\u4f5c\u4e3a\u727a\u7272\u3002 \u7136\u540e\u8fd9\u4e5f\u662f\u4e00\u4e2a\u9700\u8981\u503c\u5f97\u51fa\u4e00\u672c\u4e66\u6765\u957f\u4e45\u8ba8\u8bba\u7684\u4e3b\u9898\u3002 \u89e3\u51b3\u540c\u6b65\u95ee\u9898\u7684\u53e6\u5916\u4e00\u4e2a\u9009\u62e9\u662f\u5728\u8ba1\u7b97\u7684\u6bcf\u4e2a\u7ebf\u7a0b\u4e2d\u90fd\u6709\u4e00\u4e2a\u5c40\u90e8\u53d8\u91cf\u3002 \u7136\u540e\u5728\u7ebf\u7a0b\u7ed3\u675f\u4e4b\u524d\uff0c\u6211\u4eec\u53ef\u4ee5\u53bb\u9501\u5b9a\u5e76\u4e14\u66f4\u65b0\u5168\u5c40\u53d8\u91cf\u3002 \u503c\u5f97\u8865\u5145\u7684\u4e00\u70b9\u662f\uff0c\u5c06\u53d8\u91cf\u5b9a\u4e49\u4e3a volatile \u5e76\u4e0d\u80fd\u63d0\u4f9b\u6b63\u786e\u7684\u540c\u6b65\u673a\u5236\uff0c\u5e76\u4e14\u5728 C++20 \u4e2d volatile \u5728\u8bb8\u591a\u5730\u65b9\u88ab\u5f03\u7528\u3002 \u6b63\u5982\u6211\u4eec\u6240\u89c1\uff0c\u4f7f\u7528 Lambda \u8868\u8fbe\u5f0f\u521b\u5efa\u7ebf\u7a0b\u975e\u5e38\u65b9\u4fbf\u3002 \u5b83\u53ef\u4ee5\u4e0e\u7ebf\u7a0b\u58f0\u660e\u5728\u4e00\u8d77\uff0c\u5e76\u4e14\u53ef\u4ee5\u505a\u4efb\u4f55\u4f60\u5728\u5e38\u89c4\u51fd\u6570\u548c\u4eff\u51fd\u6570\u4e2d\u80fd\u591f\u505a\u7684\u4e8b\u60c5\u3002 \u73b0\u5728\u8ba9\u6211\u4eec\u6765\u5c1d\u8bd5\u4e00\u4e0b\u5728 C++ \u4e2d\u65b0\u5f15\u5165\u7684\u53e6\u5916\u4e00\u4e2a\u79d1\u6280\u3002 Lambda \u548c std::async \u60a8\u53ef\u4ee5\u4f7f\u7528\u591a\u7ebf\u7a0b\u7684\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u662f\u901a\u8fc7 std::async \u3002 \u6211\u4eec\u5728 C++11 \u4e2d\u901a\u5e38\u5c06\u8fd9\u4e2a\u529f\u80fd\u4e0e\u7ebf\u7a0b\u4e00\u8d77\u4f7f\u7528\u3002 \u8fd9\u662f\u4e00\u4e2a\u9ad8\u7ea7 API\uff0c\u5141\u8bb8\u60a8\u5ef6\u8fdf\u6216\u5b8c\u5168\u5f02\u6b65\u5730\u8c03\u7528\u548c\u8ba1\u7b97\u3002 \u73b0\u5728\u8ba9\u6211\u4eec\u5c06 iota \u7684\u4f8b\u5b50\u4f7f\u7528 std::async \u6765\u5b9e\u73b0\uff1a \u4ee3\u7801 4-16 \u4f7f\u7528 std::async \u5f02\u6b65\u8c03\u7528\u4ee3\u7801 #include <future> // for async and future #include <iostream> #include <numeric> // for std::iota #include <thread> #include <vector> int main () { const auto printThreadID = []( const char * str ) { std :: cout << str << \": \" << std :: this_thread :: get_id () << \" thread id \\n \" ; }; std :: vector < int > numbers ( 100 ); std :: future < void > iotaFuture = std :: async ( std :: launch :: async , [ & numbers , startArg = 10 , & printThreadID ]() { std :: iota ( numbers . begin (), numbers . end (), startArg ); printThreadID ( \"iota in\" ); }); iotaFuture . get (); // make sure we get the results... printThreadID ( \"printing numbers in\" ); for ( const auto & num : numbers ) std :: cout << num << \", \" ; } \u8fd9\u4e00\u6b21\uff0c\u6211\u4eec\u6ca1\u6709\u4f7f\u7528\u7ebf\u7a0b\uff0c\u800c\u662f\u4f9d\u8d56\u4e86 std::future \u673a\u5236\u6765\u5b9e\u73b0\u3002 \u8fd9\u662f\u4e00\u4e2a\u5904\u7406\u540c\u6b65\u5e76\u4fdd\u8bc1\u8c03\u7528\u7ed3\u679c\u5728\u6211\u4eec\u901a\u8fc7 .get() \u8bf7\u6c42\u65f6\u53ef\u7528\u7684\u5bf9\u8c61\u3002 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7 std::async \u8c03\u5ea6 Lambda \u7684\u6267\u884c\uff0c\u7136\u540e\u901a\u8fc7\u8c03\u7528 .get() \u6765\u7b49\u5f85\u8fd9\u4e9b\u88ab\u8c03\u5ea6\u7684\u4efb\u52a1\u6267\u884c\u5b8c\u6bd5\u3002 \u7136\u540e\uff0c\u4e0a\u9762\u7684\u4ee3\u7801\u5b9e\u73b0\u4e0d\u591f\u4f18\u96c5\u3002 \u56e0\u4e3a\u6211\u4eec\u4f7f\u7528\u4e86 future<void> \u5e76\u4e14\u4f7f\u7528\u5f15\u7528\u6355\u83b7\u4e86 numbers \u3002 \u66f4\u597d\u7684\u89e3\u8026\u65b9\u5f0f\u5e94\u8be5\u662f\u4f7f\u7528 std::future<std::vector<int>> \uff0c\u7136\u540e\u901a\u8fc7 future \u7684 .get() \u673a\u5236\u6765\u4f20\u9012\u7ed3\u679c\u3002 \u50cf\u662f\u4e0b\u8ff0\u4ee3\u7801\u5199\u7684\u4e00\u6837\uff1a std :: future < std :: vector < int >> iotaFuture = std :: async ( std :: launch :: async , [ starArg = 10 ]() { std :: vector < int > numbers ( 100 ); std :: iota ( numbers . begin (), numbers . end (), startArg ); std :: cout << \"calling from: \" << std :: this_thread :: get_id () << \" thread id \\n \" ; return numbers ; }); auto vec = iotaFuture . get (); // make sure we get the results...// ... \u957f\u4e45\u4ee5\u6765\uff0c std::async/std::future \u4f3c\u4e4e\u83b7\u5f97\u4e86\u8912\u8d2c\u4e0d\u4e00\u7684\u8bc4\u4ef7\u3002 \u770b\u8d77\u6765\u53ef\u80fd\u662f\u5b9e\u73b0\u7684\u592a\u7c97\u9c81\u4e86\u3002 \u5b83\u9002\u7528\u4e8e\u76f8\u5bf9\u7b80\u5355\u7684\u60c5\u51b5\uff0c\u5728\u4e00\u4e9b\u590d\u6742\u7684\u60c5\u51b5\u4e0b\u53ef\u80fd\u6ca1\u90a3\u4e48\u6709\u6548\uff0c\u4f8b\u5982\uff1a continuation task merging no cancellation/joining it\u2019s not a regular type and a few other issues \u5982\u679c\u4f60\u60f3\u4e86\u89e3\u66f4\u591a\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u9605\u8bfb\u4ee5\u4e0b\u8d44\u6599\uff1a There is a Better Future - Felix Petriconi - code::dive 2018 code::dive 2016 conference\u2013Sean Parent\u2013Better Code: Concurrency Core C++ 2019 :: Avi Kivity :: Building efficient I/O intensive applications with Seastar Lambda \u548c C++17 \u7684\u5e76\u884c\u7b97\u6cd5 \u5728\u8ba8\u8bba\u4e86 C++11 \u7684\u7ebf\u7a0b\u652f\u6301\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u8f6c\u5411\u66f4\u65b0\u7684\u6807\u51c6\uff1aC++17\u3002 \u8fd9\u6b21\u6709\u4e00\u4e2a\u8d85\u7ea7\u597d\u7528\u7684\u6280\u5de7\uff0c\u5141\u8bb8\u60a8\u5e76\u884c\u5316\u6807\u51c6\u5e93\u4e2d\u7684\u5927\u591a\u6570\u7b97\u6cd5\u3002 \u60a8\u6240\u8981\u505a\u7684\u5c31\u662f\u5728\u7b97\u6cd5\u4e2d\u6307\u5b9a\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u4f8b\u5982\uff1a auto myVec = GenerateVector (); std :: sort ( std :: execution :: par , myVec . begin (), myVec . end ()); \u503c\u5f97\u6ce8\u610f\u7684\u662f\u6211\u4eec\u6307\u5b9a\u4e86\u7b2c\u4e00\u4e2a\u53c2\u6570 std::execution::par \u3002 \u5b83\u5c06\u4e3a\u6392\u5e8f\u7b97\u6cd5\u5f00\u542f\u5e76\u53d1\u6267\u884c\u7684\u7279\u6027\u3002 \u6211\u4eec\u8fd8\u6709\u5176\u5b83\u7684\u7279\u6027\uff1a \u7279\u6027\u540d \u63cf\u8ff0 sequenced_policy \u8fd9\u662f\u4e00\u79cd\u6267\u884c\u7b56\u7565\u7c7b\u578b\uff0c\u7528\u4f5c\u6d88\u9664\u5e76\u884c\u7b97\u6cd5\u91cd\u8f7d\u7684\u6b67\u4e49\u5e76\u6307\u793a\u5e76\u884c\u7b97\u6cd5\u7684\u6267\u884c\u4e0d\u80fd\u5e76\u884c\u5316\u3002 parallel_policy \u8fd9\u662f\u4e00\u79cd\u6267\u884c\u7b56\u7565\u7c7b\u578b\uff0c\u7528\u4f5c\u6d88\u9664\u5e76\u884c\u7b97\u6cd5\u91cd\u8f7d\u7684\u6b67\u4e49\u5e76\u6307\u793a\u5e76\u884c\u7b97\u6cd5\u7684\u6267\u884c\u53ef\u4ee5\u5e76\u884c\u5316\u3002 parallel_unsequenced_policy \u8fd9\u662f\u4e00\u79cd\u6267\u884c\u7b56\u7565\u7c7b\u578b\uff0c\u7528\u4f5c\u6d88\u9664\u5e76\u884c\u7b97\u6cd5\u91cd\u8f7d\u7684\u6b67\u4e49\u5e76\u6307\u793a\u5e76\u884c\u7b97\u6cd5\u7684\u6267\u884c\u53ef\u4ee5\u5e76\u884c\u5316\u548c\u5411\u91cf\u5316\u3002 \u5bf9\u4e8e\u6bcf\u4e00\u79cd\u7279\u6027\u6765\u8bf4\uff0c\u6211\u4eec\u9884\u5148\u5b9a\u4e49\u4e86\u5168\u5c40\u5bf9\u8c61\uff0c\u4f60\u53ef\u4ee5\u5c06\u5b83\u4f20\u9012\u7ed9\u7279\u5b9a\u7684\u7b97\u6cd5\uff1a std::execution::par std::execution::seq std::execution::par_unseq \u6267\u884c\u7279\u6027\u7684\u58f0\u660e\u548c\u5176\u5bf9\u5e94\u7684\u5168\u5c40\u5bf9\u8c61\u4f4d\u4e8e <execution> \u5934\u6587\u4ef6\u4e2d\u3002 \u5728 C++20 \u4e2d\u8fd8\u6709\u53e6\u5916\u4e00\u79cd\u6267\u884c\u7b56\u7565\uff1a unsequenced_policy \u4ee5\u53ca\u5176\u5bf9\u5e94\u7684\u5168\u5c40\u5bf9\u8c61 std::execution::unseq \u3002 \u5b83\u7528\u4e8e\u5728\u5355\u7ebf\u7a0b\u4e0a\u542f\u7528\u5411\u91cf\u5316\u6267\u884c\u3002 \u867d\u7136\u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u7684\u542f\u7528\u5e76\u884c\u6392\u5e8f\uff0c\u4f46\u662f\u6211\u4eec\u4e5f\u5f88\u6709\u53ef\u80fd\u5199\u51fa\u5982\u4e0b\u7cdf\u7cd5\u7684\u4ee3\u7801\uff1a \u4ee3\u7801 4-17 \u5411 vector \u4e2d\u62f7\u8d1d\u7684\u5371\u9669\u884c\u4e3a #include <execution> #include <iostream> #include <numeric> #include <vector> int main () { std :: vector < int > vec ( 1000 ); std :: iota ( vec . begin (), vec . end (), 0 ); std :: vector < int > output ; std :: for_each ( std :: execution :: par , vec . begin (), vec . end (), [ & output ]( int & elem ) { if ( elem % 2 == 0 ) { output . push_back ( elem ); } }); for ( const auto & elem : output ) std :: cout << elem << \", \" ; } \u4e0a\u8ff0\u4ee3\u7801\u4e0d\u5305\u542b\u4efb\u4f55\u7684\u7b2c\u4e09\u65b9\u5e93\uff0c\u4f46\u662f\u9700\u8981\u652f\u6301\u5e76\u884c\u7b97\u6cd5\u7684\u7f16\u8bd1\u5668\u3002 \u8fd9\u5728 MSVC\uff08\u59cb\u4e8e VS 2017\uff09\u4e2d\u662f\u53ef\u80fd\u53ef\u4ee5\u8fd0\u884c\u7684\uff0c\u4f46\u662f\u4e0d\u9002\u5408\u4e8e\u4efb\u4f55\u5728\u7ebf\u7f16\u8bd1\u5668\uff0c\u4f60\u53ef\u4ee5\u5c06\u8be5\u4ee3\u7801\u62f7\u8d1d\u5230 Visual Studio \u4e0a\u8fd0\u884c\u3002 \u8bd1\u8005\u6ce8\uff1a\u73b0\u5728\u53ef\u4ee5\u5728 Wandbox \u4e0a\u8dd1\u4e86\u3002 \u4f60\u770b\u5230\u8fd9\u91cc\u7684\u95ee\u9898\u6240\u5728\u4e86\u5417\uff1f \u901a\u8fc7\u5c06 Lamdba \u4f20\u9012\u7ed9 std::for_each \uff0c\u6211\u4eec\u9700\u8981\u8bb0\u4f4f\u4ee3\u7801\u4e0d\u4f1a\u8fd0\u884c\u5728\u5355\u7ebf\u7a0b\u4e2d\u3002 \u8fd9\u91cc\u53ef\u80fd\u4f1a\u4f7f\u7528\u591a\u7ebf\u7a0b\uff0c\u4f8b\u5982\uff1a\u7ebf\u7a0b\u6c60\u7684\u89e3\u51b3\u65b9\u6848\u3002 \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u8bbf\u95ee\u5171\u4eab\u8f93\u51fa\u53d8\u91cf\u4e0d\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\u3002 \u5b83\u4e0d\u4ec5\u53ef\u80fd\u4f1a\u4ee5\u9519\u8bef\u7684\u987a\u5e8f\u63d2\u5165\u5143\u7d20\uff0c\u800c\u4e14\u5982\u679c\u591a\u4e2a\u7ebf\u7a0b\u540c\u65f6\u5c1d\u8bd5\u66f4\u6539\u53d8\u91cf\uff0c\u5b83\u751a\u81f3\u4f1a\u5d29\u6e83\u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5728\u6bcf\u6b21\u8c03\u7528 push_back \u4e4b\u524d\u4f7f\u7528\u4e92\u65a5\u9501\u5e76\u9501\u5b9a\u5b83\u6765\u89e3\u51b3\u540c\u6b65\u95ee\u9898\u3002 \u4f46\u662f\u4e0a\u8ff0\u7684\u4ee3\u7801\u4ecd\u7136\u9ad8\u6548\u5417\uff1f \u5982\u679c\u8fc7\u6ee4\u7684\u6761\u4ef6\u7b80\u5355\u4e14\u6267\u884c\u901f\u5ea6\u8f83\u5feb\uff0c\u90a3\u4e48\u4e0a\u8ff0\u4ee3\u7801\u7684\u6027\u80fd\u751a\u81f3\u4f1a\u4f4e\u4e8e\u5176\u5bf9\u5e94\u7684\u4e32\u884c\u7248\u672c\u7684\u4ee3\u7801\u3002 \u5982\u679c\u6ca1\u6709\u5b9e\u9645\u8fd0\u884c\u8fc7\uff0c\u60a8\u4e0d\u77e5\u9053 output \u4e2d\u5143\u7d20\u7684\u987a\u5e8f\u3002 \u8fd9\u4e00\u8282\u5c55\u793a\u4e86\u57fa\u672c\u7684\u5e76\u884c\u7b97\u6cd5\uff0c\u5982\u679c\u4f60\u60f3\u4e86\u89e3\u7684\u66f4\u591a\uff0c\u53ef\u4ee5\u9605\u8bfb\u4ee5\u4e0b\u6587\u7ae0\uff1a The Amazing Performance of C++17 Parallel Algorithms, is it Possible? Lambda \u548c\u5f02\u6b65 - \u603b\u7ed3 \u5f53\u4f60\u60f3\u542f\u52a8\u4e00\u4e2a\u7ebf\u7a0b\u3001\u901a\u8fc7 std::async \u6216\u8005\u8c03\u7528\u5e76\u884c\u7b97\u6cd5\u7684\u65f6\u5019\uff0c\u4f7f\u7528 Lamdba \u8868\u8fbe\u5f0f\u4f1a\u975e\u5e38\u65b9\u4fbf\u3002 \u4f46\u662f\u5fc5\u987b\u8981\u8bb0\u4f4f\u7684\u4e00\u70b9\u662f\uff0c\u95ed\u5305\u5bf9\u8c61\u5728\u5e76\u53d1\u6027\u65b9\u9762\u5e76\u6ca1\u6709\u7279\u6b8a\u6027\uff0c\u6240\u6709\u7684\u6311\u6218\u548c\u56f0\u96be\u4e5f\u90fd\u662f\u57fa\u4e8e\u6b64\u3002 9. \u603b\u7ed3 \u5728\u672c\u7ae0\u8282\u4e2d\uff0c\u60a8\u5df2\u7ecf\u770b\u5230\u4e86 C++17 \u52a0\u5165\u4e86 C++ \u4e2d\u7684\u4e24\u4e2a\u57fa\u672c\u5143\u7d20\uff0c constexpr \u548c Lamdba\u3002 \u73b0\u5728\u4f60\u53ef\u4ee5\u914d\u5408 constexpr \u4f7f\u7528 Lamdba \u8868\u8fbe\u5f0f\u4e86\u3002 \u8fd9\u662f\u6539\u8fdb\u8bed\u8a00\u4e2d\u5143\u7f16\u7a0b\u652f\u6301\u7684\u5fc5\u8981\u6b65\u9aa4\u3002 \u6211\u4eec\u5c06\u5728 C++20 \u7684\u7ae0\u8282\u4e2d\u770b\u5230\u66f4\u591a\u5173\u4e8e\u6b64\u7684\u5185\u5bb9\u3002 \u66f4\u91cd\u8981\u7684\u662f\uff0cC++17 \u6807\u51c6\u4e5f\u89e3\u51b3\u4e86\u6355\u83b7\u7684\u95ee\u9898\uff0c\u4ece C++17 \u5f00\u59cb\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7 [*this] \u5bf9 this \u8fdb\u884c\u503c\u6355\u83b7\uff0c\u4ece\u800c\u4f7f\u4ee3\u7801\u66f4\u52a0\u5b89\u5168\u3002 \u6211\u4eec\u8fd8\u67e5\u770b\u4e86 Lamdba \u76f8\u5173\u7684\u4e00\u4e9b\u4f8b\u5b50\uff1aIIFE \u6280\u672f\u3001\u6298\u53e0\u8868\u8fbe\u5f0f\u548c\u53ef\u53d8\u53c2\u6570\u6cdb\u578b Lamdba\uff0c\u4ece\u591a\u4e2a Lamdba \u8fdb\u884c\u6d3e\u751f\u5df2\u7ecf\u5f02\u6b65\u4ee3\u7801\u7684\u6267\u884c\u3002 \u7531\u4e8e\u5728 C++17 \u4e2d\u652f\u6301\u7684\u5404\u79cd\u529f\u80fd\uff0c\u6211\u4eec\u73b0\u5728\u6709\u66f4\u597d\u7684\u8bed\u6cd5\u548c\u66f4\u76f4\u63a5\u7684\u65b9\u6cd5\u6765\u7f16\u5199\u66f4\u9ad8\u6548\u7684\u4ee3\u7801\u3002","title":"Lambda in C++17"},{"location":"Chapter4/#\u56dblambda-in-c17","text":"C++17 \u4e3a Lambda \u8868\u8fbe\u5f0f\u6dfb\u52a0\u4e86\u4e24\u4e2a\u91cd\u8981\u7684\u589e\u5f3a\u7279\u6027\uff1a constexpr Lambdas *this \u7684\u6355\u83b7 \u65b0\u7684 C++ \u4fee\u8ba2\u7248\u66f4\u65b0\u4e86\u5176\u7c7b\u578b\u7cfb\u7edf\uff0c\u73b0\u5728\u5305\u542b\u4e86\u5173\u4e8e Lambda \u8868\u8fbe\u5f0f\u7684\u5f02\u5e38\u89c4\u8303\u3002 \u4f60\u53ef\u4ee5\u5728 N4659 \u4e2d\u7684 [expr.prim.lambda] \u7ae0\u8282\u67e5\u9605\u6807\u51c6\u89c4\u8303\u4e2d Lambda \u76f8\u5173\u7684\u5185\u5bb9\u3002 \u5728\u672c\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u91cd\u70b9\u5173\u6ce8\u4ee5\u4e0b\u5185\u5bb9\uff1a \u5728 C++17 \u4e2d\u5982\u4f55\u63d0\u5347 \u7acb\u5373\u8c03\u7528\u51fd\u6570\u8868\u8fbe\u5f0f\uff08IIFE pattern\uff09 \u5728 C++17 \u4e2d\u5982\u4f55\u63d0\u5347 \u5e26\u6709\u6298\u53e0\u8868\u8fbe\u5f0f\u7684\u53ef\u53d8\u6cdb\u578b Lambda\uff08Vriadic Generic Lambdas with Fold Expressions\uff09 \u4ece\u591a\u4e2a Lambda \u6d3e\u751f Lambda \u548c\u5f02\u6b65\u7f16\u7a0b","title":"\u56db\u3001Lambda in C++17"},{"location":"Chapter4/#1-lambda-\u8bed\u6cd5\u66f4\u65b0","text":"\u5728 C++17\uff0c\u6709\u4e00\u4e9b\u5173\u4e8e Lamdba \u8868\u8fbe\u5f0f\u7684\u6539\u53d8\uff1a \u4f60\u53ef\u4ee5\u5728\u53c2\u6570\u5217\u8868\u4e4b\u540e\u52a0\u4e0a constexpr \u5173\u952e\u5b57 \u52a8\u6001\u5f02\u5e38\u89c4\u8303\u5728 C++11 \u4e2d\u88ab\u5f03\u7528\uff0c\u5728 C++17 \u4e2d\u88ab\u79fb\u9664\uff0c\u6240\u4ee5\u4f60\u5e94\u8be5\u4f7f\u7528 noexcept [] () specifiers exception attr -> ret { /*code; */ } ^ ^ ^ ^ | | | | | | | optional : trailing return type | | | | | optional : mutable , constexpr , noexcept , attributes | | | parameter list ( optional when no specifiers added ) | lambda introducer with an optional capture list \u4f60\u53ef\u4ee5\u5728\u4e0b\u4e00\u8282\u4e2d\u4e86\u89e3\u5230\u66f4\u591a\u7684\u53d8\u66f4\u3002","title":"1. Lambda \u8bed\u6cd5\u66f4\u65b0"},{"location":"Chapter4/#2-\u7c7b\u578b\u7cfb\u7edf\u4e2d\u7684\u5f02\u5e38\u89c4\u8303","text":"\u5728\u6211\u4eec\u4e86\u89e3\u5173\u4e8e Lambda \u7684\u8bed\u6cd5\u6539\u8fdb\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u5f15\u5165\u4e00\u4e2a C++17 \u7684\u901a\u7528\u8bed\u8a00\u7279\u6027\u3002 \u51fd\u6570\u7684\u5f02\u5e38\u89c4\u8303\u8fc7\u53bb\u4e0d\u5c5e\u4e8e\u51fd\u6570\u7c7b\u578b\u7684\u4e00\u90e8\u5206\uff0c\u4f46\u662f\u5728 C++17 \u4e2d\u88ab\u7eb3\u5165\u5176\u4e2d\uff0c\u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u6709\u4e24\u79cd\u51fd\u6570\u7c7b\u578b\uff0c\u4e00\u79cd\u6709 noexcept \uff0c\u53e6\u4e00\u79cd\u6ca1\u6709\u3002 \u4ee3\u7801 4-1 \u7c7b\u578b\u7cfb\u7edf\u4e2d\u7684\u5f02\u5e38\u89c4\u8303 using TNoexceptVoidFunc = void ( * )() noexcept ; void SimpleNoexceptCall ( TNoexceptVoidFunc f ) { f (); } using TVoidFunc = void ( * )(); void SimpleCall ( TVoidFunc f ) { f (); } void fNoexcept () noexcept {} void fRegular () {} int main () { SimpleNoexceptCall ( fNoexcept ); SimpleNoexceptCall ([]() noexcept {}); // SimpleNoexceptCall(fRegular); // cannot convert // SimpleNoexceptCall([]() {}); // cannot convert SimpleCall ( fNoexcept ); // converts to regular function SimpleCall ( fRegular ); SimpleCall ([]() noexcept {}); // converts SimpleCall ([]() {}); } \u4e00\u4e2a\u6307\u5411 noexcept \u51fd\u6570\uff08\u5e38\u89c4\u51fd\u6570\u3001\u6210\u5458\u51fd\u6570\u3001Lambda \u51fd\u6570\uff09\u7684\u6307\u9488\u53ef\u4ee5\u88ab\u8f6c\u5316\u6210\u6307\u5411\u4e0d\u5e26 noexcept \u51fd\u6570\uff08\u4e0e\u8f6c\u6362\u524d\u5bf9\u5e94\u7684\u51fd\u6570\u7c7b\u578b\uff09\u7684\u6307\u9488\u3002 \u4f46\u662f\u53cd\u8fc7\u6765\u662f\u4e0d\u884c\u7684\u3002 \u5176\u4e2d\u4e00\u4e2a\u539f\u56e0\u662f\u4ee3\u7801\u4f18\u5316\u3002 \u5982\u679c\u7f16\u8bd1\u5668\u80fd\u591f\u786e\u4fdd\u51fd\u6570\u4e0d\u4f1a\u629b\u51fa\u5f02\u5e38\uff0c\u90a3\u4e48\u5b83\u5c31\u6709\u53ef\u80fd\u751f\u6210 \u66f4\u5feb\u7684\u4ee3\u7801 \u3002 \u5728\u6807\u51c6\u5e93\u4e2d\uff0c\u6709\u5f88\u591a\u5730\u65b9\u4f1a\u57fa\u4e8e noexcept \u5224\u65ad\u4ee3\u7801\u80fd\u591f\u53d8\u5f97\u66f4\u9ad8\u6548\uff0c\u8fd9\u4e5f\u662f std::vector \u5185\u90e8\u8fdb\u884c\u5143\u7d20\u79fb\u52a8\u65f6\u662f\u5426\u4f1a\u629b\u51fa\u5f02\u5e38\u7684\u5224\u65ad\u673a\u5236\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u6817\u5b50 \u4ee3\u7801 4-2 \u4f7f\u7528 type_traits \u5224\u65ad\u53ef\u8c03\u7528\u5bf9\u8c61\u662f\u5426\u6807\u8bb0\u4e3a\u4e86 noexcept #include <iostream> #include <type_traits> template < typename Callable > void CallWith10 ( Callable && fn ) { if constexpr ( std :: is_nothrow_invocable_v < Callable , int > ) { std :: cout << \"Calling fn(10) with optimisation \\n \" ; fn ( 10 ); } else { std :: cout << \"Calling fn(10) normally \\n \" ; fn ( 10 ); } } int main () { int x { 10 }; const auto lam = [ & x ]( int y ) noexcept { x += y ; }; CallWith10 ( lam ); const auto lamEx = [ & x ]( int y ) { std :: cout << \"lamEx with x = \" << x << '\\n' ; x += y ; }; CallWith10 ( lamEx ); } \u8f93\u51fa\u5982\u4e0b\uff1a Calling fn(10) with optimisation Calling fn(10) normally lamEx with x = 20 \u4e0a\u8ff0\u4ee3\u7801\u4f7f\u7528 std::is_nothrow_invocable_v \u53bb\u68c0\u67e5\u4f20\u5165\u7684\u53ef\u8c03\u7528\u5bf9\u8c61\u662f\u5426\u5177\u6709 noexcept \u6807\u8bb0\u3002 \u52a8\u6001\u5f02\u5e38\u89c4\u8303\u5728 C++11 \u4e2d \u88ab\u5f03\u7528 \uff0c\u5728 C++17 \u4e2d \u88ab\u5220\u9664 \uff0c\u53ea\u80fd\u4f7f\u7528 noexcept \u5173\u952e\u5b57\u53bb\u58f0\u660e\u4e00\u4e2a\u4e0d\u4f1a\u629b\u51fa\u5f02\u5e38\u7684\u51fd\u6570\u3002 Question\uff1a\u5982\u679c\u5728\u4e00\u4e2a\u5177\u6709 noexcept \u58f0\u660e\u7684\u51fd\u6570\u4e2d\u629b\u51fa\u5f02\u5e38\uff0c\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f Answer\uff1a\u7f16\u8bd1\u671f\u4f1a\u8c03\u7528 std::terminate \u3002","title":"2. \u7c7b\u578b\u7cfb\u7edf\u4e2d\u7684\u5f02\u5e38\u89c4\u8303"},{"location":"Chapter4/#3constexpr-lambda-\u8868\u8fbe\u5f0f","text":"\u4ece C++11 \u5f00\u59cb\uff0c constexpr \u5173\u952e\u5b57\u80fd\u591f\u5728\u7f16\u8bd1\u671f\u8bc4\u4f30\u8d8a\u6765\u8d8a\u591a\u7684\u4ee3\u7801\u3002\u8fd9\u4e0d\u4ec5\u4f1a\u5f71\u54cd\u5230\u7a0b\u5e8f\u7684\u6027\u80fd\uff0c\u4e5f\u8ba9\u7f16\u8bd1\u671f\u7684\u7f16\u7801\u53d8\u5f97\u66f4\u52a0\u6109\u5feb\u548c\u6709\u529b\u3002 \u5728 C++17\uff0c constexpr \u80fd\u591f\u88ab\u7528\u4e8e Lambda \u8868\u8fbe\u5f0f\uff0c\u53ef\u4ee5\u770b\u4e00\u4e0b\u89c4\u8303 [expr.prim.lambda] \u4e2d\u7684 #4\uff1a \u5982\u679c\u51fd\u6570\u662f\u58f0\u660e\u4e2d\u5e26\u6709 constexpr \u6216\u8005 Lambda \u8868\u8fbe\u5f0f\u7684\u53c2\u6570\u58f0\u660e\u5b50\u53e5\u540e\u8ddf constexpr \uff0c\u90a3\u4e48\u8fd9\u662f\u4e00\u4e2a constexpr \u51fd\u6570\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u5982\u679c Lambda \u8868\u8fbe\u5f0f\u9075\u5faa constexpr \u51fd\u6570\u7684\u89c4\u5219\uff0c\u90a3\u4e48 Lambda \u8868\u8fbe\u5f0f\u5bf9\u5e94\u7684 operator() \u51fd\u6570\u88ab\u9690\u5f0f\u5b9a\u4e49\u4e3a constexpr\uff0c\u5728 C++17 \u4e2d\uff0cconstexpr \u51fd\u6570\u6839\u636e [dcl.constexpr] #3 \u9700\u8981\u6ee1\u8db3\u4ee5\u4e0b\u89c4\u5219\uff1a \u4e0d\u662f\u4e00\u4e2a\u865a\u51fd\u6570 \u8fd4\u56de\u7c7b\u578b\u662f literal type\uff08\u53ef\u4ee5\u5728\u7f16\u8bd1\u671f\u8ba1\u7b97\u7684\u53d8\u91cf\uff09 \u6240\u6709\u53c2\u6570\u90fd\u662f literal type \u5176\u51fd\u6570\u4f53\u5e94\u4e3a = delete, = default \u6216\u8005\u662f\u4e00\u4e2a\u4e0d\u5305\u542b\u4ee5\u4e0b\u8bed\u53e5\u7684\u590d\u5408\u8bed\u53e5\uff1a an asm-definition a goto statement an identifier label try block a definition of a variable of non-literal type or of static or thread storage duration or for which no initialisation is performed \u4e3e\u4e2a\u6817\u5b50\uff1a constexpr auto Square = []( int n ) { return n * n ; }; // implicit constexpr static_assert ( Square ( 2 ) == 4 ); \u7531\u4e8e Square \u51fd\u6570\u4f53\u975e\u5e38\u7b80\u5355\u5e76\u4e14\u5b83\u6ca1\u6709\u8fdd\u53cd constexpr \u6240\u9700\u7684\u76f8\u5173\u89c4\u5219\uff0c\u6240\u4ee5\u5b83\u88ab\u9690\u5f0f\u58f0\u660e\u4e3a constexpr \u5e76\u4e14\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 static_assert \u5728\u7f16\u8bd1\u671f\u8c03\u7528\u5b83\u3002","title":"3.constexpr Lambda \u8868\u8fbe\u5f0f"},{"location":"Chapter4/#\u7528\u4f8b","text":"\u6709\u6ca1\u6709\u66f4\u5b9e\u7528\u7684\u4ee3\u7801\u4f8b\u5b50\uff1f \u6211\u4eec\u5148\u5b9e\u73b0\u4e00\u4e2a\u5e38\u7528\u7684\u7d2f\u52a0\u7b97\u6cd5\uff1a \u4ee3\u7801 4-3 \u7b80\u5355\u7684\u7d2f\u52a0 #include <array> template < typename Range , typename Func , typename T > constexpr T SimpleAccumulate ( Range && range , Func func , T init ) { for ( auto && elem : range ) { init += func ( elem ); } return init ; } int main () { constexpr std :: array arr { 1 , 2 , 3 }; constexpr auto sum = SimpleAccumulate ( arr , []( auto i ) { return i * i ; }, 0 ); static_assert ( sum == 14 ); } \u8be5\u4ee3\u7801\u5728\u5c06 Lamdba \u51fd\u6570\u4f20\u9012\u7ed9 SimpleAccumulate \u65f6\uff0c\u867d\u7136\u6ca1\u6709\u663e\u793a\u58f0\u660e constexpr \uff0c\u4f46\u662f\u7f16\u8bd1\u5668\u4f1a\u53d1\u73b0\u8fd9\u4e2a Lamdba \u51fd\u6570\u88ab\u4e00\u4e2a constexpr \u51fd\u6570\u8c03\u7528\u4e86\uff0c\u5e76\u4e14\u8be5 Lamdba \u51fd\u6570\u4f53\u53ea\u5305\u542b\u7b80\u5355\u7684\u8bed\u53e5\uff0c\u7b26\u5408\u6210\u4e3a constexpr Lamdba \u7684\u6761\u4ef6\uff0c\u6240\u4ee5\u4e0d\u4f1a\u62a5\u9519\u3002 \u5e76\u4e14\u8fd9\u4e00\u8fc7\u7a0b\u540c\u6837\u9002\u7528\u4e8e SimpleAccumulate \u4e2d\u8c03\u7528\u5230\u7684 std::array \uff0c std::begin \uff0c std::end \u3002 \u6240\u4ee5 SimpleAccumulate \u51fd\u6570\u53ef\u80fd\u4f1a\u8fd0\u884c\u5728\u7f16\u8bd1\u671f\u3002 \u53e6\u5916\u4e00\u4e2a\u4f8b\u5b50\u662f\u4f7f\u7528\u4e86\u9012\u5f52\u7684 Lamdba\uff1a \u4ee3\u7801 4-4 \u9012\u5f52\u7684 constexpr Lamdba int main () { constexpr auto factorial = []( int n ) { constexpr auto fact_impl = []( int n , const auto & impl ) -> int { return n > 1 ? n * impl ( n - 1 , impl ) : 1 ; }; return fact_impl ( n , fact_impl ); }; static_assert ( factorial ( 5 ) == 120 ); } \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5c06 factorial \u58f0\u660e\u4e3a constexpr \uff0c\u8fd9\u5c06\u4f1a\u5141\u8bb8\u4f7f\u7528\u7f16\u8bd1\u671f\u8fdb\u884c\u68c0\u67e5\u7684 static_assert \u3002","title":"\u7528\u4f8b"},{"location":"Chapter4/#\u6355\u83b7\u53d8\u91cf","text":"\u4f60\u53ef\u4ee5\u6355\u83b7\u53d8\u91cf\uff08\u9700\u8981\u4fdd\u8bc1\u6355\u83b7\u540e\u4ecd\u7136\u662f\u4e2a\u5e38\u91cf\u8868\u8fbe\u5f0f\uff09\uff1a \u4ee3\u7801 4-5 \u6355\u83b7\u5e38\u91cf constexpr int add ( int const & t , int const & u ) { return t + u ; } int main () { constexpr int x = 0 ; constexpr auto lam = [ x ]( int n ) { return add ( x , n ); }; static_assert ( lam ( 10 ) == 10 ); } \u7136\u800c\uff0c\u6709\u8da3\u7684\u4e8b\u60c5\u662f\uff0c\u4ee3\u7801\u5982\u679c\u8fd9\u4e48\u5199\u7684\u8bdd\uff1a constexpr int x = 0 ; constexpr auto lam = [ x ]( int n ) { return n + x }; \u4f60\u5e76\u4e0d\u9700\u8981\u53bb\u6355\u83b7 x \u3002 \u5728 Clang \u4e2d\uff0c\u6211\u4eec\u751a\u81f3\u4f1a\u5f97\u5230\u5982\u4e0b\u7684 warning\uff1a warning: lambda capture 'x' is not required to be captured for this use \u540c\u6837\u7684\uff0c\u5982\u679c\u6211\u4eec\u5c06 add \u51fd\u6570\u6539\u4e3a\u503c\u4f20\u9012\u7684\u8bdd\uff0c\u4e5f\u4f1a\u4ea7\u751f\u540c\u6837\u7684\u6548\u679c\uff1a constexpr int add ( int t , int u ) { return t + u ; } \u8fd9\u662f\u56e0\u4e3a\u5982\u679c\u6211\u4eec\u4f9d\u8d56\u5e38\u91cf\u8868\u8fbe\u5f0f\uff0c\u7f16\u8bd1\u5668\u53ef\u4ee5\u4f18\u5316\u53d8\u91cf\uff0c\u7279\u522b\u662f\u5bf9\u4e8e\u5728\u7f16\u8bd1\u671f\u5c31\u53ef\u4ee5\u77e5\u9053\u503c\u7684\u5185\u7f6e\u7c7b\u578b\u3002 \u4e0b\u9762\u662f\u4e00\u4e9b\u6765\u81ea CppReference \u7684\u63cf\u8ff0\uff1a \u4e00\u4e2a Lamdba \u8868\u8fbe\u5f0f\u5982\u679c\u60f3\u8981\u4e0d\u7ecf\u8fc7\u6355\u83b7\u8bfb\u53d6\u4e00\u4e2a\u53d8\u91cf\u7684\u503c\uff0c\u5f53\u4e14\u4ec5\u5f53\u8be5\u53d8\u91cf\uff1a \u662f\u4e00\u4e2a const non-volatile integral \u6216\u8005 enumeration type \u5e76\u4e14\u88ab constant expression \u521d\u59cb\u5316 \u662f constexpr \u5e76\u4e14\u6ca1\u6709 mutable \u7684\u53d8\u91cf \u5982\u679c\u60f3\u8981\u83b7\u5f97\u66f4\u591a\u5173\u4e8e\u6b64\u7684\u4fe1\u606f\uff0c\u4f60\u53ef\u4ee5\u9605\u8bfb\u8fd9\u90e8\u5206\u7684\u6807\u51c6 [basic.def.odr #4] \u3002 \u5728\u7b2c\u4e00\u4e2a add() \u7684\u4f8b\u5b50\u4e2d\uff0c\u63a5\u6536\u53d8\u91cf\u7684\u65f6\u5019\u4f7f\u7528\u4e86\u5f15\u7528\u4f20\u9012\uff0c\u6211\u4eec\u5f3a\u5236\u7f16\u8bd1\u5668\u521b\u5efa\u4e00\u4e2a\u95ed\u5305\u6210\u5458\uff0c\u7136\u540e\u5c06\u5176\u7ed1\u5b9a\u5230\u5f15\u7528\u3002 \u7136\u540e\u8ba9 add() \u51fd\u6570\u8fd4\u56de\u53c2\u6570\u7684\u5730\u5740\uff0c\u7136\u540e\u5b83\u4eec\u8fdb\u884c\u6bd4\u8f83\uff0c\u50cf\u662f\u8fd9\u6837\uff1a int const * address ( int const & x ) { return & x ; } auto f = [ x ] { auto * p = address ( x ); return p == & x ; // these need to be true }; \u56e0\u6b64\u7f16\u8bd1\u5668\u9700\u8981\u5728\u95ed\u5305\u4e2d\u5b58\u50a8 x \u7684\u62f7\u8d1d\uff0c\u4e5f\u5c31\u662f\u8bf4\u9700\u8981\u6355\u83b7\u5b83\uff0c\u8fd9\u4e2a\u6355\u83b7\u64cd\u4f5c\u5e76\u4e0d\u80fd\u88ab\u4f18\u5316\u6389\u3002","title":"\u6355\u83b7\u53d8\u91cf"},{"location":"Chapter4/#constexpr-\u603b\u7ed3","text":"\u7b80\u800c\u8a00\u4e4b\uff1a constexpr \u5141\u8bb8\u4f60\u8fdb\u884c\u6a21\u677f\u7f16\u7a0b\u5e76\u4e14\u53ef\u80fd\u4f7f\u7528\u66f4\u77ed\u7684\u4ee3\u7801\u3002 \u4e3a\u5c06\u6765\u505a\u51c6\u5907\uff1a \u5728 C++20 \u4e2d\uff0c\u6211\u4eec\u5c06\u4f1a\u62e5\u6709\u8bb8\u591a constexpr \u6807\u51c6\u7684\u7b97\u6cd5\u548c\u5bb9\u5668\uff0c\u6bd4\u5982 std::vector \u548c std::string \uff0c\u6240\u4ee5 constexpr Lamdba \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4f1a\u975e\u5e38\u4fbf\u5229\u3002 \u5c4a\u65f6\uff0c\u8fd0\u884c\u65f6\u7684\u4ee3\u7801\u548c\u7f16\u8bd1\u671f\u8fd0\u884c\u7684\u4ee3\u7801\u5c06\u4f1a\u975e\u5e38\u76f8\u4f3c\u3002 \u73b0\u5728\u8ba9\u6211\u4eec\u73b0\u5728\u4e86\u89e3\u81ea C++17 \u5f15\u5165\u7684\u7b2c\u4e8c\u4e2a\u91cd\u8981\u7684\u7279\u6027\u3002","title":"constexpr \u603b\u7ed3"},{"location":"Chapter4/#4-\u6355\u83b7-this","text":"\u8fd8\u8bb0\u5f97\u6211\u4eec\u4e4b\u524d\u662f\u5982\u4f55 \u6355\u83b7\u7c7b\u7684\u6210\u5458\u53d8\u91cf \u7684\u5417\uff1f \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u6355\u83b7 this \uff08\u4f5c\u4e3a\u4e00\u4e2a\u6307\u9488\uff09\uff0c\u5e76\u4e14\u5f53\u4e34\u65f6\u521b\u5efa\u7684\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u77ed\u4e8e Lamdba \u51fd\u6570\u7684\u751f\u547d\u5468\u671f\u65f6\uff0c\u5c06\u4f1a\u51fa\u73b0\u9519\u8bef\u3002 \u5728 C++17 \u5f53\u4e2d\uff0c\u6211\u4eec\u6709\u53e6\u5916\u4e00\u79cd\u65b9\u5f0f\uff0c\u6211\u4eec\u53ef\u4ee5\u6355\u83b7 this \u7684\u62f7\u8d1d *this \uff1b \u4ee3\u7801 4-6 \u6355\u83b7 *this #include <iostream> struct Baz { auto foo () { return [ * this ] { std :: cout << s << std :: endl ; }; } std :: string s ; }; int main () { const auto f1 = Baz { \"xyz\" }. foo (); const auto f2 = Baz { \"abc\" }. foo (); f1 (); f2 (); } \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 [*this] \u6765\u6355\u83b7\u4e00\u4e2a\u5bf9\u8c61\u7684\u4e34\u65f6\u62f7\u8d1d\uff0c\u8be5\u62f7\u8d1d\u5b58\u5728\u4e8e\u95ed\u5305\u5185\u5e76\u4e14\u4e0d\u4f1a\u5728\u4e4b\u540e\u8c03\u7528\u8be5 Lamdba \u65f6\u4ea7\u751f UB\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff1a \u5728 C++17 \u4e2d\uff0c\u5982\u679c\u4f60\u5728\u7c7b\u7684\u6210\u5458\u51fd\u6570\u5f53\u4e2d\u4f7f\u7528 [=] \uff0c\u90a3\u4e48 this \u5c06\u4f1a\u88ab\u9690\u5f0f\u6355\u83b7\uff01 \u4f60\u53ef\u4ee5\u67e5\u770b C++20 \u76f8\u5173\u7684\u7ae0\u8282\u77e5\u6653\u8fd9\u5c06\u4f1a\u88ab\u589e\u5f3a\u548c\u5f03\u7528\uff01 \u53ef\u4ee5\u67e5\u770b P0806 \u83b7\u53d6\u66f4\u591a\u8d44\u6599\u3002","title":"4. \u6355\u83b7 *this"},{"location":"Chapter4/#\u4e00\u4e9b\u6307\u5bfc\u6027\u610f\u89c1","text":"\u6240\u4ee5\u6211\u4eec\u5e94\u8be5\u6355\u83b7 [this] \u8fd8\u662f [*this] \u5462\uff1f\u4ee5\u53ca\uff0c\u8fd9\u4e3a\u4ec0\u4e48\u90a3\u4e48\u91cd\u8981\uff1f \u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u5f53\u4f60\u5728\u7c7b\u7684\u8303\u56f4\u5185\u91cc\u9762\u4f7f\u7528 Lamdba \u65f6\uff0c\u4f7f\u7528 [this] \u6216\u8005 [&] \u662f\u5f88\u597d\u7684\u65b9\u5f0f\uff0c\u5f53\u4f60\u7684\u5bf9\u8c61\u5f88\u5927\u7684\u65f6\u5019\u4e0d\u4f1a\u4ea7\u751f\u989d\u5916\u7684\u62f7\u8d1d\u4ece\u800c\u5f71\u54cd\u6027\u80fd\u3002 \u5f53\u4f60\u7684 Lamdba \u8868\u8fbe\u5f0f\u7684\u751f\u547d\u5468\u671f\u53ef\u80fd\u6bd4\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u957f\u7684\u65f6\u5019\uff0c\u4f60\u5e94\u5f53\u4f7f\u7528 [*this] \u3002 \u8fd9\u5bf9\u4e8e\u5f02\u6b65\u6216\u8005\u5e76\u884c\u6267\u884c\u4e2d\u7684\u6570\u636e\u7ade\u4e89\u53ef\u80fd\u81f3\u5173\u91cd\u8981\u3002 \u6b64\u5916\uff0c\u5728\u5f02\u6b65/\u591a\u7ebf\u7a0b\u6267\u884c\u6a21\u5f0f\u4e0b\uff0cLamdba \u8868\u8fbe\u5f0f\u7684\u751f\u547d\u5468\u671f\u53ef\u80fd\u6bd4\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u66f4\u957f\uff0c\u56e0\u6b64\u6355\u83b7\u7684 this \u6307\u9488\u53ef\u80fd\u4f1a\u5931\u6548\u3002","title":"\u4e00\u4e9b\u6307\u5bfc\u6027\u610f\u89c1"},{"location":"Chapter4/#5-iife-\u66f4\u65b0","text":"\u5728 C++11\uff0c\u5f15\u5165\u4e86 IIFE - \u7acb\u5373\u8c03\u7528\u51fd\u6570\u8868\u8fbe\u5f0f \uff0c\u5728 C++17\uff0c\u6709\u4e00\u4e9b\u5173\u4e8e IIFE \u7684\u66f4\u65b0\u3002 \u5728\u4f7f\u7528 IIFE \u8fc7\u7a0b\u4e2d\u4f1a\u9047\u5230\u7684\u4e00\u4e2a\u95ee\u9898\u65f6\uff0cIIFE \u5f0f\u7684\u4ee3\u7801\u4e0d\u6613\u9605\u8bfb\u3002\u56e0\u4e3a\u8c03\u7528\u64cd\u4f5c\u7b26 () \u5f88\u5bb9\u6613\u88ab\u4eba\u5ffd\u7565\uff0c\u4e0b\u9762\u662f\u4e00\u4e2a IIFE \u7684\u4f8b\u5b50\uff1a const auto var = [ & ] { if ( TheFirstCondition ()) return one_value ; if ( TheSecondCindition ()) return second_val ; return default_value ; }(); // call it! \u5728 C++11 \u7ae0\u8282\uff0c\u6211\u4eec\u751a\u81f3\u8ba8\u8bba\u4e86\u4f7f\u7528 const auto var \u4e5f\u4f1a\u6709\u4e00\u4e9b\u8bef\u5bfc\u3002 \u8fd9\u662f\u56e0\u4e3a\u5f00\u53d1\u4eba\u5458\u53ef\u80fd\u5df2\u7ecf\u4e60\u60ef\u4e86 var \u53ef\u80fd\u662f\u4e00\u4e2a\u95ed\u5305\u5bf9\u8c61\u800c\u4e0d\u662f\u51fd\u6570\u8c03\u7528\u7ed3\u679c\u3002 \u5728 C++17 \u6709\u4e00\u4e2a\u66f4\u65b9\u4fbf\u7684\u6a21\u677f\u51fd\u6570 std::invoke() \u53ef\u4ee5\u4f7f IIFE \u66f4\u52a0\u6e05\u6670\u3002 const auto var = std :: invoke ([ & ] { if ( TheFirstCondition ()) return one_value ; if ( TheSecondCindition ()) return second_val ; return default_value ; }); \u5982\u4f60\u6240\u89c1\uff0c\u4e0d\u518d\u9700\u8981\u5728\u672b\u5c3e\u5199\u4e0a () \uff0c\u800c\u662f\u66f4\u6e05\u6670\u7684\u8fdb\u884c\u8c03\u7528\u3002 Note\uff1a std::invoke() \u4f4d\u4e8e <functional> \u5934\u6587\u4ef6\u4e2d\u3002","title":"5. IIFE \u66f4\u65b0"},{"location":"Chapter4/#6-\u53ef\u53d8\u6cdb\u578b-lambda-\u7684\u66f4\u65b0","text":"\u5728 C++14 \u7ae0\u8282\uff0c\u6211\u4eec\u4e86\u89e3\u5230\u5728\u6cdb\u578b Lamdba \u4e2d\u53ef\u4ee5\u4f7f\u7528 \u6cdb\u578b\u53c2\u6570\u5217\u8868 \u3002 \u611f\u8c22 C++17 \u5e26\u6765\u7684\u6298\u53e0\u8868\u8fbe\u5f0f\u80fd\u591f\u8ba9\u6211\u4eec\u5199\u51fa\u66f4\u52a0\u7d27\u51d1\u7684\u4ee3\u7801\u3002 \u4ee3\u7801 4-7 \u4f7f\u7528\u6298\u53e0\u8868\u8fbe\u5f0f\u5b9e\u73b0\u7684\u6c42\u548c\u51fd\u6570 #include <iostream> int main () { const auto sumLambda = []( auto ... args ) { std :: cout << \"sum of: \" << sizeof ...( args ) << \" numbers \\n \" ; return ( args + ... + 0 ); }; std :: cout << sumLambda ( 1.1 , 2.2 , 3.3 , 4.4 , 5.5 , 6.6 , 7.7 , 8.8 , 9.9 ); } \u5982\u679c\u4f60\u5c06\u4e0a\u8ff0\u4ee3\u7801\u4e0e\u4e4b\u524d\u624d C++14 \u7ae0\u8282\u4e2d\u6c42\u548c\u51fd\u6570\u7684\u4f8b\u5b50\u8fdb\u884c\u5bf9\u6bd4\uff0c\u4f60\u4f1a\u53d1\u73b0\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u4e0d\u518d\u9700\u8981\u9012\u5f52\u3002 \u5f53\u6211\u4eec\u9700\u8981\u4e66\u5199\u5305\u542b\u53ef\u53d8\u53c2\u6570\u7684\u8868\u8fbe\u5f0f\u65f6\uff0c\u4f7f\u7528\u6298\u53e0\u8868\u8fbe\u5f0f\u4f1a\u76f8\u5bf9\u7b80\u5355\u548c\u76f4\u89c2\u3002 \u4e0b\u9762\u662f\u53e6\u5916\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5b83\u80fd\u591f\u8f93\u51fa\u591a\u4e2a\u53c2\u6570\u3002 \u4ee3\u7801 4-8 \u4f7f\u7528\u6298\u53e0\u8868\u8fbe\u5f0f\u5b9e\u73b0\u7b80\u5355\u7684\u591a\u53c2\u6570\u8f93\u51fa #include <iostream> int main () { const auto printer = []( auto ... args ) { ( std :: cout << ... << args ) << '\\n' ; }; printer ( 1 , 2 , 3 , \"hello\" , 10.5f ); } \u8fd0\u884c\u8be5\u4ee3\u7801\u540e\uff0c\u4f1a\u8f93\u51fa\u6240\u6709\u7684\u53c2\u6570\u5e76\u4e14\u4e0d\u5305\u542b\u5206\u9694\u7b26\uff1a 123hello10.5 \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u5c06\u4ecb\u7ecd\u4e00\u4e2a\u5c0f\u6280\u5de7\uff0c\u4e00\u5e76\u6298\u53e0\u9017\u53f7\u5206\u9694\u7b26\uff1a \u4ee3\u7801 4-9 \u4f7f\u7528\u6298\u53e0\u8868\u8fbe\u5f0f\u5b9e\u73b0\u5e26\u5206\u9694\u7b26\u7684\u591a\u53c2\u6570\u8f93\u51fa #include <iostream> int main () { const auto printer = []( auto ... args ) { const auto printElem = []( auto elem ) { std :: cout << elem << \", \" ; }; ( printElem ( args ), ...); std :: cout << '\\n' ; }; printer ( 1 , 2 , 3 , \"hello\" , 10.5f ); } \u6211\u4eec\u5c06\u5f97\u5230\u5982\u4e0b\u8f93\u51fa\uff1a 1, 2, 3, hello, 10.5, \u4ee3\u7801\u5176\u5b9e\u53ef\u4ee5\u66f4\u77ed\uff1a const auto printer = []( auto ... args ) { (( std :: cout << args << \", \" ), ...); std :: cout << '\\n' ; }; \u5982\u679c\u6211\u4eec\u4e0d\u60f3\u8f93\u51fa\u672b\u5c3e\u9017\u53f7\u7684\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u4ee3\u7801\u6539\u6210\u8fd9\u6837\uff1a \u4ee3\u7801 4-10 \u6ca1\u6709\u5c3e\u9017\u53f7\u7684\u5e26\u5206\u9694\u7b26\u7684\u591a\u53c2\u6570\u8f93\u51fa #include <iostream> int main () { const auto printer = []( auto first , auto ... args ) { std :: cout << first ; (( std :: cout << \", \" << args ), ...); std :: cout << '\\n' ; }; printer ( 1 , 2 , 3 , \"hello\" , 10.5f ); } \u8fd9\u4e00\u6b21\u6211\u4eec\u9700\u8981\u4f7f\u7528\u901a\u7528\u6a21\u677f\u53c2\u6570\u6765\u8f93\u51fa\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002 \u7136\u540e\u4e3a\u5176\u4f59\u5143\u7d20\u4f7f\u7528\u53ef\u53d8\u53c2\u6570\u5217\u8868\uff0c\u5e76\u4e14\u5728\u8f93\u51fa\u5143\u7d20\u524d\u8f93\u51fa\u4e00\u4e2a\u9017\u53f7\u5206\u9694\u7b26\u3002 \u4ee3\u7801\u8f93\u51fa\u5982\u4e0b\uff1a 1, 2, 3, hello, 10.5","title":"6. \u53ef\u53d8\u6cdb\u578b Lambda \u7684\u66f4\u65b0"},{"location":"Chapter4/#7-\u4ece\u591a\u4e2a-lambda-\u6d3e\u751f","text":"\u5728 C++11 \u7ae0\u8282\uff0c\u6211\u4eec\u4e86\u89e3\u4e86\u4ece Lamdba \u8868\u8fbe\u5f0f\u8fdb\u884c\u6d3e\u751f\uff0c\u867d\u7136\u8fd9\u5f88\u6709\u8da3\uff0c\u4f46\u662f\u4f7f\u7528\u573a\u666f\u5f88\u6709\u9650\u3002 \u4e3b\u8981\u7684\u95ee\u9898\u662f\u5728 C++11 \u4e2d\u53ea\u652f\u6301\u7279\u5b9a\u6570\u91cf\u7684 Lambda\uff0c\u90a3\u4e48\u4f8b\u5b50\u4f7f\u7528\u4e86\u4e00\u4e2a\u6216\u4e24\u4e2a\u57fa\u7c7b\uff0c\u4f46\u662f\u5982\u4f55\u80fd\u591f\u4f7f\u7528\u53ef\u53d8\u6570\u91cf\u7684\u57fa\u7c7b\uff0c\u5373\u53ef\u53d8\u6570\u91cf\u7684 Lamdba \u8868\u8fbe\u5f0f\u3002 \u5728 C++17 \u6211\u4eec\u6709\u4e86\u76f8\u5bf9\u7b80\u5355\u7684\u6a21\u5f0f\u53bb\u5b9e\u73b0\uff1a template < class ... Ts > struct overloaded : Ts ... { using Ts :: operator ()...; }; template < class ... Ts > overloaded ( Ts ...) -> overloaded < Ts ... > ; \u5982\u4f60\u6240\u89c1\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528\u53ef\u53d8\u53c2\u6570\u6a21\u677f\uff0c\u56e0\u4e3a\u5b83\u5141\u8bb8\u6211\u4eec\u4f7f\u7528\u4efb\u610f\u6570\u91cf\u7684\u57fa\u7c7b\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u4f8b\u5b50\uff1a \u4ee3\u7801 4-11 \u91cd\u8f7d\u6a21\u5f0f #include <iostream> template < class ... Ts > struct overloaded : Ts ... { using Ts :: operator ()...; }; template < class ... Ts > overloaded ( Ts ...) -> overloaded < Ts ... > ; int main () { const auto test = overloaded {[]( const int & i ) { std :: cout << \"int: \" << i << '\\n' ; }, []( const float & f ) { std :: cout << \"float: \" << f << '\\n' ; }, []( const std :: string & s ) { std :: cout << \"string: \" << s << '\\n' ; }}; test ( \"10.0f\" ); } \u5728\u4e0a\u8ff0\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u7531\u4e09\u4e2a Lambda \u7ec4\u6210\u7684 Lamdba \u8868\u8fbe\u5f0f\u3002 \u4e4b\u540e\u6211\u4eec\u53ef\u4ee5\u5e26\u4e0a\u53c2\u6570\u8c03\u7528\u8be5 Lamdba \u8868\u8fbe\u5f0f\uff0c\u5c06\u4f1a\u901a\u8fc7\u4f20\u5165\u7684\u53c2\u6570\u7c7b\u578b\u8c03\u7528\u6240\u9700\u7684\u51fd\u6570\u3002 \u73b0\u5728\u8ba9\u6211\u4eec\u4ed4\u7ec6\u770b\u770b\u8fd9\u4e2a\u6a21\u5f0f\u6838\u5fc3\u7684\u4e24\u884c\u4ee3\u7801\u3002 \u8fd9\u4e24\u884c\u4ee3\u7801\u53d7\u76ca\u4e8e\u81ea C++17 \u4ee5\u6765\u53ef\u7528\u7684\u4e09\u4e2a\u7279\u6027\uff1a using \u58f0\u660e\u7684\u5305\u6269\u5c55 - \u7528\u66f4\u7b80\u5355\u4e14\u7d27\u51d1\u7684\u4ee3\u7801\u5b9e\u73b0\u53ef\u53d8\u6a21\u677f\u3002 \u81ea\u5b9a\u4e49\u6a21\u677f\u53c2\u6570\u63a8\u5bfc\u89c4\u5219 - \u5141\u8bb8\u5c06 Lamdba \u5217\u8868\u8f6c\u6362\u4e3a\u91cd\u8f7d\u7c7b\u7684\u57fa\u7c7b\u5217\u8868\u3002\uff08\u5728 C++20 \u4e2d\u4e0d\u9700\u8981\u8fd9\u4e48\u505a\uff09\u3002 \u805a\u5408\u521d\u59cb\u5316\u7684\u6269\u5c55 - \u5728 C++17 \u4e4b\u524d\uff0c\u4e0d\u80fd\u5408\u5e76\u4ece\u5176\u5b83\u7c7b\u578b\u6d3e\u751f\u7684\u521d\u59cb\u5316\u7c7b\u578b\u3002 \u5728 C++11 \u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u4f7f\u7528\u4e86 using declaration\u3002 \u8fd9\u4e2a\u7279\u6027\u5bf9\u4e8e\u4f7f\u7528\u540c\u4e00\u4e2a\u4f5c\u7528\u57df\u5185\u7684\u4eff\u51fd\u6570\u91cd\u8f7d\u5e26\u6765\u5f88\u5927\u5e2e\u52a9\u3002 \u5728 C++17 \u6211\u4eec\u83b7\u5f97\u4e86\u652f\u6301\u53ef\u53d8\u53c2\u6570\u6a21\u677f\u7684\u8bed\u6cd5\uff0c\u8fd9\u5728\u5148\u524d\u7684\u7248\u672c\u4e2d\u662f\u6ca1\u6709\u7684\u3002 \u73b0\u5728\u8ba9\u6211\u4eec\u8bd5\u7740\u53bb\u7406\u89e3\u5269\u4e0b\u7684\u4e24\u4e2a\u7279\u6027\uff1a","title":"7. \u4ece\u591a\u4e2a Lambda \u6d3e\u751f"},{"location":"Chapter4/#\u81ea\u5b9a\u4e49\u6a21\u677f\u53c2\u6570\u63a8\u5bfc\u89c4\u5219","text":"\u6211\u4eec\u4ece Lambda \u6d3e\u751f\uff0c\u5e76\u4e14\u5c06\u5b83\u4eec\u7684 operator() \u66b4\u9732\u51fa\u6765\uff0c\u4e0a\u4e00\u8282\u770b\u5230\u7684\u90a3\u6837\u3002 \u90a3\u4e48\u6211\u4eec\u5982\u4f55\u521b\u5efa\u8fd9\u79cd\u91cd\u8f7d\u7c7b\u578b\u7684\u53d8\u91cf\u5462\uff1f \u50cf\u4f60\u77e5\u9053\u7684\u90a3\u6837\uff0c\u6211\u4eec\u65e0\u6cd5\u9884\u5148\u77e5\u9053\u67d0\u4e00\u4e2a Lambda \u7684\u7c7b\u578b\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u4f1a\u4e3a\u6bcf\u4e00\u4e2a Lambda \u751f\u6210\u4e00\u4e2a\u552f\u4e00\u7684\u7c7b\u578b\u540d\u79f0\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u4e0d\u80fd\u5199\u4e0b\u5982\u4e0b\u7684\u4ee3\u7801\uff1a overload < LambdaType1 , LambdaType2 > myOverload { ... } // ??? // what is LambdaType1 and LambdaType2 ?? \u552f\u4e00\u7684\u65b9\u5f0f\u662f\u4f7f\u7528\u4e00\u4e9b make \u51fd\u6570\uff08\u56e0\u4e3a\u6a21\u677f\u53c2\u6570\u63a8\u5bfc\u9002\u7528\u4e8e\u51fd\u6570\u6a21\u677f\uff09\uff0c\u50cf\u4e0b\u9762\u8fd9\u6837\uff1a template < typename ... T > constexpr auto make_overloader ( T && ... t ) { return overloaded < T ... > { std :: forward < T > ( t )...}; } \u5982\u679c\u4f7f\u7528 C++17 \u4e2d\u5f15\u5165\u7684\u6a21\u677f\u53c2\u6570\u63a8\u5bfc\u89c4\u5219\uff0c\u6211\u4eec\u53ef\u4ee5\u7b80\u5316\u5e38\u89c1\u6a21\u677f\u7c7b\u578b\u7684\u521b\u5efa\uff0c\u800c\u4e0d\u9700\u8981\u50cf\u4e0a\u9762\u90a3\u6837\u9700\u8981\u4f7f\u7528\u4e00\u4e2a\u7c7b\u4f3c\u4e8e make_overloader \u7684\u51fd\u6570\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u7b80\u5355\u7684\u7c7b\u578b\uff0c\u6211\u4eec\u53ef\u4ee5\u5199\u4e0b\u5982\u4e0b\u4ee3\u7801\uff1a std :: pair strDouble { std :: string { \"Hello\" }, 10.0 }; // strDouble is std::pair<std::string, double> \u6709\u4e00\u4e2a option \u80fd\u591f\u81ea\u5b9a\u4e49\u63a8\u5bfc\u89c4\u5219\uff0c\u5e76\u4e14\u5728\u6807\u51c6\u5e93\u4e2d\u5927\u91cf\u7684\u4f7f\u7528\u4e86\u5b83\u4eec\uff0c\u6bd4\u5982 std::array \uff1a template < class T , class ... U > array ( T , U ...) -> array < T , 1 + sizeof ...( U ) > ; \u4e0a\u8ff0\u7684\u5199\u6cd5\u5141\u8bb8\u6211\u4eec\u5199\u4e0b\u5982\u4e0b\u7684\u4ee3\u7801\uff1a array test { 1 , 2 , 3 , 4 , 5 }; // test is std::array<int, 5> \u5bf9\u4e8e\u91cd\u8f7d\u6a21\u5f0f\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u7684\u81ea\u5b9a\u4e49\u63a8\u5bfc\u89c4\u5219\uff1a template < class ... Ts > overloaded ( Ts ...) -> overloaded < Ts ... > ; \u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e24\u4e2a Lamdba \u521d\u59cb\u5316\u4e00\u4e2a Lamdba \u8868\u8fbe\u5f0f\uff1a overloaded myOverload { []( int ) { }, []( double ) { } }; \u4e0a\u8ff0\u7684 Lamdba \u8868\u8fbe\u5f0f\u4e2d\u7684\u6a21\u677f\u53c2\u6570\u5c06\u88ab\u6b63\u786e\u63a8\u5bfc\uff0c\u56e0\u4e3a\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u7f16\u8bd1\u5668\u77e5\u9053\u8fd9\u4e24\u4e2a Lamdba \u8868\u8fbe\u5f0f\u53c2\u6570\u7684\u7c7b\u578b\uff0c\u6240\u4ee5\u53ef\u4ee5\u89e3\u6790\u51fa\u7ee7\u627f\u81ea\u8fd9\u4e24\u4e2a\u53c2\u6570\u7684 Lamdba \u8868\u8fbe\u5f0f\u7684\u7c7b\u578b\u3002 \u4f60\u53ef\u4ee5\u5728 C++20 \u7ae0\u8282 \u4e2d\u770b\u5230\u65b0\u7684\u6807\u51c6\uff0c\u7c7b\u6a21\u677f\u53c2\u6570\u63a8\u5bfc\u5c06\u88ab\u63d0\u5347\uff0c\u5bf9\u4e8e\u91cd\u8f7d\u6a21\u5f0f\uff0c\u5c06\u4e0d\u518d\u9700\u8981\u5199\u81ea\u5b9a\u4e49\u7684\u63a8\u5bfc\u89c4\u5219\u3002 \u73b0\u5728\u8ba9\u6211\u4eec\u8fdb\u5165\u6700\u540e\u4e00\u4e2a\u5c0f\u8282 - \u805a\u5408\u521d\u59cb\u5316","title":"\u81ea\u5b9a\u4e49\u6a21\u677f\u53c2\u6570\u63a8\u5bfc\u89c4\u5219"},{"location":"Chapter4/#\u805a\u5408\u521d\u59cb\u5316\u7684\u6269\u5c55","text":"\u8fd9\u4e2a\u529f\u80fd\u76f8\u5bf9\u7b80\u5355\uff1a\u6211\u4eec\u53ef\u4ee5\u805a\u5408\u521d\u59cb\u5316\u4e00\u4e2a\u4ece\u5176\u5b83\u7c7b\u578b\u6d3e\u751f\u7684\u7c7b\u578b\u3002 \u6765\u81ea\u8fd9\u4e2a\u6807\u51c6 [dcl.init.aggr] \uff1a An aggregate is an array or a class with: no user-provided, explicit, or inherited constructors no private or protected non-static data members no virtual functions, and no virtual, private, or protected base classes \u5982\u4e0b\u8fd9\u4e2a\u4f8b\u5b50\uff08\u4f8b\u5b50\u6765\u81ea\u4e8e\u6807\u51c6\u8349\u6848\uff09\uff1a struct base1 { int b1 , b2 = 32 ; }; struct base2 { base2 () { b3 = 64 ; } int b3 ; }; struct derived : base1 , base2 { int d ; }; derived d1 {{ 1 , 2 }, {}, 4 }; derived d2 {{}, {}, 4 }; \u8be5\u4ee3\u7801\u4e2d\uff1a \u5bf9\u4e8e d1\uff1a d1.b1 \u521d\u59cb\u5316\u4e3a 1 d1.b2 \u521d\u59cb\u5316\u4e3a 2 d1.b3 \u521d\u59cb\u5316\u4e3a 64 d1.d \u521d\u59cb\u5316\u4e3a 4 \u5bf9\u4e8e d2\uff1a d2.b1 \u521d\u59cb\u5316\u4e3a 0 d2.b2 \u521d\u59cb\u5316\u4e3a 32 d2.b3 \u521d\u59cb\u5316\u4e3a 64 d2.d \u521d\u59cb\u5316\u4e3a 4 \u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u805a\u5408\u521d\u59cb\u5316\u6709\u66f4\u663e\u8457\u7684\u5f71\u54cd\u3002\u56e0\u4e3a\u5bf9\u4e8e\u91cd\u8f7d\u7c7b\uff0c\u6ca1\u6709\u805a\u5408\u521d\u59cb\u5316\uff0c\u6211\u4eec\u5fc5\u987b\u5b9e\u73b0\u5982\u4e0b\u7684\u6784\u9020\u51fd\u6570\uff1a struct overloaded : Fs ... { template < class ... Ts > overloaded ( Ts && ... ts ) : Fs { std :: forward < Ts > ( ts )}... {} // ... } \u8fd9\u5c06\u4f1a\u9700\u8981\u5199\u5f88\u591a\u4ee3\u7801\uff0c\u800c\u4e14\u53ef\u80fd\u6ca1\u6709\u6db5\u76d6\u6240\u6709\u7684\u60c5\u51b5\uff0c\u6bd4\u5982 noexcept\u3002 \u901a\u8fc7\u805a\u5408\u521d\u59cb\u5316\uff0c\u6211\u4eec\u300c\u76f4\u63a5\u300d\u4ece\u57fa\u7c7b\u5217\u8868\u4e2d\u8c03\u7528 Lambda \u7684\u6784\u9020\u51fd\u6570\uff0c\u56e0\u6b64\u65e0\u9700\u7f16\u5199\u5411\u5176\u663e\u793a\u8f6c\u53d1\u53c2\u6570\u7684\u4ee3\u7801\u3002 \u81f3\u6b64\u4e3a\u6b62\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86\u5f88\u591a\uff0c\u90a3\u4e48\u6709\u6ca1\u6709\u4ec0\u4e48\u6709\u7528\u7684\u91cd\u8f7d\u6a21\u5f0f\u7684\u4f8b\u5b50\uff1f \u73b0\u5728\u770b\u6765\u4f3c\u4e4e std::variant \u66f4\u4e3a\u65b9\u4fbf\u3002","title":"\u805a\u5408\u521d\u59cb\u5316\u7684\u6269\u5c55"},{"location":"Chapter4/#stdvariant-\u548c-stdvisit-\u7684\u4f8b\u5b50","text":"\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7ee7\u627f\u548c\u91cd\u8f7d\u6a21\u5f0f\u6765\u505a\u4e00\u4e9b\u66f4\u5b9e\u7528\u7684\u4e8b\u60c5\u3002 \u5148\u770b\u4e00\u4e2a std::variant \u548c std::visit \u7684\u4f8b\u5b50 \u4ee3\u7801 4-12 \u4f7f\u7528 variant \u548c visit \u5b9e\u73b0\u91cd\u8f7d\u6a21\u5f0f #include <iostream> #include <variant> template < class ... Ts > struct overloaded : Ts ... { using Ts :: operator ()...; }; template < class ... Ts > overloaded ( Ts ...) -> overloaded < Ts ... > ; int main () { const auto PrintVisitor = []( const auto & t ) { std :: cout << t << \" \\n \" ; }; std :: variant < int , float , std :: string > intFloatString { \"Hello\" }; std :: visit ( PrintVisitor , intFloatString ); std :: visit ( overloaded {[]( int & i ) { i *= 2 ; }, []( float & f ) { f *= 2.0f ; }, []( std :: string & s ) { s = s + s ; }}, intFloatString ); std :: visit ( PrintVisitor , intFloatString ); } \u5728\u4e0a\u8ff0\u7684\u4ee3\u7801\u4e2d\uff1a \u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u652f\u6301 \u6574\u578b\u3001\u6d6e\u70b9\u578b\u548c\u5b57\u7b26\u4e32\u7684 variant \u53d8\u91cf\u3002 \u7136\u540e\u901a\u8fc7\u4e09\u4e2a\u91cd\u8f7d\u51fd\u6570\u8c03\u6574\u4e86 intFloatString \u7684\u503c\u3002 \u6700\u540e\u518d\u901a\u8fc7 PrintVisitor \u5c06\u5176\u8f93\u51fa\u51fa\u6765\u3002 \u7531\u4e8e\u8303\u578b Lamdba \u7684\u652f\u6301\uff0cPrintVisitor \u51fd\u6570\u53ea\u9700\u8981\u5199\u4e00\u4e2a\uff0c\u5b83\u652f\u6301\u6240\u6709\u5b9e\u73b0\u4e86 << \u64cd\u4f5c\u7b26\u7684\u5bf9\u8c61\u3002 \u5176\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a std::visit \u7684\u8c03\u7528\uff0c\u5b83\u521b\u5efa\u4e86\u4e00\u4e2a visitor \uff0c\u91cd\u8f7d\u4e86\u4e09\u79cd\u7c7b\u578b\uff0c\u4e09\u4e2a\u51fd\u6570\u90fd\u662f\u5c06\u5f53\u524d\u503c\u8d4b\u503c\u4e00\u4efd\uff0c\u53ea\u662f\u7c7b\u578b\u4e0d\u540c\u3002","title":"std::variant \u548c std::visit \u7684\u4f8b\u5b50"},{"location":"Chapter4/#8-\u4f7f\u7528-lambda-\u8fdb\u884c\u5e76\u53d1\u7f16\u7a0b","text":"\u5982\u679c\u5728\u540c\u4e00\u4e2a\u7ebf\u7a0b\u4e2d\u8c03\u7528 Lamdba \u662f\u6bd4\u8f83\u5bb9\u6613\u7684\u60c5\u5f62\u3002 \u4f46\u662f\u5982\u679c\u4f60\u60f3\u5728\u4e00\u4e2a\u5355\u72ec\u7684\u7ebf\u7a0b\u4e2d\u8c03\u7528 Lamdba \u7684\u8bdd\uff0c\u5e94\u8be5\u600e\u4e48\u505a\uff1f \u53ef\u80fd\u4f1a\u9047\u5230\u4ec0\u4e48\u95ee\u9898\uff1f \u8ba9\u6211\u4eec\u5728\u672c\u8282\u4e2d\u5c55\u5f00\u8bf4\u8bf4\u3002 \u672c\u8282\u4e0d\u662f\u5173\u4e8e\u5982\u4f55\u7528 C++ \u7f16\u5199\u5e76\u53d1\u4ee3\u7801\u7684\u6559\u7a0b\uff0c\u65e8\u5728\u5c55\u793a\u60a8\u5728\u5f02\u6b65\u4ee3\u7801\u4e2d\u4f7f\u7528 lambda \u53ef\u80fd\u4f1a\u9047\u5230\u7684\u95ee\u9898\u3002 \u6709\u5173 C++ \u4e2d\u7684\u5e76\u53d1\u95ee\u9898\uff0c\u60a8\u53ef\u4ee5\u53c2\u8003\u5355\u72ec\u7684\u4e66\u7c4d\uff0c\u4f8b\u5982 Rainer Grimm \u7684\u300a Concurrency with Modern C++ \u300b\u6216\u8005 Anthony Williams \u7684\u300a C++ Concurrency in Action \u300b\u3002","title":"8. \u4f7f\u7528 Lambda \u8fdb\u884c\u5e76\u53d1\u7f16\u7a0b"},{"location":"Chapter4/#lambda-\u548c-stdthread","text":"\u8ba9\u6211\u4eec\u5148\u770b\u4e00\u4e0b\u81ea\u4ece C++11 \u5c31\u5f00\u59cb\u652f\u6301\u7684 std::thread \u3002 \u60a8\u53ef\u80fd\u5df2\u7ecf\u77e5\u9053 std::thread \u5728\u5176\u6784\u9020\u51fd\u6570\u4e2d\u63a5\u53d7\u4e00\u4e2a\u53ef\u8c03\u7528\u5bf9\u8c61\u3002 \u53ef\u8c03\u7528\u5bf9\u8c61\u53ef\u80fd\u662f\u4e00\u4e2a\u666e\u901a\u7684\u51fd\u6570\u6307\u9488\u3001\u4eff\u51fd\u6570\u6216\u8005 Lamdba \u8868\u8fbe\u5f0f\u3002 \u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a \u4ee3\u7801 4-13 \u5c06 Lamdba \u4f20\u9012\u7ed9 thread #include <iostream> #include <numeric> // for std::iota #include <thread> #include <vector> int main () { const auto printThreadID = []( const char * str ) { std :: cout << str << \": \" << std :: this_thread :: get_id () << \" thread id \\n \" ; }; std :: vector < int > numbers ( 100 ); std :: thread iotaThread ( [ & numbers , & printThreadID ]( int startArg ) { std :: iota ( numbers . begin (), numbers . end (), startArg ); printThreadID ( \"iota in\" ); }, 10 ); iotaThread . join (); printThreadID ( \"printing numbers in\" ); for ( const auto & num : numbers ) std :: cout << num << \", \" ; } \u5728\u4e0a\u8ff0\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 Lamdba \u8868\u8fbe\u5f0f\u521b\u5efa\u4e86\u4e00\u4e2a\u7ebf\u7a0b\u3002 std::thread \u7c7b\u62e5\u6709\u975e\u5e38\u7075\u6d3b\u7684\u6784\u9020\u51fd\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u751a\u81f3\u80fd\u591f\u5728 Lamdba \u4e2d\u4f20\u5165\u4e00\u4e2a\u53c2\u6570\uff0c\u5728\u4e0a\u8ff0\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u5c06 10 \u4f5c\u4e3a startArg \u4f20\u7ed9\u4e86 Lamdba\u3002 \u4e0a\u8ff0\u4ee3\u7801\u5f88\u7b80\u5355\uff0c\u56e0\u4e3a\u6211\u4eec\u901a\u8fc7 join \u63a7\u5236\u4e86\u7ebf\u7a0b\u7684\u6267\u884c\uff0c\u4fdd\u8bc1\u6211\u4eec\u5728\u8f93\u51fa numbers \u4e4b\u524d\uff0c numbers \u91cc\u7684\u6570\u636e\u4e00\u5b9a\u4f1a\u51c6\u5907\u597d\u3002 \u5173\u952e\u7684\u662f\uff0c\u867d\u7136 Lamdba \u4f7f\u5f97\u521b\u5efa\u7ebf\u7a0b\u53d8\u5f97\u66f4\u52a0\u5bb9\u6613\u548c\u65b9\u4fbf\uff0c\u4f46\u662f\u5b83\u4ecd\u7136\u662f\u5f02\u6b65\u6267\u884c\u7684\u3002 \u95ed\u5305\u5e76\u4e0d\u4f1a\u6539\u53d8\u5176\u5f02\u6b65\u6267\u884c\u7684\u7279\u6027\uff0c\u95ed\u5305\u540c\u6837\u4f1a\u53d7\u5230\u6240\u6709\u7ade\u4e89\u6761\u4ef6\u548c\u963b\u585e\u7684\u5f71\u54cd\u3002 \u6211\u4eec\u53ef\u4ee5\u770b\u4e00\u4e0b\u4e0b\u9762\u7684\u4f8b\u5b50\uff1a \u4ee3\u7801 4-14 \u901a\u8fc7\u5f88\u591a\u7ebf\u7a0b\u66f4\u6539\u5171\u4eab\u53d8\u91cf #include <iostream> #include <thread> #include <vector> int main () { int counter = 0 ; const auto maxThreads = std :: thread :: hardware_concurrency (); std :: vector < std :: thread > threads ; threads . reserve ( maxThreads ); for ( size_t tCounter = 0 ; tCounter < maxThreads ; ++ tCounter ) { threads . push_back ( std :: thread ([ & counter ]() noexcept { for ( int i = 0 ; i < 1000 ; ++ i ) { ++ counter ; -- counter ; ++ counter ; -- counter ; } })); } for ( auto & thread : threads ) { thread . join (); } std :: cout << counter << std :: endl ; } std::thread::hardware_concurrency() \u662f\u4e00\u4e2a\u9759\u6001\u6210\u5458\u51fd\u6570\u3002\u5b83\u4f1a\u8fd4\u56de\u652f\u6301\u7684\u7ebf\u7a0b\u6570\u91cf\u3002 \u901a\u5e38\u5b83\u662f\u7ed9\u5b9a\u673a\u5668\u4e0a\u7684\u786c\u4ef6\u7ebf\u7a0b\u6570\uff0c\u636e Coliru \u8bf4\uff0c\u5728 Wandbox \u4e0a\u901a\u5e38\u662f 3 \u3002 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u82e5\u5e72\u4e2a\u7ebf\u7a0b\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u5bf9 counter \u6709\u4e00\u4e9b\u8fd0\u7b97\u3002 counter \u53d8\u91cf\u88ab\u6240\u6709\u7ebf\u7a0b\u5171\u4eab\u3002 \u5728 C++20 \u4e2d\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 std::jthread \uff0c\u5b83\u80fd\u591f\u5728\u6790\u6784\u7684\u65f6\u5019\u8fdb\u884c join \u5e76\u4e14\u80fd\u591f\u63a5\u6536\u505c\u6b62\u6807\u8bb0\u7684\u7ebf\u7a0b\u3002 \u8fd9\u79cd\u65b0\u7684\u7ebf\u7a0b\u5bf9\u8c61\u80fd\u591f\u5141\u8bb8\u7528\u6237\u5bf9\u7ebf\u7a0b\u6267\u884c\u8fdb\u884c\u66f4\u591a\u7684\u63a7\u5236\u3002 \u867d\u7136\u60a8\u53ef\u80fd\u5e0c\u671b\u7684\u6700\u7ec8\u7ed3\u679c\u662f 0 \uff0c\u4f46\u662f\u7ed3\u679c\u662f\u672a\u5b9a\u4e49\u7684\u3002 \u5f53\u4e00\u4e2a\u7ebf\u7a0b\u6b63\u5728\u8bfb\u8be5\u53d8\u91cf\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u6b63\u5728\u6709\u53e6\u5916\u4e00\u4e2a\u53d8\u91cf\u5728\u5e76\u53d1\u5199\uff0c\u5bfc\u81f4\u6700\u7ec8\u7684\u7ed3\u679c\u662f\u672a\u5b9a\u4e49\u7684\u3002 \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4e0e\u5e38\u89c4\u7ebf\u7a0b\u573a\u666f\u4e00\u6837\uff0c\u6211\u4eec\u5e94\u8be5\u4f7f\u7528\u67d0\u79cd\u540c\u6b65\u673a\u5236\u3002 \u6bd4\u5982\u4e0a\u9762\u90a3\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u8f83\u4e3a\u6613\u7528\u7684\u539f\u5b50\u53d8\u91cf\u3002 \u4ee3\u7801 4-15 \u4f7f\u7528\u539f\u5b50\u53d8\u91cf #include <atomic> #include <iostream> #include <thread> #include <vector> int main () { std :: atomic < int > counter = 0 ; const auto maxThreads = std :: thread :: hardware_concurrency (); std :: vector < std :: thread > threads ; threads . reserve ( maxThreads ); for ( size_t tCounter = 0 ; tCounter < maxThreads ; ++ tCounter ) { threads . push_back ( std :: thread ([ & counter ]() noexcept { for ( int i = 0 ; i < 1000 ; ++ i ) { counter . fetch_add ( 1 ); counter . fetch_sub ( 1 ); counter . fetch_add ( 1 ); counter . fetch_sub ( 1 ); } })); } for ( auto & thread : threads ) { thread . join (); } std :: cout << counter . load () << std :: endl ; } \u4e0a\u9762\u7684\u4ee3\u7801\u4f1a\u6309\u6211\u4eec\u7684\u9884\u671f\u8fdb\u884c\u6267\u884c\uff0c\u56e0\u4e3a\u589e\u52a0\u548c\u51cf\u5c11\u64cd\u4f5c\u73b0\u5728\u662f\u539f\u5b50\u7684\u3002 \u8fd9\u610f\u5473\u7740\u5f53 counter \u6539\u53d8\u7684\u65f6\u5019\uff0c\u5176\u5b83\u7ebf\u7a0b\u4e0d\u80fd\u4e2d\u65ad\u8fd9\u4e2a\u64cd\u4f5c\u3002 \u300c\u540c\u6b65\u300d\u4f7f\u5f97\u4ee3\u7801\u66f4\u52a0\u5b89\u5168\uff0c\u4f46\u662f\u9700\u8981\u4ee5\u6027\u80fd\u4f5c\u4e3a\u727a\u7272\u3002 \u7136\u540e\u8fd9\u4e5f\u662f\u4e00\u4e2a\u9700\u8981\u503c\u5f97\u51fa\u4e00\u672c\u4e66\u6765\u957f\u4e45\u8ba8\u8bba\u7684\u4e3b\u9898\u3002 \u89e3\u51b3\u540c\u6b65\u95ee\u9898\u7684\u53e6\u5916\u4e00\u4e2a\u9009\u62e9\u662f\u5728\u8ba1\u7b97\u7684\u6bcf\u4e2a\u7ebf\u7a0b\u4e2d\u90fd\u6709\u4e00\u4e2a\u5c40\u90e8\u53d8\u91cf\u3002 \u7136\u540e\u5728\u7ebf\u7a0b\u7ed3\u675f\u4e4b\u524d\uff0c\u6211\u4eec\u53ef\u4ee5\u53bb\u9501\u5b9a\u5e76\u4e14\u66f4\u65b0\u5168\u5c40\u53d8\u91cf\u3002 \u503c\u5f97\u8865\u5145\u7684\u4e00\u70b9\u662f\uff0c\u5c06\u53d8\u91cf\u5b9a\u4e49\u4e3a volatile \u5e76\u4e0d\u80fd\u63d0\u4f9b\u6b63\u786e\u7684\u540c\u6b65\u673a\u5236\uff0c\u5e76\u4e14\u5728 C++20 \u4e2d volatile \u5728\u8bb8\u591a\u5730\u65b9\u88ab\u5f03\u7528\u3002 \u6b63\u5982\u6211\u4eec\u6240\u89c1\uff0c\u4f7f\u7528 Lambda \u8868\u8fbe\u5f0f\u521b\u5efa\u7ebf\u7a0b\u975e\u5e38\u65b9\u4fbf\u3002 \u5b83\u53ef\u4ee5\u4e0e\u7ebf\u7a0b\u58f0\u660e\u5728\u4e00\u8d77\uff0c\u5e76\u4e14\u53ef\u4ee5\u505a\u4efb\u4f55\u4f60\u5728\u5e38\u89c4\u51fd\u6570\u548c\u4eff\u51fd\u6570\u4e2d\u80fd\u591f\u505a\u7684\u4e8b\u60c5\u3002 \u73b0\u5728\u8ba9\u6211\u4eec\u6765\u5c1d\u8bd5\u4e00\u4e0b\u5728 C++ \u4e2d\u65b0\u5f15\u5165\u7684\u53e6\u5916\u4e00\u4e2a\u79d1\u6280\u3002","title":"Lambda \u548c std::thread"},{"location":"Chapter4/#lambda-\u548c-stdasync","text":"\u60a8\u53ef\u4ee5\u4f7f\u7528\u591a\u7ebf\u7a0b\u7684\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u662f\u901a\u8fc7 std::async \u3002 \u6211\u4eec\u5728 C++11 \u4e2d\u901a\u5e38\u5c06\u8fd9\u4e2a\u529f\u80fd\u4e0e\u7ebf\u7a0b\u4e00\u8d77\u4f7f\u7528\u3002 \u8fd9\u662f\u4e00\u4e2a\u9ad8\u7ea7 API\uff0c\u5141\u8bb8\u60a8\u5ef6\u8fdf\u6216\u5b8c\u5168\u5f02\u6b65\u5730\u8c03\u7528\u548c\u8ba1\u7b97\u3002 \u73b0\u5728\u8ba9\u6211\u4eec\u5c06 iota \u7684\u4f8b\u5b50\u4f7f\u7528 std::async \u6765\u5b9e\u73b0\uff1a \u4ee3\u7801 4-16 \u4f7f\u7528 std::async \u5f02\u6b65\u8c03\u7528\u4ee3\u7801 #include <future> // for async and future #include <iostream> #include <numeric> // for std::iota #include <thread> #include <vector> int main () { const auto printThreadID = []( const char * str ) { std :: cout << str << \": \" << std :: this_thread :: get_id () << \" thread id \\n \" ; }; std :: vector < int > numbers ( 100 ); std :: future < void > iotaFuture = std :: async ( std :: launch :: async , [ & numbers , startArg = 10 , & printThreadID ]() { std :: iota ( numbers . begin (), numbers . end (), startArg ); printThreadID ( \"iota in\" ); }); iotaFuture . get (); // make sure we get the results... printThreadID ( \"printing numbers in\" ); for ( const auto & num : numbers ) std :: cout << num << \", \" ; } \u8fd9\u4e00\u6b21\uff0c\u6211\u4eec\u6ca1\u6709\u4f7f\u7528\u7ebf\u7a0b\uff0c\u800c\u662f\u4f9d\u8d56\u4e86 std::future \u673a\u5236\u6765\u5b9e\u73b0\u3002 \u8fd9\u662f\u4e00\u4e2a\u5904\u7406\u540c\u6b65\u5e76\u4fdd\u8bc1\u8c03\u7528\u7ed3\u679c\u5728\u6211\u4eec\u901a\u8fc7 .get() \u8bf7\u6c42\u65f6\u53ef\u7528\u7684\u5bf9\u8c61\u3002 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7 std::async \u8c03\u5ea6 Lambda \u7684\u6267\u884c\uff0c\u7136\u540e\u901a\u8fc7\u8c03\u7528 .get() \u6765\u7b49\u5f85\u8fd9\u4e9b\u88ab\u8c03\u5ea6\u7684\u4efb\u52a1\u6267\u884c\u5b8c\u6bd5\u3002 \u7136\u540e\uff0c\u4e0a\u9762\u7684\u4ee3\u7801\u5b9e\u73b0\u4e0d\u591f\u4f18\u96c5\u3002 \u56e0\u4e3a\u6211\u4eec\u4f7f\u7528\u4e86 future<void> \u5e76\u4e14\u4f7f\u7528\u5f15\u7528\u6355\u83b7\u4e86 numbers \u3002 \u66f4\u597d\u7684\u89e3\u8026\u65b9\u5f0f\u5e94\u8be5\u662f\u4f7f\u7528 std::future<std::vector<int>> \uff0c\u7136\u540e\u901a\u8fc7 future \u7684 .get() \u673a\u5236\u6765\u4f20\u9012\u7ed3\u679c\u3002 \u50cf\u662f\u4e0b\u8ff0\u4ee3\u7801\u5199\u7684\u4e00\u6837\uff1a std :: future < std :: vector < int >> iotaFuture = std :: async ( std :: launch :: async , [ starArg = 10 ]() { std :: vector < int > numbers ( 100 ); std :: iota ( numbers . begin (), numbers . end (), startArg ); std :: cout << \"calling from: \" << std :: this_thread :: get_id () << \" thread id \\n \" ; return numbers ; }); auto vec = iotaFuture . get (); // make sure we get the results...// ... \u957f\u4e45\u4ee5\u6765\uff0c std::async/std::future \u4f3c\u4e4e\u83b7\u5f97\u4e86\u8912\u8d2c\u4e0d\u4e00\u7684\u8bc4\u4ef7\u3002 \u770b\u8d77\u6765\u53ef\u80fd\u662f\u5b9e\u73b0\u7684\u592a\u7c97\u9c81\u4e86\u3002 \u5b83\u9002\u7528\u4e8e\u76f8\u5bf9\u7b80\u5355\u7684\u60c5\u51b5\uff0c\u5728\u4e00\u4e9b\u590d\u6742\u7684\u60c5\u51b5\u4e0b\u53ef\u80fd\u6ca1\u90a3\u4e48\u6709\u6548\uff0c\u4f8b\u5982\uff1a continuation task merging no cancellation/joining it\u2019s not a regular type and a few other issues \u5982\u679c\u4f60\u60f3\u4e86\u89e3\u66f4\u591a\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u9605\u8bfb\u4ee5\u4e0b\u8d44\u6599\uff1a There is a Better Future - Felix Petriconi - code::dive 2018 code::dive 2016 conference\u2013Sean Parent\u2013Better Code: Concurrency Core C++ 2019 :: Avi Kivity :: Building efficient I/O intensive applications with Seastar","title":"Lambda \u548c std::async"},{"location":"Chapter4/#lambda-\u548c-c17-\u7684\u5e76\u884c\u7b97\u6cd5","text":"\u5728\u8ba8\u8bba\u4e86 C++11 \u7684\u7ebf\u7a0b\u652f\u6301\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u8f6c\u5411\u66f4\u65b0\u7684\u6807\u51c6\uff1aC++17\u3002 \u8fd9\u6b21\u6709\u4e00\u4e2a\u8d85\u7ea7\u597d\u7528\u7684\u6280\u5de7\uff0c\u5141\u8bb8\u60a8\u5e76\u884c\u5316\u6807\u51c6\u5e93\u4e2d\u7684\u5927\u591a\u6570\u7b97\u6cd5\u3002 \u60a8\u6240\u8981\u505a\u7684\u5c31\u662f\u5728\u7b97\u6cd5\u4e2d\u6307\u5b9a\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u4f8b\u5982\uff1a auto myVec = GenerateVector (); std :: sort ( std :: execution :: par , myVec . begin (), myVec . end ()); \u503c\u5f97\u6ce8\u610f\u7684\u662f\u6211\u4eec\u6307\u5b9a\u4e86\u7b2c\u4e00\u4e2a\u53c2\u6570 std::execution::par \u3002 \u5b83\u5c06\u4e3a\u6392\u5e8f\u7b97\u6cd5\u5f00\u542f\u5e76\u53d1\u6267\u884c\u7684\u7279\u6027\u3002 \u6211\u4eec\u8fd8\u6709\u5176\u5b83\u7684\u7279\u6027\uff1a \u7279\u6027\u540d \u63cf\u8ff0 sequenced_policy \u8fd9\u662f\u4e00\u79cd\u6267\u884c\u7b56\u7565\u7c7b\u578b\uff0c\u7528\u4f5c\u6d88\u9664\u5e76\u884c\u7b97\u6cd5\u91cd\u8f7d\u7684\u6b67\u4e49\u5e76\u6307\u793a\u5e76\u884c\u7b97\u6cd5\u7684\u6267\u884c\u4e0d\u80fd\u5e76\u884c\u5316\u3002 parallel_policy \u8fd9\u662f\u4e00\u79cd\u6267\u884c\u7b56\u7565\u7c7b\u578b\uff0c\u7528\u4f5c\u6d88\u9664\u5e76\u884c\u7b97\u6cd5\u91cd\u8f7d\u7684\u6b67\u4e49\u5e76\u6307\u793a\u5e76\u884c\u7b97\u6cd5\u7684\u6267\u884c\u53ef\u4ee5\u5e76\u884c\u5316\u3002 parallel_unsequenced_policy \u8fd9\u662f\u4e00\u79cd\u6267\u884c\u7b56\u7565\u7c7b\u578b\uff0c\u7528\u4f5c\u6d88\u9664\u5e76\u884c\u7b97\u6cd5\u91cd\u8f7d\u7684\u6b67\u4e49\u5e76\u6307\u793a\u5e76\u884c\u7b97\u6cd5\u7684\u6267\u884c\u53ef\u4ee5\u5e76\u884c\u5316\u548c\u5411\u91cf\u5316\u3002 \u5bf9\u4e8e\u6bcf\u4e00\u79cd\u7279\u6027\u6765\u8bf4\uff0c\u6211\u4eec\u9884\u5148\u5b9a\u4e49\u4e86\u5168\u5c40\u5bf9\u8c61\uff0c\u4f60\u53ef\u4ee5\u5c06\u5b83\u4f20\u9012\u7ed9\u7279\u5b9a\u7684\u7b97\u6cd5\uff1a std::execution::par std::execution::seq std::execution::par_unseq \u6267\u884c\u7279\u6027\u7684\u58f0\u660e\u548c\u5176\u5bf9\u5e94\u7684\u5168\u5c40\u5bf9\u8c61\u4f4d\u4e8e <execution> \u5934\u6587\u4ef6\u4e2d\u3002 \u5728 C++20 \u4e2d\u8fd8\u6709\u53e6\u5916\u4e00\u79cd\u6267\u884c\u7b56\u7565\uff1a unsequenced_policy \u4ee5\u53ca\u5176\u5bf9\u5e94\u7684\u5168\u5c40\u5bf9\u8c61 std::execution::unseq \u3002 \u5b83\u7528\u4e8e\u5728\u5355\u7ebf\u7a0b\u4e0a\u542f\u7528\u5411\u91cf\u5316\u6267\u884c\u3002 \u867d\u7136\u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u7684\u542f\u7528\u5e76\u884c\u6392\u5e8f\uff0c\u4f46\u662f\u6211\u4eec\u4e5f\u5f88\u6709\u53ef\u80fd\u5199\u51fa\u5982\u4e0b\u7cdf\u7cd5\u7684\u4ee3\u7801\uff1a \u4ee3\u7801 4-17 \u5411 vector \u4e2d\u62f7\u8d1d\u7684\u5371\u9669\u884c\u4e3a #include <execution> #include <iostream> #include <numeric> #include <vector> int main () { std :: vector < int > vec ( 1000 ); std :: iota ( vec . begin (), vec . end (), 0 ); std :: vector < int > output ; std :: for_each ( std :: execution :: par , vec . begin (), vec . end (), [ & output ]( int & elem ) { if ( elem % 2 == 0 ) { output . push_back ( elem ); } }); for ( const auto & elem : output ) std :: cout << elem << \", \" ; } \u4e0a\u8ff0\u4ee3\u7801\u4e0d\u5305\u542b\u4efb\u4f55\u7684\u7b2c\u4e09\u65b9\u5e93\uff0c\u4f46\u662f\u9700\u8981\u652f\u6301\u5e76\u884c\u7b97\u6cd5\u7684\u7f16\u8bd1\u5668\u3002 \u8fd9\u5728 MSVC\uff08\u59cb\u4e8e VS 2017\uff09\u4e2d\u662f\u53ef\u80fd\u53ef\u4ee5\u8fd0\u884c\u7684\uff0c\u4f46\u662f\u4e0d\u9002\u5408\u4e8e\u4efb\u4f55\u5728\u7ebf\u7f16\u8bd1\u5668\uff0c\u4f60\u53ef\u4ee5\u5c06\u8be5\u4ee3\u7801\u62f7\u8d1d\u5230 Visual Studio \u4e0a\u8fd0\u884c\u3002 \u8bd1\u8005\u6ce8\uff1a\u73b0\u5728\u53ef\u4ee5\u5728 Wandbox \u4e0a\u8dd1\u4e86\u3002 \u4f60\u770b\u5230\u8fd9\u91cc\u7684\u95ee\u9898\u6240\u5728\u4e86\u5417\uff1f \u901a\u8fc7\u5c06 Lamdba \u4f20\u9012\u7ed9 std::for_each \uff0c\u6211\u4eec\u9700\u8981\u8bb0\u4f4f\u4ee3\u7801\u4e0d\u4f1a\u8fd0\u884c\u5728\u5355\u7ebf\u7a0b\u4e2d\u3002 \u8fd9\u91cc\u53ef\u80fd\u4f1a\u4f7f\u7528\u591a\u7ebf\u7a0b\uff0c\u4f8b\u5982\uff1a\u7ebf\u7a0b\u6c60\u7684\u89e3\u51b3\u65b9\u6848\u3002 \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u8bbf\u95ee\u5171\u4eab\u8f93\u51fa\u53d8\u91cf\u4e0d\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\u3002 \u5b83\u4e0d\u4ec5\u53ef\u80fd\u4f1a\u4ee5\u9519\u8bef\u7684\u987a\u5e8f\u63d2\u5165\u5143\u7d20\uff0c\u800c\u4e14\u5982\u679c\u591a\u4e2a\u7ebf\u7a0b\u540c\u65f6\u5c1d\u8bd5\u66f4\u6539\u53d8\u91cf\uff0c\u5b83\u751a\u81f3\u4f1a\u5d29\u6e83\u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5728\u6bcf\u6b21\u8c03\u7528 push_back \u4e4b\u524d\u4f7f\u7528\u4e92\u65a5\u9501\u5e76\u9501\u5b9a\u5b83\u6765\u89e3\u51b3\u540c\u6b65\u95ee\u9898\u3002 \u4f46\u662f\u4e0a\u8ff0\u7684\u4ee3\u7801\u4ecd\u7136\u9ad8\u6548\u5417\uff1f \u5982\u679c\u8fc7\u6ee4\u7684\u6761\u4ef6\u7b80\u5355\u4e14\u6267\u884c\u901f\u5ea6\u8f83\u5feb\uff0c\u90a3\u4e48\u4e0a\u8ff0\u4ee3\u7801\u7684\u6027\u80fd\u751a\u81f3\u4f1a\u4f4e\u4e8e\u5176\u5bf9\u5e94\u7684\u4e32\u884c\u7248\u672c\u7684\u4ee3\u7801\u3002 \u5982\u679c\u6ca1\u6709\u5b9e\u9645\u8fd0\u884c\u8fc7\uff0c\u60a8\u4e0d\u77e5\u9053 output \u4e2d\u5143\u7d20\u7684\u987a\u5e8f\u3002 \u8fd9\u4e00\u8282\u5c55\u793a\u4e86\u57fa\u672c\u7684\u5e76\u884c\u7b97\u6cd5\uff0c\u5982\u679c\u4f60\u60f3\u4e86\u89e3\u7684\u66f4\u591a\uff0c\u53ef\u4ee5\u9605\u8bfb\u4ee5\u4e0b\u6587\u7ae0\uff1a The Amazing Performance of C++17 Parallel Algorithms, is it Possible?","title":"Lambda \u548c C++17 \u7684\u5e76\u884c\u7b97\u6cd5"},{"location":"Chapter4/#lambda-\u548c\u5f02\u6b65---\u603b\u7ed3","text":"\u5f53\u4f60\u60f3\u542f\u52a8\u4e00\u4e2a\u7ebf\u7a0b\u3001\u901a\u8fc7 std::async \u6216\u8005\u8c03\u7528\u5e76\u884c\u7b97\u6cd5\u7684\u65f6\u5019\uff0c\u4f7f\u7528 Lamdba \u8868\u8fbe\u5f0f\u4f1a\u975e\u5e38\u65b9\u4fbf\u3002 \u4f46\u662f\u5fc5\u987b\u8981\u8bb0\u4f4f\u7684\u4e00\u70b9\u662f\uff0c\u95ed\u5305\u5bf9\u8c61\u5728\u5e76\u53d1\u6027\u65b9\u9762\u5e76\u6ca1\u6709\u7279\u6b8a\u6027\uff0c\u6240\u6709\u7684\u6311\u6218\u548c\u56f0\u96be\u4e5f\u90fd\u662f\u57fa\u4e8e\u6b64\u3002","title":"Lambda \u548c\u5f02\u6b65 - \u603b\u7ed3"},{"location":"Chapter4/#9-\u603b\u7ed3","text":"\u5728\u672c\u7ae0\u8282\u4e2d\uff0c\u60a8\u5df2\u7ecf\u770b\u5230\u4e86 C++17 \u52a0\u5165\u4e86 C++ \u4e2d\u7684\u4e24\u4e2a\u57fa\u672c\u5143\u7d20\uff0c constexpr \u548c Lamdba\u3002 \u73b0\u5728\u4f60\u53ef\u4ee5\u914d\u5408 constexpr \u4f7f\u7528 Lamdba \u8868\u8fbe\u5f0f\u4e86\u3002 \u8fd9\u662f\u6539\u8fdb\u8bed\u8a00\u4e2d\u5143\u7f16\u7a0b\u652f\u6301\u7684\u5fc5\u8981\u6b65\u9aa4\u3002 \u6211\u4eec\u5c06\u5728 C++20 \u7684\u7ae0\u8282\u4e2d\u770b\u5230\u66f4\u591a\u5173\u4e8e\u6b64\u7684\u5185\u5bb9\u3002 \u66f4\u91cd\u8981\u7684\u662f\uff0cC++17 \u6807\u51c6\u4e5f\u89e3\u51b3\u4e86\u6355\u83b7\u7684\u95ee\u9898\uff0c\u4ece C++17 \u5f00\u59cb\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7 [*this] \u5bf9 this \u8fdb\u884c\u503c\u6355\u83b7\uff0c\u4ece\u800c\u4f7f\u4ee3\u7801\u66f4\u52a0\u5b89\u5168\u3002 \u6211\u4eec\u8fd8\u67e5\u770b\u4e86 Lamdba \u76f8\u5173\u7684\u4e00\u4e9b\u4f8b\u5b50\uff1aIIFE \u6280\u672f\u3001\u6298\u53e0\u8868\u8fbe\u5f0f\u548c\u53ef\u53d8\u53c2\u6570\u6cdb\u578b Lamdba\uff0c\u4ece\u591a\u4e2a Lamdba \u8fdb\u884c\u6d3e\u751f\u5df2\u7ecf\u5f02\u6b65\u4ee3\u7801\u7684\u6267\u884c\u3002 \u7531\u4e8e\u5728 C++17 \u4e2d\u652f\u6301\u7684\u5404\u79cd\u529f\u80fd\uff0c\u6211\u4eec\u73b0\u5728\u6709\u66f4\u597d\u7684\u8bed\u6cd5\u548c\u66f4\u76f4\u63a5\u7684\u65b9\u6cd5\u6765\u7f16\u5199\u66f4\u9ad8\u6548\u7684\u4ee3\u7801\u3002","title":"9. \u603b\u7ed3"},{"location":"Chapter5/","text":"\u4e94\u3001Lambda in C++20 2020 \u5e74 2 \u6708\uff0c\u5728\u6377\u514b\u9996\u90fd\u5e03\u62c9\u683c\u7684\u4f1a\u8bae\u4e0a\uff0cISO \u59d4\u5458\u4f1a\u6700\u7ec8\u901a\u8fc7 C++20 \u6807\u51c6\uff0c\u5e76\u5ba3\u5e03\u5176\u5c06\u4e8e 2020 \u5e74\u672b\u6b63\u5f0f\u53d1\u5e03\u3002 \u65b0\u7684\u6807\u51c6\u89c4\u8303\u4e3a C++ \u8bed\u8a00\u672c\u8eab\u548c\u6807\u51c6\u5e93\u90fd\u5e26\u6765\u4e86\u8bf8\u591a\u663e\u8457\u6027\u7684\u63d0\u5347\u548c\u6539\u8fdb\uff01Lambda \u8868\u8fbe\u5f0f\u4e5f\u5f97\u5230\u4e86\u4e00\u4e9b\u66f4\u65b0\u3002 \u672c\u7ae0\u4e2d\uff0c\u4e3b\u8981\u5173\u6ce8\u4e0b\u5217\u5185\u5bb9\uff1a C++20 \u4e2d\u7684\u53d8\u5316 \u65b0\u7684\u9009\u62e9 - \u6355\u83b7 this \u6307\u9488 \u6a21\u677f Lambda \u5982\u4f55\u901a\u8fc7 concepts \u63d0\u9ad8\u6cdb\u578b Lambda \u5982\u4f55\u5728 Lambda \u4e2d\u4f7f\u7528 constexpr \u7b97\u6cd5 \u5982\u4f55\u4f7f overloaded \u6a21\u5f0f\u66f4\u52a0\u7b80\u77ed \u4f60\u53ef\u4ee5\u5728 N4681 \u4e2d\u7684 [expr.prim.lambda] \u7ae0\u8282\u67e5\u9605\u6807\u51c6\u89c4\u8303\u4e2d Lambda \u76f8\u5173\u7684\u5185\u5bb9\u3002 1. Lambda \u8bed\u6cd5\u66f4\u65b0 \u5728 C++20 \u4e2d\uff0cLambda \u7684\u8bed\u6cd5\u5f97\u5230\u4e86\u6539\u8fdb\uff1a \u73b0\u5728\u53ef\u4ee5\u5728\u53c2\u6570\u5217\u8868\u540e\u6dfb\u52a0 consteval \u5173\u952e\u5b57 \u73b0\u5728\u660e\u786e\u6a21\u677f\u5c3e\uff08template tail\uff09\u662f\u53ef\u9009\u7684 \u73b0\u5728\u5728\u5c3e\u90e8\u8fd4\u56de\u540e\uff0c\u53ef\u4ee5\u6dfb\u52a0 requires \u58f0\u660e [] < tparams > () specifiers exception attr -> ret requires { /*code; */ } ^ ^ ^ ^ ^ | | | | | | | | | optional : trailing return type | | | | | | | optional : mutable , constexpr , consteval , noexcept , attributes | | | | | parameter list ( optional when no specifiers added ) | | | optional : template parameter list | lambda introducer with an optional capture list 2. \u66f4\u65b0\u5feb\u89c8 C++20 \u4e2d Lambda \u8868\u8fbe\u5f0f\u7684\u76f8\u5173\u7279\u6027\uff1a \u5141\u8bb8 [=, this] \u4f5c\u4e3a Lambda \u6355\u83b7 - P0409R2 \u5e76\u4e14\u5f03\u7528\u4e86\u901a\u8fc7 [=] \u9690\u5f0f\u6355\u83b7 this - P0806 \u521d\u59cb\u5316\u6355\u83b7\u4e2d\u7684\u5305\u6269\u5c55\uff1a [...args = std::move(args)](){} - P0780 static \uff0c thread_local \u548c Lambda \u6355\u83b7\u7684\u7ed3\u6784\u5316\u7ed1\u5b9a - P1091 \u6a21\u677f Lambda\uff08\u5e26\u6709 concepts \uff09- P0428R2 \u7b80\u5316\u663e\u5f0f\u7684 Lambda \u6355\u83b7 - P0588R1 \u9ed8\u8ba4\u53ef\u6784\u9020\u548c\u53ef\u5206\u914d\u7684\u65e0\u72b6\u6001 Lambda - P0624R2 \u672a\u8bc4\u4f30\u4e0a\u4e0b\u6587\u7684 Lambda - P0315R4 constexpr \u7b97\u6cd5 - \u5341\u5206\u91cd\u8981 P0202 \uff0c P0879 \u548c P1645 \u5982\u679c\u60f3\u4e86\u89e3\u66f4\u591a C++20 \u7684\u5185\u5bb9\uff0c\u4f60\u53ef\u4ee5\u9605\u8bfb\u6b64\u7bc7\u6bd4\u8f83 C++17 \u548c C++20 \u7684\u6587\u7ae0\uff1a Changes between C++17 and C++20 \u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u9605\u8bfb\u6211\u5173\u4e8e C++20 \u8bed\u8a00\u548c\u6807\u51c6\u5e93\u7279\u6027\u7684\u7684\u5361\u7247\u7b14\u8bb0\uff1a Bartek's coding blog: C++20 Reference Card \u5feb\u901f\u9884\u89c8\u4e0b\u8fd9\u4e9b\u65b0\u7684\u6539\u53d8\uff1a \u65b0\u6dfb\u52a0\u7684\u529f\u80fd\u201c\u6e05\u7406\u201d\u4e86 Lambda \u8bed\u6cd5\u3002\u540c\u65f6\uff0cC++20 \u4e5f\u589e\u5f3a\u4e86\u90e8\u5206\u529f\u80fd\uff0c\u5141\u8bb8\u6211\u4eec\u5728\u9ad8\u7ea7\u573a\u666f\u4e2d\u4f7f\u7528 Lambda\u3002 \u4f8b\u5982\uff0c\u6839\u636e P1091 \uff0c\u6211\u4eec\u53ef\u4ee5\u6355\u83b7\u4e00\u4e2a\u7ed3\u6784\u5316\u7ed1\u5b9a\uff1a \u4ee3\u7801 5-1 \u5728 Lambda \u4e2d\u6355\u83b7\u7ed3\u6784\u5316\u7ed1\u5b9a #include <string> #include <tuple> auto GetParams () { return std :: tuple { std :: string { \"Hello World\" }, 42 }; } int main () { auto [ x , y ] = GetParams (); const auto ParamLength = [ & x , & y ]() { return x . length () + y ; }(); return ParamLength ; } \u4e00\u4e9b\u7f16\u8bd1\u5668\uff08\u5982 GCC\uff09\u751a\u81f3\u5728 C++17 \u4e2d\u5c31\u652f\u6301\u4e86\u6355\u83b7\u7ed3\u6784\u5316\u7ed1\u5b9a\uff0c\u5373\u4fbf\u5f53\u65f6\u7684\u6807\u51c6\u5e76\u672a\u5f3a\u5236\u54df\u6c42\u3002 C++20 \u6807\u51c6\u4e5f\u6709\u5173\u4e8e *this \u6355\u83b7\u7684\u9610\u660e\u3002\u73b0\u5728\u5728\u65b9\u6cd5\u4e2d\u8fdb\u884c\u503c\u6355\u83b7 [=] \u4f1a\u6536\u5230\u4e00\u6761\u8b66\u544a\uff1a \u4ee3\u7801 5-2 \u9690\u5f0f\u6355\u83b7 *this \u7684\u8b66\u544a struct Baz { auto foo () { return [ = ] { std :: cout << s << '\\n' ; }; } std :: string s ; }; GCC9 \u4e0b\u8fdb\u884c\u7f16\u8bd1\u4f1a\u6709\u5982\u4e0b\u7684\u8b66\u544a\uff1a warning: implicit capture of 'this' via '[=]' is deprecated in C++20 \u4e3a\u4ec0\u4e48\u4f1a\u51fa\u73b0\u8fd9\u6761\u8b66\u544a\u5462\uff1f\u56e0\u4e3a\u5c31\u7b97\u662f\u4f7f\u7528 [=] \u6355\u83b7\u7684 this \u4e5f\u662f\u4f5c\u4e3a\u6307\u9488\u7684\u5f62\u5f0f\u51fa\u73b0\uff0c\u6240\u4ee5\u4e0d\u5982\u663e\u5f0f\u7684\u6307\u660e\u5b83\u66f4\u597d\uff1a [=, this] \u6216\u8005 [=, *this] \u3002 \u5feb\u901f\u56de\u987e\u4e4b\u540e\uff0c\u8ba9\u6211\u4eec\u6765\u770b\u770b C++20 \u4e2d\u4e0e Lambda \u76f8\u5173\u7684\u66f4\u7a81\u51fa\u7684\u7279\u6027\u3002 3. consteval Lambda \u4ece C++11 \u8d77\uff0c constexpr \u5c31\u5141\u8bb8\u51fd\u6570\u5728\u7f16\u8bd1\u671f\u95f4\u6267\u884c\u4e86\uff0c\u4f46\u662f\u540c\u65f6\uff0c\u4e5f\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u6267\u884c\u8fd9\u4e9b\u51fd\u6570\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6700\u597d\u7684\u505a\u6cd5\u662f\u5c06\u90e8\u5206\u529f\u80fd\u9650\u5236\u5728\u7f16\u8bd1\u671f\u65f6\u8fdb\u884c\u3002 \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48 C++20 \u4e2d\u5f15\u5165\u4e86\u65b0\u7684\u5173\u952e\u5b57\uff0c\u6765\u521b\u5efa\u7b26\u5408 constexpr \u89c4\u5219\u4f46\u53ea\u80fd\u5728\u7f16\u8bd1\u671f\u6267\u884c\u7684\u51fd\u6570\uff0c\u8fd9\u4e9b\u51fd\u6570\u4e5f\u88ab\u79f0\u4e3a \u201c\u5373\u65f6\u51fd\u6570\uff08Immediate Function\uff09\u201d \u3002 \u8fd9\u4e2a\u65b0\u7684\u5173\u952e\u5b57\u4e5f\u53ef\u4ee5\u7528\u5728 Lambda \u4e0a\u3002\u770b\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u5427\uff1a \u4ee3\u7801 5-3 \u4e00\u4e2a\u7b80\u5355\u7684\u5373\u65f6 Lambda \u51fd\u6570 int main () { const int x = 10 ; auto lam = []( int x ) consteval { return x + x ; }; return lam ( x ); } \u6211\u4eec\u5c06\u65b0\u7684\u5173\u952e\u5b57 consteval \u653e\u5728\u4e86 Lambda \u7684\u53c2\u6570\u5217\u8868\u4e4b\u540e\uff0c\u7c7b\u4f3c\u4e8e constexpr \u7684\u7528\u6cd5\u3002\u4e25\u683c\u7684\u533a\u522b\u5c31\u5728\u4e8e\uff0c\u5982\u679c\u4f60\u5c06 x \u7684 const \u79fb\u9664\uff0c\u90a3\u4e48 constexpr Lambda \u8868\u8fbe\u5f0f\u4ecd\u65e7\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u5de5\u4f5c\uff0c\u4f46\u662f\u5373\u65f6 Lambda \u51fd\u6570\u5c06\u65e0\u6cd5\u6210\u529f\u7f16\u8bd1\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5982\u679c Lambda \u51fd\u6570\u4f53\u4e2d\u9075\u5faa constexpr \u51fd\u6570\u7684\u89c4\u5219\uff0c\u90a3\u4e48\u7f16\u8bd1\u5668\u4f1a\u5c06\u8c03\u7528\u64cd\u4f5c\u7b26\u6807\u8bb0\u4e3a\u9690\u5f0f\u7684 constexpr \u3002 \u8fd9\u5e76\u975e consteval \u6848\u4f8b\uff0c\u56e0\u4e3a\u5b83\u5bf9\u7c7b\u4f3c\u8fd9\u6837\u7684\u4ee3\u7801\u62e5\u6709\u66f4\u5f3a\u7684\u9650\u5236\u3002 \u5f53\u7136\uff0c\u8fd9\u4e24\u4e2a\u5173\u952e\u5b57\u65e0\u6cd5\u540c\u65f6\u4f7f\u7528\u3002\u5728\u8349\u6848 P1073R3 \u4e2d\u4f60\u53ef\u4ee5\u627e\u5230\u4e0e\u6b64\u76f8\u5173\u7684\u5168\u90e8\u63cf\u8ff0\u3002 4. \u6355\u83b7\u53c2\u6570\u5305 C++20 \u4e2d\u8fd8\u5bf9 Lambda \u4e2d\u521d\u59cb\u5316\u6355\u83b7\u7684\u5305\u6269\u5c55\u5e26\u6765\u4e86\u4e00\u4e2a\u63d0\u5347\uff1a template < typename ... Args > void call ( Args && ... args ) { auto ret = [... capturedArgs = std :: move ( args )](){}; } \u5148\u524d\uff0c\u5728 C++20 \u4e4b\u524d\uff0c\u8fd9\u6bb5\u4ee3\u7801\u662f\u65e0\u6cd5\u901a\u8fc7\u7f16\u8bd1\u7684\uff08\u53c2\u8003 C++11 \u7ae0\u8282\u4e2d \u8fd9\u90e8\u5206 \u5185\u5bb9\uff09\uff0c\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u9700\u8981\u5c06\u53c2\u6570\u6253\u5305\u8fdb\u4e00\u4e2a\u5355\u72ec\u7684\u5143\u7ec4\u4e2d\u53bb\u3002 \u5173\u4e8e\u6355\u83b7\u9650\u5236\u76f8\u5173\u7684\u5386\u53f2\u5185\u5bb9\uff0c\u4f60\u53ef\u4ee5\u53c2\u8003 P0780 \u4e2d\u7684\u63cf\u8ff0\u3002 \u7efc\u4e0a\u6240\u8ff0\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5728 C++11 \u7ae0\u8282\u4e2d\u6709\u5173\u6355\u83b7\u4e00\u4e2a\u53ef\u53d8\u53c2\u6570\u5305\u7684\u4f8b\u5b50\u5e76\u5728 C++20 \u4e2d\u65b0\u7279\u6027\u7684\u52a0\u6301\u4e0b\u5b9e\u8df5\u4e0b\u3002 \u770b\u4e0b\u9762\u7684\u4f8b\u5b50\uff0c\u5229\u7528\u6298\u53e0\u8868\u8fbe\u5f0f\u6765\u6253\u5370\u6bcf\u4e2a\u88ab\u6355\u83b7\u7684\u53c2\u6570\uff1a \u4ee3\u7801 5-4 \u6355\u83b7\u53ef\u53d8\u53c2\u6570\u5305 #include <iostream> #include <memory> template < class First , class ... Args > void captureTest ( First && first , Args && ... args ) { const auto printer = [ first = std :: move ( first ), ... capturedArgs = std :: move ( args )] { std :: cout << first ; (( std :: cout << \", \" << capturedArgs ), ...); std :: cout << '\\n' ; }; printer (); } int main () { auto ptr = std :: make_unique < int > ( 10 ); captureTest ( std :: move ( ptr ), 2 , 3 , 4 ); captureTest ( std :: move ( ptr ), 'a' , 'b' ); } \u8f93\u51fa\uff1a 0x1f0cb20, 2, 3, 4 0, a, b \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u4e00\u4e2a printer \u5bf9\u8c61\uff0c\u5b83\u5f88\u7c7b\u4f3c\u5728 C++17 \u4e2d\u5199\u8fc7\u7684\u90a3\u6837\uff0c\u4f46\u662f\u5728\u8fd9\u513f\u6211\u4eec\u7528\u6765\u6355\u83b7\u53d8\u91cf\u800c\u4e0d\u662f\u4f5c\u4e3a\u8f6c\u53d1 Lambda \u53c2\u6570\u4f7f\u7528\u3002 \u4ee3\u7801\u4e2d\u751a\u81f3\u4f20\u9012\u4e86\u4e00\u4e2a unique \u6307\u9488\u3002\u6211\u4eec\u4f20\u9012\u4e86\u4e24\u6b21\u5e76\u4e14\u4f60\u53ef\u4ee5\u770b\u5230\u5728\u7b2c\u4e8c\u6b21\u8c03\u7528\u65f6\u5f97\u5230\u7684\u7ed3\u679c\u4e3a 0 \uff0c\u56e0\u4e3a\u6b64\u65f6\u6307\u9488\u5df2\u7ecf\u4e22\u5931\u4e86\u5b83\u5bf9\u90a3\u5757\u5185\u5b58\u5757\u7684\u6240\u6709\u6743\u3002 5. \u6a21\u677f Lambda C++14 \u4e2d\u5c31\u5df2\u7ecf\u5f15\u5165\u4e86\u6cdb\u578b Lambda\uff0c\u5e76\u4e14\u53ef\u4ee5\u5728\u6a21\u677f\u4e2d\u5c06\u53c2\u6570\u7c7b\u578b\u4e5f\u58f0\u660e\u4e3a auto \u7c7b\u578b\u3002 \u4f8b\u5982\uff1a [] ( auto x ) { x ; }; \u7f16\u8bd1\u5668\u4f1a\u751f\u6210\u4e00\u4e2a\u8c03\u7528\u64cd\u4f5c\u7b26\u5bf9\u5e94\u4ee5\u4e0b\u7684\u6a21\u677f\u65b9\u6cd5\uff1a template < typename T > void operator ()( T x ) { x ; } \u4f46\u662f\uff0c\u8fd9\u4f3c\u4e4e\u6ca1\u6709\u529e\u6cd5\u53bb\u76f4\u63a5\u6539\u53d8\u8fd9\u4e2a\u6a21\u677f\u7684\u53c2\u6570\uff0c\u5e76\u4e14\u4f7f\u7528\u201c\u771f\u5b9e\u201d\u7684\u6a21\u677f\u53c2\u6570\u3002 C++20 \u4e0b\uff0c\u8fd9\u90fd\u662f\u53ef\u80fd\u7684\u3002 \u6bd4\u5982\uff0c\u5982\u4f55\u9650\u5236 Lambda \u4ec5\u5bf9 vector \u7c7b\u578b\u751f\u6548\u5462\uff1f \u5982\u4e0b\uff0c\u6709\u4e00\u4e2a\u6cdb\u578b Lambda\uff1a auto foo = []( auto & vec ) { std :: cout << std :: size ( vec ) << '\\n' ; std :: cout << vec . capacity () << '\\n' ; }; \u4f46\u662f\uff0c\u5982\u679c\u4f60\u8c03\u7528\u5b83\u5e76\u4f20\u5165\u4e00\u4e2a int \u53c2\u6570\uff08\u5982 foo(10) \uff09\uff0c\u90a3\u4f60\u53ef\u80fd\u4f1a\u9047\u5230\u201c\u6666\u6da9\u96be\u61c2\u201d\u7684\u9519\u8bef\u63d0\u793a\uff1a test . cc : In instantiation of ' main () ::< lambda ( const auto : 1 & ) > [ with auto : 1 = int ] ' : test . cc : 16 : 11 : required from here test . cc : 11 : 30 : error : no matching function for call to ' size ( const int & ) ' 11 | std :: cout << std :: size ( vec ) << '\\n' ; \u5728 C++20 \u4e2d\uff0c\u53ef\u4ee5\u8fd9\u6837\u5199\uff1a auto foo = [] < typename T > ( std :: vector < T > const & vec ) { std :: cout << std :: size ( vec ) << '\\n' ; std :: cout << vec . capacity () << '\\n' ; }; \u5b83\u6240\u5bf9\u5e94\u7684\u6a21\u677f\u8c03\u7528\u64cd\u4f5c\u7b26\u4e3a\uff1a < typename T > void operator ()( std :: vector < T > const & s ) { ... } \u8fd9\u6837\u6a21\u677f\u53c2\u6570\u5c31\u5728\u6355\u83b7\u5b50\u53e5 [] \u4e4b\u540e\u4e86\u3002 \u73b0\u5728\u8fdb\u884c\u7c7b\u4f3c foo(10) \u7684\u8c03\u7528\uff0c\u90a3\u4e48\u4f1a\u6536\u5230\u4e00\u4e2a\u8f83\u4eba\u6027\u5316\u7684\u6d88\u606f\uff1a note: mismatched types 'const std::vector<T>'and 'int' \u4e0a\u8ff0\u4f8b\u5b50 \u4e2d\uff0c\u7f16\u8bd1\u5668\u4f1a\u8b66\u544a\u6211\u4eec\u5173\u4e8e Lambda \u63a5\u53e3\u4e2d\u7684\u8fd9\u4e2a\u9519\u8bef\u7684\u5339\u914d\u3002 \u53e6\u5916\u6709\u4e00\u4e2a\u91cd\u8981\u7684\u65b9\u9762\u5c31\u662f\uff0c\u5728\u6cdb\u578b Lambda \u7684\u793a\u4f8b\u4e2d\uff0c\u4f60\u53ea\u62e5\u6709\u4e00\u4e2a\u53d8\u91cf\u800c\u4e0d\u662f\u5b83\u7684\u6a21\u677f\u7c7b\u578b\u3002 \u5982\u679c\u8981\u8bbf\u95ee\u7c7b\u578b\uff0c\u5219\u9700\u8981\u4f7f\u7528 decltype(x) \uff08\u5bf9\u4e8e\u5e26\u6709 auto x \u53c2\u6570\u7684 Lambda\uff09\u3002 \u8fd9\u5c06\u4f1a\u4f7f\u5f97\u4f60\u7684\u4ee3\u7801\u53d8\u5f97\u5197\u957f\u3002 \u4f8b\u5982\uff08\u4f7f\u7528\u4e86 P0428 \u4e2d\u7684\u4ee3\u7801\uff09\uff1a \u4ee3\u7801 5-5 \u4ece\u6cdb\u578b\u53c2\u6570\u4e2d\u63a8\u65ad auto f = []( auto const & x ) { using T = std :: decay_t < decltype ( x ) > ; T copy = x ; T :: static_function (); using Iterator = typenameT :: iterator ; } \u73b0\u5728\u53ef\u4ee5\u8fd9\u6837\u7f16\u5199\uff1a \u4ee3\u7801 5-6 \u4f7f\u7528\u6a21\u677f Lambda auto f = [] < typename T > ( T const & x ) { T copy = x ; T :: static_function (); using Iterator = typenameT :: iterator ; } \u548c\u660e\u663e\uff0c\u5728\u7b2c\u4e00\u79cd\u5199\u6cd5\u4e2d\uff0c\u6211\u4eec\u4e0d\u5f97\u4e0d\u4f7f\u7528 using T = std :: decay_t < decltype ( x ) > ; \u4e3a\u4e86\u5f97\u5230\u8f93\u5165\u53c2\u6570\u7684\u7c7b\u578b\uff0c\u5728 C++20 \u7248\u672c\u4e2d\uff0c\u6ca1\u6709\u5fc5\u8981\u53bb\u8bbf\u95ee\u6a21\u677f\u53c2\u6570\u4e86\u3002 \u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u6709\u4e00\u4e2a\u91cd\u8981\u7684\u4f7f\u7528\u573a\u666f\u5c31\u662f\u5728\u53ef\u53d8\u6cdb\u578b Lambda \u4e2d\u8fdb\u884c\u5b8c\u7f8e\u8f6c\u53d1\uff1a // C++17 auto ForwardToTestFunc = []( auto && ... args ) { // what's the type of `args` ? return TestFunc ( std :: forward < decltype ( args ) > ( args )...); }; \u6bcf\u6b21\u4f60\u60f3\u8981\u8bbf\u95ee\u6a21\u677f\u53c2\u6570\u7684\u7c7b\u578b\u662f\uff0c\u4f60\u90fd\u9700\u8981\u53bb\u4f7f\u7528 decltype ()\uff0c\u4f46\u662f\u5728\u6a21\u677f lambda \u4e2d\u5c31\u4e0d\u9700\u8981\u4e86\uff1a // C++20 auto ForwardToTestFunc = [] < typename ... T > ( T && ... args ) { return TestFunc ( std :: forward < T > ( args )...); // we have allthe types! }; \u600e\u4e48\u6837\uff1f\u6a21\u677f Lambda \u63d0\u4f9b\u4e86\u66f4\u4e3a\u6e05\u6670\u7684\u8bed\u6cd5\u548c\u66f4\u597d\u7684\u8bbf\u95ee\u53c2\u6570\u7c7b\u578b\u7684\u9014\u5f84\u3002 \u5f53\u7136\uff0c\u8fd9\u8fd8\u4e0d\u591f\uff0c\u4f60\u751a\u81f3\u4e5f\u53ef\u4ee5\u5728 Lambda \u4f7f\u7528 concept \uff0c\u54b1\u4eec\u63a5\u7740\u5f80\u4e0b\u770b\u3002 6. Concept \u548c Lambda concept \u662f\u7f16\u5199\u6a21\u677f\u7684\u4e00\u9879\u9769\u547d\u6027\u8fdb\u6b65\u3002 \u5b83\u5c06\u5141\u8bb8\u4f60\u5bf9\u6a21\u677f\u53c2\u6570\u8fdb\u884c\u7ea6\u675f\uff0c\u8fd9\u53ef\u4ee5\u6781\u5927\u63d0\u9ad8\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\uff0c\u53ef\u80fd\u63d0\u5347\u7f16\u8bd1\u901f\u5ea6\u751a\u81f3\u80fd\u591f\u63d0\u4f9b\u66f4\u53cb\u5584\u7684\u9519\u8bef\u4fe1\u606f\u3002 \u8bdd\u4e0d\u591a\u8bf4\uff0c\u770b\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\u5427\uff1a \u4ee3\u7801 5-7 \u4e00\u4e2a\u666e\u901a\u7684 concept \u58f0\u660e // define a concept: template < class T > concept SignedIntegral = std :: is_integral_v < T > && std :: is_signed_v < T > ; // use: template < SignedIntegral T > void signedIntsOnly ( T val ) {} \u6211\u4eec\u9996\u5148\u521b\u5efa\u4e86\u4e00\u4e2a concept \u63cf\u8ff0\u7c7b\u578b\u4e3a\u6709\u7b26\u53f7\u7684\u5e76\u4e14\u662f\u6574\u5f62\u3002 \u8bf7\u6ce8\u610f\u6211\u4eec\u53ef\u4ee5\u5df2\u6709\u7684\u7c7b\u578b\u7279\u5f81\u3002 \u4e4b\u540e\uff0c\u6211\u4eec\u4f7f\u7528\u5979\u6765\u5b9a\u4e49\u4e00\u4e2a\u4ec5\u652f\u6301\u80fd\u5339\u914d concept \u7c7b\u578b\u7684\u6a21\u677f\u51fd\u6570\u3002 \u5728\u8fd9\u6211\u4eec\u6ca1\u6709\u4f7f\u7528 typename T \uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u5f15\u7528\u4e00\u4e2a concept \u540d\u5b57\u3002 \u597d\u4e86\uff0c\u7b80\u5355\u4e86\u89e3\u4e86 concept \u4e4b\u540e\uff0c\u90a3\u4e48\u600e\u4e48\u8ddf Lambda \u5173\u8054\u8d77\u6765\u5462\uff1f \u5173\u952e\u90e8\u5206\u5c31\u5728\u4e8e\u7cbe\u70bc\u8bed\u6cd5\u4ee5\u53ca\u7ea6\u675f auto \u6a21\u677f\u53c2\u6570\u3002 \u7b80\u5316\u548c\u7cbe\u70bc\u7684\u8bed\u6cd5 \u5f97\u76ca\u4e8e concept \u7cbe\u70bc\u7684\u8bed\u6cd5\u7279\u6027\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4e0d\u7528\u5728\u7f16\u5199\u6a21\u677f\u65f6\u5019\u5e26\u6709 template<typename ..> \u90e8\u5206\u4e86\u3002 \u4f7f\u7528\u65e0\u7ea6\u675f\u7684 auto \uff1a void myTemplateFunc ( auto param ) {} \u4f7f\u7528\u6709\u7ea6\u675f\u7684 auto\uff1a void signedIntsOnly ( SignedIntegral auto val ) {} void floatsOnly ( std :: floating_point auto fp ) {} \u8fd9\u4e9b\u8bed\u6cd5\u8ddf\u5728 C++14 \u4e2d\u7f16\u5199\u6cdb\u578b Lambda \u65f6\u5f88\u50cf\uff0c\u5f53\u7136\uff0c\u73b0\u5728\u4f60\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a void myTemplateFunction ( auto val ) {} \u6362\u53e5\u8bdd\u8bf4\uff0c\u5bf9\u4e8e lambda\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u5b83\u7cbe\u70bc\u7684\u98ce\u683c\uff0c\u4f8b\u5982\u5bf9\u6cdb\u578b Lambda \u53c2\u6570\u6dfb\u52a0\u989d\u5916\u7684\u9650\u5236\u3002 auto GenLambda = []( SignedIntegral auto param ) { return param * param + 1 ; } \u4e0a\u9762\u7684\u4f8b\u5b50\u5229\u7528 SignedIntegral \u6765\u9650\u5236 auto \u53c2\u6570\u3002 \u4f46\u662f\u6574\u4e2a\u8868\u8fbe\u5f0f\u6bd4\u8d77\u6a21\u677f Lambda \u770b\u4e0a\u53bb\u66f4\u52a0\u7684\u53ef\u8bfb\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u8981\u7740\u91cd\u8ba8\u8bba\u7684\u70b9\u4e86\u3002 \u6765\u4e00\u4e2a\u6709\u70b9\u96be\u5ea6\u7684\u4f8b\u5b50\u5427\uff0c\u6211\u4eec\u751a\u81f3\u53ef\u4ee5\u4e3a\u4e00\u4e9b\u7c7b\u7684\u63a5\u53e3\u5b9a\u4e49 concept \uff1a \u4ee3\u7801 5-8 IRenderable concept, with requires keyword template < typename T > concept IRenderable = requires ( T v ) { { v . render () } -> std :: same_as < void > ; { v . getVertCount () } -> std :: convertible_to < size_t > ; }; \u4e0a\u9762\u8fd9\u4e2a\u4f8b\u5b50\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5e26\u6709 render () \u548c getVertCount () \u6210\u5458\u51fd\u6570\uff0c\u7528\u6765\u5339\u914d\u5168\u90e8\u7c7b\u578b\u7684 concept\u3002 \u4f7f\u7528\u5b83\u6765\u5199\u4e00\u4e2a\u6cdb\u578b Lambda \u8bd5\u8bd5\uff1a \u4ee3\u7801 5-9 IRenderable concept/Interface \u7684\u5b9e\u73b0 #include <concepts> #include <iostream> template < typename T > concept IRenderable = requires ( T v ) { { v . render () } -> std :: same_as < void > ; { v . getVertCount () } -> std :: convertible_to < size_t > ; }; struct Circle { void render () { std :: cout << \"drawing circle \\n \" ; } size_t getVertCount () const { return 10 ; }; }; struct Square { void render () { std :: cout << \"drawing square \\n \" ; } size_t getVertCount () const { return 4 ; }; }; int main () { const auto RenderCaller = []( IRenderable auto & obj ) { obj . render (); }; Circle c ; RenderCaller ( c ); Square s ; RenderCaller ( s ); } \u8fd9\u4e2a\u4f8b\u5b50\u4e2d RenderCaller \u5c31\u662f\u4e00\u4e2a\u6cdb\u578b Lambda \uff0c\u5e76\u4e14\u652f\u6301\u7c7b\u578b\u5fc5\u987b\u6ee1\u8db3 IRenderable concept \u3002 7. \u65e0\u72b6\u6001 Lambda \u7684\u53d8\u66f4 \u4e5f\u8bb8\u4f60\u4f1a\u60f3\u8d77\u6765 C++11 \u4e2d\u6211\u4eec\u63d0\u8fc7\u7684\u65e0\u72b6\u6001\u3001\u751a\u81f3\u6ca1\u6709\u9ed8\u8ba4\u6784\u9020\u5316\u7684 Lambda\u3002 \u7136\u800c\uff0c\u8fd9\u4e2a\u9650\u5236\u5728 C++20 \u4e2d\u88ab\u89e3\u9664\u4e86\u3002 \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u5047\u5982\u4f60\u7684 Lambda \u6ca1\u6709\u6355\u83b7\u4efb\u4f55\u4e1c\u897f\u7684\u60c5\u51b5\u4e0b\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5199\u4e0b\u5982\u4e0b\u7684\u4ee3\u7801\uff1a \u4ee3\u7801 5-10 \u4e00\u4e2a\u65e0\u72b6\u6001 Lambda #include <iostream> #include <set> #include <string> struct Product { std :: string _name ; int _id { 0 }; double _price { 0.0 }; }; int main () { const auto nameCmp = []( const auto & a , const auto & b ) { return a . _name < b . _name ; }; const std :: set < Product , decltype ( nameCmp ) > prodSet { { \"Cup\" , 10 , 100.0 }, { \"Book\" , 2 , 200.5 }, { \"TV set\" , 1 , 2000 }, { \"Pencil\" , 4 , 10.5 }}; for ( const auto & elem : prodSet ) std :: cout << elem . _name << '\\n' ; } \u4f8b\u5b50\u4e2d\u6211\u58f0\u660e\u4e86\u4e00\u4e2a\u96c6\u5408\u7528\u6765\u5b58\u50a8\u4e00\u7cfb\u5217\u7684\u4ea7\u54c1\u3002 \u540c\u65f6\u6211\u9700\u8981\u4e00\u4e2a\u529e\u6cd5\u6765\u6bd4\u8f83\u8fd9\u4e9b\u4ea7\u54c1\uff0c\u6240\u4ee5\u6211\u4f20\u5165\u4e86\u4e00\u4e2a\u65e0\u72b6\u6001\u7684 Lambda \u7528\u6765\u6bd4\u8f83\u4ed6\u4eec\u7684\u4ea7\u54c1\u540d\u3002 \u5982\u679c\u7528 C++17 \u7f16\u8bd1\uff0c\u90a3\u4e48\u4f60\u4f1a\u6536\u83b7\u5982\u4e0b\u5173\u4e8e\u4f7f\u7528\u4e86\u5220\u9664\u9ed8\u8ba4\u6784\u9020\u5668\u7684\u9519\u8bef\u8bf4\u660e\uff1a test.h: In constructor 'std::set<_Key, _Compare, _Alloc>... [with _Key = Product; _Compare = main()::<lambda(const auto:1&, const auto:2&)>; ...' test.h:244:29: error: use of deleted function 'main()::<lambda(const auto:1&, const auto:2&)>::<lambda>()' \u4f46\u662f\u5728 C++20 \u4e2d\uff0c\u4f60\u53ef\u4ee5\u5b58\u50a8\u65e0\u72b6\u6001 Lambda\uff0c\u751a\u81f3\u53ef\u4ee5\u62f7\u8d1d\u4ed6\u4eec\uff1a \u4ee3\u7801 5-11 \u5b58\u50a8\u65e0\u72b6\u6001 Lambda template < typename F > struct Product { int _id { 0 }; double _price { 0.0 }; F _predicate ; }; int main () { const auto idCmp = []( const auto & a ) noexcept { return a . _id != 0 ; }; Product p { 10 , 10.0 , idCmp }; [[ maybe_unused ]] auto p2 = p ; } \u8865\u5145\u4e00\u4e9b\u5173\u4e8e\u201c\u672a\u8bc4\u4f30\u7684 concept\u201d \u8fd8\u6709\u4e00\u4e9b\u4e0e\u9ad8\u7ea7\u7528\u4f8b\u76f8\u5173\u7684\u53d8\u5316\uff0c\u6bd4\u5982\u672a\u8bc4\u4f30\u7684 concept \u3002 \u8fde\u540c\u9ed8\u8ba4\u7684\u53ef\u6784\u9020 Lambda\uff0c\u60a8\u73b0\u5728\u53ef\u4ee5\u7f16\u5199\u8fd9\u6837\u7684\u4ee3\u7801\uff1a std :: map < int , int , decltype ([]( int x , int y ) { return x > y ; }) > map ; \u5982\u60a8\u6240\u89c1\uff0c\u73b0\u5728\u53ef\u4ee5\u5728\u58f0\u660e\u6620\u5c04\u5bb9\u5668\u4e2d\u6307\u5b9a Lambda\u3002\u5b83\u53ef\u4ee5\u7528\u4f5c\u6bd4\u8f83\u5668\u4eff\u51fd\u6570\u3002 \u8fd9\u79cd\u201c\u672a\u8bc4\u4f30 concept \u201d\u5bf9\u4e8e\u9ad8\u7ea7\u6a21\u677f\u5143\u7f16\u7a0b\u7279\u522b\u65b9\u4fbf\u3002 \u4f8b\u5982\uff0c\u5728\u8be5\u529f\u80fd\u7684\u63d0\u6848\u4e2d\uff0c\u4f5c\u8005\u63d0\u5230\u5728\u7f16\u8bd1\u65f6\u4f7f\u7528\u65ad\u8a00\u5bf9\u5143\u7ec4\u5bf9\u8c61\u8fdb\u884c\u6392\u5e8f\uff0c\u8be5\u65ad\u8a00\u662f\u4e00\u4e2a Lambda\u3002 \u66f4\u591a\u7684\u5185\u5bb9\u53ef\u4ee5\u53c2\u8003 P0315R2 \u3002 8. Lambda \u548c constexpr \u7b97\u6cd5 \u56de\u60f3\u4e00\u4e0b\u4e4b\u524d\u7ae0\u8282\u4e2d\u7684\u5185\u5bb9\uff0c\u81ea C++17 \u4f9d\u8d56\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 constexpr Lambda\u3002 \u5e76\u4e14\uff0c\u7531\u4e8e\u8fd9\u9879\u529f\u80fd\uff0c\u6211\u4eec\u53ef\u4ee5\u4f20\u9012 Lambda \u7ed9\u4e00\u4e2a\u9700\u8981\u5728\u7f16\u8bd1\u5668\u8bc4\u4f30\u7684\u51fd\u6570\u3002 \u5728 C++20 \u4e2d\u5927\u591a\u6570\u6807\u6ce8\u7b97\u6cd5\u90fd\u53ef\u4ee5\u88ab\u5173\u952e\u5b57 constexpr \u6807\u8bb0\uff0c\u8fd9\u4f7f\u5f97 constexpr Lambda \u7528\u8d77\u6765\u66f4\u52a0\u65b9\u4fbf\u4e86\u3002 \u770b\u4e00\u4e9b\u4f8b\u5b50\u5427\u8fd8\u662f\u3002 \u4ee3\u7801 5-12 \u5728\u666e\u901a\u7684 constexpr Lambda \u4e2d\u4f7f\u7528 std::accumulate () #include <array> #include <numeric> int main () { constexpr std :: array arr { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 }; // with constexpr lambda static_assert ( std :: accumulate ( begin ( arr ), end ( arr ), 0 , []( auto a , auto b ) noexcept { return a + b ; }) == 55 ); return arr [ 0 ]; } \u672c\u4f8b\u4e2d\uff0c\u5728 Lambda \u4e2d\u4f7f\u7528 std::accumulate \uff0c\u5b9e\u9645\u4e0a\u4f7f\u7528\u7684\u8fd8\u662f std::plus \u64cd\u4f5c\u3002 \u4e0b\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u4f7f\u7528\u4e86\u4e00\u4e2a\u5e26\u6709 cmp \u6bd4\u8f83\u5668 cout_if \u7b97\u6cd5\u7684 constexpr \u51fd\u6570\u3002 \u4ee3\u7801 5-13 \u7ed9\u666e\u901a\u51fd\u6570\u4e2d\u4f20\u5165\u4e00\u4e2a constexpr Lambda #include <algorithm> #include <array> constexpr auto CountValues ( auto container , auto cmp ) { return std :: count_if ( begin ( container ), end ( container ), cmp ); } int main () { constexpr auto minVal = CountValues ( std :: array { -10 , 6 , 8 , 4 , -5 , 2 , 4 , 6 }, []( auto a ) { return a >= 0 ; }); return minVal ; } \u54ea\u4e9b\u6807\u51c6\u7b97\u6cd5\u662f\u53ef\u4ee5 constexpr \u7684\u5462\uff1f \u6240\u6709 <algorithm> \uff0c <utility> \u548c <numeric> \u5934\u6587\u4ef6\u4e2d\u7684\u7b97\u6cd5\u73b0\u5728\u90fd\u53ef\u4ee5\u88ab\u5173\u952e\u5b57 constexpr \u6807\u8bb0\u3002\u9664\u4e86 shuffle , sample , stable_sort , stable_partition , inplace_merge \u8fd9\u4e9b\uff0c\u4ee5\u53ca\u63a5\u53d7\u6267\u884c\u7b56\u7565\u53c2\u6570\u7684\u51fd\u6570\u6216\u91cd\u8f7d\u51fd\u6570\u3002 \u5177\u4f53\u7684\u5185\u5bb9\u53ef\u4ee5\u67e5\u9605 P0202 \uff0c P0879 \u548c P1645 \u3002 9. C++20 \u5bf9\u91cd\u8f7d\u6a21\u5f0f\u7684\u66f4\u65b0 \u5728\u524d\u4e00\u7ae0\u4e2d\uff0c\u5b66\u4e60\u8fc7\u5982\u4f55\u4ece\u591a\u4e2a Lambda \u8868\u8fbe\u5f0f\u6d3e\u751f\u5e76\u901a\u8fc7\u91cd\u8f7d\u6a21\u5f0f\u66b4\u9732\u5b83\u4eec\u3002 \u8fd9\u79cd\u6280\u672f\u5bf9\u4e8e std::variant \u8bbf\u95ee\u5f88\u65b9\u4fbf\u3002 \u5f97\u76ca\u4e8e C++20 \u4e2d\u7c7b\u6a21\u677f\u53c2\u6570\u63a8\u65ad\uff08CTAD\uff0cClass Template Argument Deduction\uff09\u7684\u66f4\u65b0\uff0c\u73b0\u5728\u53ef\u4ee5\u7528\u66f4\u7b80\u77ed\u7684\u8bed\u6cd5\u6765\u5b9e\u73b0\u4e86\u3002 \u4e3a\u4ec0\u4e48\uff1f \u8fd9\u662f\u56e0\u4e3a\u5728 C++20 \u4e2d\u6709 CTAD \u7684\u6269\u5c55\u5e76\u4e14\u4f1a\u81ea\u52a8\u5904\u7406\u805a\u5408\u3002 \u8fd9\u610f\u5473\u7740\u65e0\u9700\u7f16\u5199\u81ea\u5b9a\u4e49\u7684\u63a8\u65ad\u3002 \u6765\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a template < typename T , typename U , typename V > struct Triple { T t ; U u ; V v ; }; \u5728 C++20 \u4e2d\u7684\u5199\u6cd5\uff1a Triple ttt { 10.0f , 90 , std :: string { \"hello\" }}; T \u5c06\u88ab\u81ea\u52a8\u63a8\u65ad\u4e3a float \uff0c U \u4e3a int \uff0c V \u4e3a std::string \u3002 C++20 \u4e2d\u7684\u91cd\u8f7d\u6a21\u5f0f\uff1a template < class ... Ts > struct overload : Ts ... { using Ts :: operator ()...; }; \u8fd9\u4e2a\u7279\u6027\u7684\u8349\u6848\u53ef\u4ee5\u5728 P1021 \u548c P1816 \u4e2d\u67e5\u9605\u3002 GCC10 \u4f3c\u4e4e\u5b9e\u73b0\u4e86\u8fd9\u4e2a\u63d0\u8bae\uff0c\u4f46\u662f\u5b83\u4e0d\u9002\u7528\u4e8e\u7ee7\u627f\u7684\u9ad8\u7ea7\u6848\u4f8b\u3002\u56e0\u6b64\u6211\u4eec\u9700\u8981\u7b49\u5f85 GCC \u5bf9\u8be5\u7279\u6027\u8fdb\u884c\u5b8c\u6574\u7684\u652f\u6301\u3002 10. \u603b\u7ed3 \u5728\u672c\u7ae0\u4e2d\uff0c\u6211\u4eec\u56de\u987e\u4e86 C++20 \u5e26\u6765\u7684\u53d8\u5316\u3002 \u9996\u5148\uff0c\u4e00\u4e9b\u6f84\u6e05\u548c\u6539\u8fdb\uff1a\u4f8b\u5982\u6355\u83b7 this \u3001\u6355\u83b7\u7ed3\u6784\u5316\u7ed1\u5b9a\u6216\u9ed8\u8ba4\u6784\u9020\u65e0\u72b6\u6001 Lambda \u7684\u80fd\u529b\u3002 \u66f4\u91cd\u8981\u7684\u662f\uff0c\u8fd8\u6709\u66f4\u591a\u91cd\u8981\u7684\u8865\u5145\uff01 \u73b0\u5728\u7a81\u51fa\u7684\u529f\u80fd\u4e4b\u4e00\u662f\u6a21\u677f Lambdas \u548c\u6982\u5ff5\u3002 \u8fd9\u6837\u60a8\u5c31\u53ef\u4ee5\u66f4\u597d\u5730\u63a7\u5236\u901a\u7528 Lambdas\u3002 \u603b\u800c\u8a00\u4e4b\uff0c\u4f7f\u7528 C++20 \u53ca\u5176\u6240\u6709\u529f\u80fd\uff0c\u4f7f\u5f97 Lambda \u6108\u53d1\u6210\u4e3a\u66f4\u5f3a\u5927\u7684\u5de5\u5177\uff01","title":"Lambda in C++20"},{"location":"Chapter5/#\u4e94lambda-in-c20","text":"2020 \u5e74 2 \u6708\uff0c\u5728\u6377\u514b\u9996\u90fd\u5e03\u62c9\u683c\u7684\u4f1a\u8bae\u4e0a\uff0cISO \u59d4\u5458\u4f1a\u6700\u7ec8\u901a\u8fc7 C++20 \u6807\u51c6\uff0c\u5e76\u5ba3\u5e03\u5176\u5c06\u4e8e 2020 \u5e74\u672b\u6b63\u5f0f\u53d1\u5e03\u3002 \u65b0\u7684\u6807\u51c6\u89c4\u8303\u4e3a C++ \u8bed\u8a00\u672c\u8eab\u548c\u6807\u51c6\u5e93\u90fd\u5e26\u6765\u4e86\u8bf8\u591a\u663e\u8457\u6027\u7684\u63d0\u5347\u548c\u6539\u8fdb\uff01Lambda \u8868\u8fbe\u5f0f\u4e5f\u5f97\u5230\u4e86\u4e00\u4e9b\u66f4\u65b0\u3002 \u672c\u7ae0\u4e2d\uff0c\u4e3b\u8981\u5173\u6ce8\u4e0b\u5217\u5185\u5bb9\uff1a C++20 \u4e2d\u7684\u53d8\u5316 \u65b0\u7684\u9009\u62e9 - \u6355\u83b7 this \u6307\u9488 \u6a21\u677f Lambda \u5982\u4f55\u901a\u8fc7 concepts \u63d0\u9ad8\u6cdb\u578b Lambda \u5982\u4f55\u5728 Lambda \u4e2d\u4f7f\u7528 constexpr \u7b97\u6cd5 \u5982\u4f55\u4f7f overloaded \u6a21\u5f0f\u66f4\u52a0\u7b80\u77ed \u4f60\u53ef\u4ee5\u5728 N4681 \u4e2d\u7684 [expr.prim.lambda] \u7ae0\u8282\u67e5\u9605\u6807\u51c6\u89c4\u8303\u4e2d Lambda \u76f8\u5173\u7684\u5185\u5bb9\u3002","title":"\u4e94\u3001Lambda in C++20"},{"location":"Chapter5/#1-lambda-\u8bed\u6cd5\u66f4\u65b0","text":"\u5728 C++20 \u4e2d\uff0cLambda \u7684\u8bed\u6cd5\u5f97\u5230\u4e86\u6539\u8fdb\uff1a \u73b0\u5728\u53ef\u4ee5\u5728\u53c2\u6570\u5217\u8868\u540e\u6dfb\u52a0 consteval \u5173\u952e\u5b57 \u73b0\u5728\u660e\u786e\u6a21\u677f\u5c3e\uff08template tail\uff09\u662f\u53ef\u9009\u7684 \u73b0\u5728\u5728\u5c3e\u90e8\u8fd4\u56de\u540e\uff0c\u53ef\u4ee5\u6dfb\u52a0 requires \u58f0\u660e [] < tparams > () specifiers exception attr -> ret requires { /*code; */ } ^ ^ ^ ^ ^ | | | | | | | | | optional : trailing return type | | | | | | | optional : mutable , constexpr , consteval , noexcept , attributes | | | | | parameter list ( optional when no specifiers added ) | | | optional : template parameter list | lambda introducer with an optional capture list","title":"1. Lambda \u8bed\u6cd5\u66f4\u65b0"},{"location":"Chapter5/#2-\u66f4\u65b0\u5feb\u89c8","text":"C++20 \u4e2d Lambda \u8868\u8fbe\u5f0f\u7684\u76f8\u5173\u7279\u6027\uff1a \u5141\u8bb8 [=, this] \u4f5c\u4e3a Lambda \u6355\u83b7 - P0409R2 \u5e76\u4e14\u5f03\u7528\u4e86\u901a\u8fc7 [=] \u9690\u5f0f\u6355\u83b7 this - P0806 \u521d\u59cb\u5316\u6355\u83b7\u4e2d\u7684\u5305\u6269\u5c55\uff1a [...args = std::move(args)](){} - P0780 static \uff0c thread_local \u548c Lambda \u6355\u83b7\u7684\u7ed3\u6784\u5316\u7ed1\u5b9a - P1091 \u6a21\u677f Lambda\uff08\u5e26\u6709 concepts \uff09- P0428R2 \u7b80\u5316\u663e\u5f0f\u7684 Lambda \u6355\u83b7 - P0588R1 \u9ed8\u8ba4\u53ef\u6784\u9020\u548c\u53ef\u5206\u914d\u7684\u65e0\u72b6\u6001 Lambda - P0624R2 \u672a\u8bc4\u4f30\u4e0a\u4e0b\u6587\u7684 Lambda - P0315R4 constexpr \u7b97\u6cd5 - \u5341\u5206\u91cd\u8981 P0202 \uff0c P0879 \u548c P1645 \u5982\u679c\u60f3\u4e86\u89e3\u66f4\u591a C++20 \u7684\u5185\u5bb9\uff0c\u4f60\u53ef\u4ee5\u9605\u8bfb\u6b64\u7bc7\u6bd4\u8f83 C++17 \u548c C++20 \u7684\u6587\u7ae0\uff1a Changes between C++17 and C++20 \u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u9605\u8bfb\u6211\u5173\u4e8e C++20 \u8bed\u8a00\u548c\u6807\u51c6\u5e93\u7279\u6027\u7684\u7684\u5361\u7247\u7b14\u8bb0\uff1a Bartek's coding blog: C++20 Reference Card \u5feb\u901f\u9884\u89c8\u4e0b\u8fd9\u4e9b\u65b0\u7684\u6539\u53d8\uff1a \u65b0\u6dfb\u52a0\u7684\u529f\u80fd\u201c\u6e05\u7406\u201d\u4e86 Lambda \u8bed\u6cd5\u3002\u540c\u65f6\uff0cC++20 \u4e5f\u589e\u5f3a\u4e86\u90e8\u5206\u529f\u80fd\uff0c\u5141\u8bb8\u6211\u4eec\u5728\u9ad8\u7ea7\u573a\u666f\u4e2d\u4f7f\u7528 Lambda\u3002 \u4f8b\u5982\uff0c\u6839\u636e P1091 \uff0c\u6211\u4eec\u53ef\u4ee5\u6355\u83b7\u4e00\u4e2a\u7ed3\u6784\u5316\u7ed1\u5b9a\uff1a \u4ee3\u7801 5-1 \u5728 Lambda \u4e2d\u6355\u83b7\u7ed3\u6784\u5316\u7ed1\u5b9a #include <string> #include <tuple> auto GetParams () { return std :: tuple { std :: string { \"Hello World\" }, 42 }; } int main () { auto [ x , y ] = GetParams (); const auto ParamLength = [ & x , & y ]() { return x . length () + y ; }(); return ParamLength ; } \u4e00\u4e9b\u7f16\u8bd1\u5668\uff08\u5982 GCC\uff09\u751a\u81f3\u5728 C++17 \u4e2d\u5c31\u652f\u6301\u4e86\u6355\u83b7\u7ed3\u6784\u5316\u7ed1\u5b9a\uff0c\u5373\u4fbf\u5f53\u65f6\u7684\u6807\u51c6\u5e76\u672a\u5f3a\u5236\u54df\u6c42\u3002 C++20 \u6807\u51c6\u4e5f\u6709\u5173\u4e8e *this \u6355\u83b7\u7684\u9610\u660e\u3002\u73b0\u5728\u5728\u65b9\u6cd5\u4e2d\u8fdb\u884c\u503c\u6355\u83b7 [=] \u4f1a\u6536\u5230\u4e00\u6761\u8b66\u544a\uff1a \u4ee3\u7801 5-2 \u9690\u5f0f\u6355\u83b7 *this \u7684\u8b66\u544a struct Baz { auto foo () { return [ = ] { std :: cout << s << '\\n' ; }; } std :: string s ; }; GCC9 \u4e0b\u8fdb\u884c\u7f16\u8bd1\u4f1a\u6709\u5982\u4e0b\u7684\u8b66\u544a\uff1a warning: implicit capture of 'this' via '[=]' is deprecated in C++20 \u4e3a\u4ec0\u4e48\u4f1a\u51fa\u73b0\u8fd9\u6761\u8b66\u544a\u5462\uff1f\u56e0\u4e3a\u5c31\u7b97\u662f\u4f7f\u7528 [=] \u6355\u83b7\u7684 this \u4e5f\u662f\u4f5c\u4e3a\u6307\u9488\u7684\u5f62\u5f0f\u51fa\u73b0\uff0c\u6240\u4ee5\u4e0d\u5982\u663e\u5f0f\u7684\u6307\u660e\u5b83\u66f4\u597d\uff1a [=, this] \u6216\u8005 [=, *this] \u3002 \u5feb\u901f\u56de\u987e\u4e4b\u540e\uff0c\u8ba9\u6211\u4eec\u6765\u770b\u770b C++20 \u4e2d\u4e0e Lambda \u76f8\u5173\u7684\u66f4\u7a81\u51fa\u7684\u7279\u6027\u3002","title":"2. \u66f4\u65b0\u5feb\u89c8"},{"location":"Chapter5/#3-consteval-lambda","text":"\u4ece C++11 \u8d77\uff0c constexpr \u5c31\u5141\u8bb8\u51fd\u6570\u5728\u7f16\u8bd1\u671f\u95f4\u6267\u884c\u4e86\uff0c\u4f46\u662f\u540c\u65f6\uff0c\u4e5f\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u6267\u884c\u8fd9\u4e9b\u51fd\u6570\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6700\u597d\u7684\u505a\u6cd5\u662f\u5c06\u90e8\u5206\u529f\u80fd\u9650\u5236\u5728\u7f16\u8bd1\u671f\u65f6\u8fdb\u884c\u3002 \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48 C++20 \u4e2d\u5f15\u5165\u4e86\u65b0\u7684\u5173\u952e\u5b57\uff0c\u6765\u521b\u5efa\u7b26\u5408 constexpr \u89c4\u5219\u4f46\u53ea\u80fd\u5728\u7f16\u8bd1\u671f\u6267\u884c\u7684\u51fd\u6570\uff0c\u8fd9\u4e9b\u51fd\u6570\u4e5f\u88ab\u79f0\u4e3a \u201c\u5373\u65f6\u51fd\u6570\uff08Immediate Function\uff09\u201d \u3002 \u8fd9\u4e2a\u65b0\u7684\u5173\u952e\u5b57\u4e5f\u53ef\u4ee5\u7528\u5728 Lambda \u4e0a\u3002\u770b\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u5427\uff1a \u4ee3\u7801 5-3 \u4e00\u4e2a\u7b80\u5355\u7684\u5373\u65f6 Lambda \u51fd\u6570 int main () { const int x = 10 ; auto lam = []( int x ) consteval { return x + x ; }; return lam ( x ); } \u6211\u4eec\u5c06\u65b0\u7684\u5173\u952e\u5b57 consteval \u653e\u5728\u4e86 Lambda \u7684\u53c2\u6570\u5217\u8868\u4e4b\u540e\uff0c\u7c7b\u4f3c\u4e8e constexpr \u7684\u7528\u6cd5\u3002\u4e25\u683c\u7684\u533a\u522b\u5c31\u5728\u4e8e\uff0c\u5982\u679c\u4f60\u5c06 x \u7684 const \u79fb\u9664\uff0c\u90a3\u4e48 constexpr Lambda \u8868\u8fbe\u5f0f\u4ecd\u65e7\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u5de5\u4f5c\uff0c\u4f46\u662f\u5373\u65f6 Lambda \u51fd\u6570\u5c06\u65e0\u6cd5\u6210\u529f\u7f16\u8bd1\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5982\u679c Lambda \u51fd\u6570\u4f53\u4e2d\u9075\u5faa constexpr \u51fd\u6570\u7684\u89c4\u5219\uff0c\u90a3\u4e48\u7f16\u8bd1\u5668\u4f1a\u5c06\u8c03\u7528\u64cd\u4f5c\u7b26\u6807\u8bb0\u4e3a\u9690\u5f0f\u7684 constexpr \u3002 \u8fd9\u5e76\u975e consteval \u6848\u4f8b\uff0c\u56e0\u4e3a\u5b83\u5bf9\u7c7b\u4f3c\u8fd9\u6837\u7684\u4ee3\u7801\u62e5\u6709\u66f4\u5f3a\u7684\u9650\u5236\u3002 \u5f53\u7136\uff0c\u8fd9\u4e24\u4e2a\u5173\u952e\u5b57\u65e0\u6cd5\u540c\u65f6\u4f7f\u7528\u3002\u5728\u8349\u6848 P1073R3 \u4e2d\u4f60\u53ef\u4ee5\u627e\u5230\u4e0e\u6b64\u76f8\u5173\u7684\u5168\u90e8\u63cf\u8ff0\u3002","title":"3. consteval Lambda"},{"location":"Chapter5/#4-\u6355\u83b7\u53c2\u6570\u5305","text":"C++20 \u4e2d\u8fd8\u5bf9 Lambda \u4e2d\u521d\u59cb\u5316\u6355\u83b7\u7684\u5305\u6269\u5c55\u5e26\u6765\u4e86\u4e00\u4e2a\u63d0\u5347\uff1a template < typename ... Args > void call ( Args && ... args ) { auto ret = [... capturedArgs = std :: move ( args )](){}; } \u5148\u524d\uff0c\u5728 C++20 \u4e4b\u524d\uff0c\u8fd9\u6bb5\u4ee3\u7801\u662f\u65e0\u6cd5\u901a\u8fc7\u7f16\u8bd1\u7684\uff08\u53c2\u8003 C++11 \u7ae0\u8282\u4e2d \u8fd9\u90e8\u5206 \u5185\u5bb9\uff09\uff0c\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u9700\u8981\u5c06\u53c2\u6570\u6253\u5305\u8fdb\u4e00\u4e2a\u5355\u72ec\u7684\u5143\u7ec4\u4e2d\u53bb\u3002 \u5173\u4e8e\u6355\u83b7\u9650\u5236\u76f8\u5173\u7684\u5386\u53f2\u5185\u5bb9\uff0c\u4f60\u53ef\u4ee5\u53c2\u8003 P0780 \u4e2d\u7684\u63cf\u8ff0\u3002 \u7efc\u4e0a\u6240\u8ff0\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5728 C++11 \u7ae0\u8282\u4e2d\u6709\u5173\u6355\u83b7\u4e00\u4e2a\u53ef\u53d8\u53c2\u6570\u5305\u7684\u4f8b\u5b50\u5e76\u5728 C++20 \u4e2d\u65b0\u7279\u6027\u7684\u52a0\u6301\u4e0b\u5b9e\u8df5\u4e0b\u3002 \u770b\u4e0b\u9762\u7684\u4f8b\u5b50\uff0c\u5229\u7528\u6298\u53e0\u8868\u8fbe\u5f0f\u6765\u6253\u5370\u6bcf\u4e2a\u88ab\u6355\u83b7\u7684\u53c2\u6570\uff1a \u4ee3\u7801 5-4 \u6355\u83b7\u53ef\u53d8\u53c2\u6570\u5305 #include <iostream> #include <memory> template < class First , class ... Args > void captureTest ( First && first , Args && ... args ) { const auto printer = [ first = std :: move ( first ), ... capturedArgs = std :: move ( args )] { std :: cout << first ; (( std :: cout << \", \" << capturedArgs ), ...); std :: cout << '\\n' ; }; printer (); } int main () { auto ptr = std :: make_unique < int > ( 10 ); captureTest ( std :: move ( ptr ), 2 , 3 , 4 ); captureTest ( std :: move ( ptr ), 'a' , 'b' ); } \u8f93\u51fa\uff1a 0x1f0cb20, 2, 3, 4 0, a, b \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u4e00\u4e2a printer \u5bf9\u8c61\uff0c\u5b83\u5f88\u7c7b\u4f3c\u5728 C++17 \u4e2d\u5199\u8fc7\u7684\u90a3\u6837\uff0c\u4f46\u662f\u5728\u8fd9\u513f\u6211\u4eec\u7528\u6765\u6355\u83b7\u53d8\u91cf\u800c\u4e0d\u662f\u4f5c\u4e3a\u8f6c\u53d1 Lambda \u53c2\u6570\u4f7f\u7528\u3002 \u4ee3\u7801\u4e2d\u751a\u81f3\u4f20\u9012\u4e86\u4e00\u4e2a unique \u6307\u9488\u3002\u6211\u4eec\u4f20\u9012\u4e86\u4e24\u6b21\u5e76\u4e14\u4f60\u53ef\u4ee5\u770b\u5230\u5728\u7b2c\u4e8c\u6b21\u8c03\u7528\u65f6\u5f97\u5230\u7684\u7ed3\u679c\u4e3a 0 \uff0c\u56e0\u4e3a\u6b64\u65f6\u6307\u9488\u5df2\u7ecf\u4e22\u5931\u4e86\u5b83\u5bf9\u90a3\u5757\u5185\u5b58\u5757\u7684\u6240\u6709\u6743\u3002","title":"4. \u6355\u83b7\u53c2\u6570\u5305"},{"location":"Chapter5/#5-\u6a21\u677f-lambda","text":"C++14 \u4e2d\u5c31\u5df2\u7ecf\u5f15\u5165\u4e86\u6cdb\u578b Lambda\uff0c\u5e76\u4e14\u53ef\u4ee5\u5728\u6a21\u677f\u4e2d\u5c06\u53c2\u6570\u7c7b\u578b\u4e5f\u58f0\u660e\u4e3a auto \u7c7b\u578b\u3002 \u4f8b\u5982\uff1a [] ( auto x ) { x ; }; \u7f16\u8bd1\u5668\u4f1a\u751f\u6210\u4e00\u4e2a\u8c03\u7528\u64cd\u4f5c\u7b26\u5bf9\u5e94\u4ee5\u4e0b\u7684\u6a21\u677f\u65b9\u6cd5\uff1a template < typename T > void operator ()( T x ) { x ; } \u4f46\u662f\uff0c\u8fd9\u4f3c\u4e4e\u6ca1\u6709\u529e\u6cd5\u53bb\u76f4\u63a5\u6539\u53d8\u8fd9\u4e2a\u6a21\u677f\u7684\u53c2\u6570\uff0c\u5e76\u4e14\u4f7f\u7528\u201c\u771f\u5b9e\u201d\u7684\u6a21\u677f\u53c2\u6570\u3002 C++20 \u4e0b\uff0c\u8fd9\u90fd\u662f\u53ef\u80fd\u7684\u3002 \u6bd4\u5982\uff0c\u5982\u4f55\u9650\u5236 Lambda \u4ec5\u5bf9 vector \u7c7b\u578b\u751f\u6548\u5462\uff1f \u5982\u4e0b\uff0c\u6709\u4e00\u4e2a\u6cdb\u578b Lambda\uff1a auto foo = []( auto & vec ) { std :: cout << std :: size ( vec ) << '\\n' ; std :: cout << vec . capacity () << '\\n' ; }; \u4f46\u662f\uff0c\u5982\u679c\u4f60\u8c03\u7528\u5b83\u5e76\u4f20\u5165\u4e00\u4e2a int \u53c2\u6570\uff08\u5982 foo(10) \uff09\uff0c\u90a3\u4f60\u53ef\u80fd\u4f1a\u9047\u5230\u201c\u6666\u6da9\u96be\u61c2\u201d\u7684\u9519\u8bef\u63d0\u793a\uff1a test . cc : In instantiation of ' main () ::< lambda ( const auto : 1 & ) > [ with auto : 1 = int ] ' : test . cc : 16 : 11 : required from here test . cc : 11 : 30 : error : no matching function for call to ' size ( const int & ) ' 11 | std :: cout << std :: size ( vec ) << '\\n' ; \u5728 C++20 \u4e2d\uff0c\u53ef\u4ee5\u8fd9\u6837\u5199\uff1a auto foo = [] < typename T > ( std :: vector < T > const & vec ) { std :: cout << std :: size ( vec ) << '\\n' ; std :: cout << vec . capacity () << '\\n' ; }; \u5b83\u6240\u5bf9\u5e94\u7684\u6a21\u677f\u8c03\u7528\u64cd\u4f5c\u7b26\u4e3a\uff1a < typename T > void operator ()( std :: vector < T > const & s ) { ... } \u8fd9\u6837\u6a21\u677f\u53c2\u6570\u5c31\u5728\u6355\u83b7\u5b50\u53e5 [] \u4e4b\u540e\u4e86\u3002 \u73b0\u5728\u8fdb\u884c\u7c7b\u4f3c foo(10) \u7684\u8c03\u7528\uff0c\u90a3\u4e48\u4f1a\u6536\u5230\u4e00\u4e2a\u8f83\u4eba\u6027\u5316\u7684\u6d88\u606f\uff1a note: mismatched types 'const std::vector<T>'and 'int' \u4e0a\u8ff0\u4f8b\u5b50 \u4e2d\uff0c\u7f16\u8bd1\u5668\u4f1a\u8b66\u544a\u6211\u4eec\u5173\u4e8e Lambda \u63a5\u53e3\u4e2d\u7684\u8fd9\u4e2a\u9519\u8bef\u7684\u5339\u914d\u3002 \u53e6\u5916\u6709\u4e00\u4e2a\u91cd\u8981\u7684\u65b9\u9762\u5c31\u662f\uff0c\u5728\u6cdb\u578b Lambda \u7684\u793a\u4f8b\u4e2d\uff0c\u4f60\u53ea\u62e5\u6709\u4e00\u4e2a\u53d8\u91cf\u800c\u4e0d\u662f\u5b83\u7684\u6a21\u677f\u7c7b\u578b\u3002 \u5982\u679c\u8981\u8bbf\u95ee\u7c7b\u578b\uff0c\u5219\u9700\u8981\u4f7f\u7528 decltype(x) \uff08\u5bf9\u4e8e\u5e26\u6709 auto x \u53c2\u6570\u7684 Lambda\uff09\u3002 \u8fd9\u5c06\u4f1a\u4f7f\u5f97\u4f60\u7684\u4ee3\u7801\u53d8\u5f97\u5197\u957f\u3002 \u4f8b\u5982\uff08\u4f7f\u7528\u4e86 P0428 \u4e2d\u7684\u4ee3\u7801\uff09\uff1a \u4ee3\u7801 5-5 \u4ece\u6cdb\u578b\u53c2\u6570\u4e2d\u63a8\u65ad auto f = []( auto const & x ) { using T = std :: decay_t < decltype ( x ) > ; T copy = x ; T :: static_function (); using Iterator = typenameT :: iterator ; } \u73b0\u5728\u53ef\u4ee5\u8fd9\u6837\u7f16\u5199\uff1a \u4ee3\u7801 5-6 \u4f7f\u7528\u6a21\u677f Lambda auto f = [] < typename T > ( T const & x ) { T copy = x ; T :: static_function (); using Iterator = typenameT :: iterator ; } \u548c\u660e\u663e\uff0c\u5728\u7b2c\u4e00\u79cd\u5199\u6cd5\u4e2d\uff0c\u6211\u4eec\u4e0d\u5f97\u4e0d\u4f7f\u7528 using T = std :: decay_t < decltype ( x ) > ; \u4e3a\u4e86\u5f97\u5230\u8f93\u5165\u53c2\u6570\u7684\u7c7b\u578b\uff0c\u5728 C++20 \u7248\u672c\u4e2d\uff0c\u6ca1\u6709\u5fc5\u8981\u53bb\u8bbf\u95ee\u6a21\u677f\u53c2\u6570\u4e86\u3002 \u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u6709\u4e00\u4e2a\u91cd\u8981\u7684\u4f7f\u7528\u573a\u666f\u5c31\u662f\u5728\u53ef\u53d8\u6cdb\u578b Lambda \u4e2d\u8fdb\u884c\u5b8c\u7f8e\u8f6c\u53d1\uff1a // C++17 auto ForwardToTestFunc = []( auto && ... args ) { // what's the type of `args` ? return TestFunc ( std :: forward < decltype ( args ) > ( args )...); }; \u6bcf\u6b21\u4f60\u60f3\u8981\u8bbf\u95ee\u6a21\u677f\u53c2\u6570\u7684\u7c7b\u578b\u662f\uff0c\u4f60\u90fd\u9700\u8981\u53bb\u4f7f\u7528 decltype ()\uff0c\u4f46\u662f\u5728\u6a21\u677f lambda \u4e2d\u5c31\u4e0d\u9700\u8981\u4e86\uff1a // C++20 auto ForwardToTestFunc = [] < typename ... T > ( T && ... args ) { return TestFunc ( std :: forward < T > ( args )...); // we have allthe types! }; \u600e\u4e48\u6837\uff1f\u6a21\u677f Lambda \u63d0\u4f9b\u4e86\u66f4\u4e3a\u6e05\u6670\u7684\u8bed\u6cd5\u548c\u66f4\u597d\u7684\u8bbf\u95ee\u53c2\u6570\u7c7b\u578b\u7684\u9014\u5f84\u3002 \u5f53\u7136\uff0c\u8fd9\u8fd8\u4e0d\u591f\uff0c\u4f60\u751a\u81f3\u4e5f\u53ef\u4ee5\u5728 Lambda \u4f7f\u7528 concept \uff0c\u54b1\u4eec\u63a5\u7740\u5f80\u4e0b\u770b\u3002","title":"5. \u6a21\u677f Lambda"},{"location":"Chapter5/#6-concept-\u548c-lambda","text":"concept \u662f\u7f16\u5199\u6a21\u677f\u7684\u4e00\u9879\u9769\u547d\u6027\u8fdb\u6b65\u3002 \u5b83\u5c06\u5141\u8bb8\u4f60\u5bf9\u6a21\u677f\u53c2\u6570\u8fdb\u884c\u7ea6\u675f\uff0c\u8fd9\u53ef\u4ee5\u6781\u5927\u63d0\u9ad8\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\uff0c\u53ef\u80fd\u63d0\u5347\u7f16\u8bd1\u901f\u5ea6\u751a\u81f3\u80fd\u591f\u63d0\u4f9b\u66f4\u53cb\u5584\u7684\u9519\u8bef\u4fe1\u606f\u3002 \u8bdd\u4e0d\u591a\u8bf4\uff0c\u770b\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\u5427\uff1a \u4ee3\u7801 5-7 \u4e00\u4e2a\u666e\u901a\u7684 concept \u58f0\u660e // define a concept: template < class T > concept SignedIntegral = std :: is_integral_v < T > && std :: is_signed_v < T > ; // use: template < SignedIntegral T > void signedIntsOnly ( T val ) {} \u6211\u4eec\u9996\u5148\u521b\u5efa\u4e86\u4e00\u4e2a concept \u63cf\u8ff0\u7c7b\u578b\u4e3a\u6709\u7b26\u53f7\u7684\u5e76\u4e14\u662f\u6574\u5f62\u3002 \u8bf7\u6ce8\u610f\u6211\u4eec\u53ef\u4ee5\u5df2\u6709\u7684\u7c7b\u578b\u7279\u5f81\u3002 \u4e4b\u540e\uff0c\u6211\u4eec\u4f7f\u7528\u5979\u6765\u5b9a\u4e49\u4e00\u4e2a\u4ec5\u652f\u6301\u80fd\u5339\u914d concept \u7c7b\u578b\u7684\u6a21\u677f\u51fd\u6570\u3002 \u5728\u8fd9\u6211\u4eec\u6ca1\u6709\u4f7f\u7528 typename T \uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u5f15\u7528\u4e00\u4e2a concept \u540d\u5b57\u3002 \u597d\u4e86\uff0c\u7b80\u5355\u4e86\u89e3\u4e86 concept \u4e4b\u540e\uff0c\u90a3\u4e48\u600e\u4e48\u8ddf Lambda \u5173\u8054\u8d77\u6765\u5462\uff1f \u5173\u952e\u90e8\u5206\u5c31\u5728\u4e8e\u7cbe\u70bc\u8bed\u6cd5\u4ee5\u53ca\u7ea6\u675f auto \u6a21\u677f\u53c2\u6570\u3002","title":"6. Concept \u548c Lambda"},{"location":"Chapter5/#\u7b80\u5316\u548c\u7cbe\u70bc\u7684\u8bed\u6cd5","text":"\u5f97\u76ca\u4e8e concept \u7cbe\u70bc\u7684\u8bed\u6cd5\u7279\u6027\uff0c\u4f60\u4e5f\u53ef\u4ee5\u4e0d\u7528\u5728\u7f16\u5199\u6a21\u677f\u65f6\u5019\u5e26\u6709 template<typename ..> \u90e8\u5206\u4e86\u3002 \u4f7f\u7528\u65e0\u7ea6\u675f\u7684 auto \uff1a void myTemplateFunc ( auto param ) {} \u4f7f\u7528\u6709\u7ea6\u675f\u7684 auto\uff1a void signedIntsOnly ( SignedIntegral auto val ) {} void floatsOnly ( std :: floating_point auto fp ) {} \u8fd9\u4e9b\u8bed\u6cd5\u8ddf\u5728 C++14 \u4e2d\u7f16\u5199\u6cdb\u578b Lambda \u65f6\u5f88\u50cf\uff0c\u5f53\u7136\uff0c\u73b0\u5728\u4f60\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a void myTemplateFunction ( auto val ) {} \u6362\u53e5\u8bdd\u8bf4\uff0c\u5bf9\u4e8e lambda\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u5b83\u7cbe\u70bc\u7684\u98ce\u683c\uff0c\u4f8b\u5982\u5bf9\u6cdb\u578b Lambda \u53c2\u6570\u6dfb\u52a0\u989d\u5916\u7684\u9650\u5236\u3002 auto GenLambda = []( SignedIntegral auto param ) { return param * param + 1 ; } \u4e0a\u9762\u7684\u4f8b\u5b50\u5229\u7528 SignedIntegral \u6765\u9650\u5236 auto \u53c2\u6570\u3002 \u4f46\u662f\u6574\u4e2a\u8868\u8fbe\u5f0f\u6bd4\u8d77\u6a21\u677f Lambda \u770b\u4e0a\u53bb\u66f4\u52a0\u7684\u53ef\u8bfb\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u8981\u7740\u91cd\u8ba8\u8bba\u7684\u70b9\u4e86\u3002 \u6765\u4e00\u4e2a\u6709\u70b9\u96be\u5ea6\u7684\u4f8b\u5b50\u5427\uff0c\u6211\u4eec\u751a\u81f3\u53ef\u4ee5\u4e3a\u4e00\u4e9b\u7c7b\u7684\u63a5\u53e3\u5b9a\u4e49 concept \uff1a \u4ee3\u7801 5-8 IRenderable concept, with requires keyword template < typename T > concept IRenderable = requires ( T v ) { { v . render () } -> std :: same_as < void > ; { v . getVertCount () } -> std :: convertible_to < size_t > ; }; \u4e0a\u9762\u8fd9\u4e2a\u4f8b\u5b50\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5e26\u6709 render () \u548c getVertCount () \u6210\u5458\u51fd\u6570\uff0c\u7528\u6765\u5339\u914d\u5168\u90e8\u7c7b\u578b\u7684 concept\u3002 \u4f7f\u7528\u5b83\u6765\u5199\u4e00\u4e2a\u6cdb\u578b Lambda \u8bd5\u8bd5\uff1a \u4ee3\u7801 5-9 IRenderable concept/Interface \u7684\u5b9e\u73b0 #include <concepts> #include <iostream> template < typename T > concept IRenderable = requires ( T v ) { { v . render () } -> std :: same_as < void > ; { v . getVertCount () } -> std :: convertible_to < size_t > ; }; struct Circle { void render () { std :: cout << \"drawing circle \\n \" ; } size_t getVertCount () const { return 10 ; }; }; struct Square { void render () { std :: cout << \"drawing square \\n \" ; } size_t getVertCount () const { return 4 ; }; }; int main () { const auto RenderCaller = []( IRenderable auto & obj ) { obj . render (); }; Circle c ; RenderCaller ( c ); Square s ; RenderCaller ( s ); } \u8fd9\u4e2a\u4f8b\u5b50\u4e2d RenderCaller \u5c31\u662f\u4e00\u4e2a\u6cdb\u578b Lambda \uff0c\u5e76\u4e14\u652f\u6301\u7c7b\u578b\u5fc5\u987b\u6ee1\u8db3 IRenderable concept \u3002","title":"\u7b80\u5316\u548c\u7cbe\u70bc\u7684\u8bed\u6cd5"},{"location":"Chapter5/#7-\u65e0\u72b6\u6001-lambda-\u7684\u53d8\u66f4","text":"\u4e5f\u8bb8\u4f60\u4f1a\u60f3\u8d77\u6765 C++11 \u4e2d\u6211\u4eec\u63d0\u8fc7\u7684\u65e0\u72b6\u6001\u3001\u751a\u81f3\u6ca1\u6709\u9ed8\u8ba4\u6784\u9020\u5316\u7684 Lambda\u3002 \u7136\u800c\uff0c\u8fd9\u4e2a\u9650\u5236\u5728 C++20 \u4e2d\u88ab\u89e3\u9664\u4e86\u3002 \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u5047\u5982\u4f60\u7684 Lambda \u6ca1\u6709\u6355\u83b7\u4efb\u4f55\u4e1c\u897f\u7684\u60c5\u51b5\u4e0b\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5199\u4e0b\u5982\u4e0b\u7684\u4ee3\u7801\uff1a \u4ee3\u7801 5-10 \u4e00\u4e2a\u65e0\u72b6\u6001 Lambda #include <iostream> #include <set> #include <string> struct Product { std :: string _name ; int _id { 0 }; double _price { 0.0 }; }; int main () { const auto nameCmp = []( const auto & a , const auto & b ) { return a . _name < b . _name ; }; const std :: set < Product , decltype ( nameCmp ) > prodSet { { \"Cup\" , 10 , 100.0 }, { \"Book\" , 2 , 200.5 }, { \"TV set\" , 1 , 2000 }, { \"Pencil\" , 4 , 10.5 }}; for ( const auto & elem : prodSet ) std :: cout << elem . _name << '\\n' ; } \u4f8b\u5b50\u4e2d\u6211\u58f0\u660e\u4e86\u4e00\u4e2a\u96c6\u5408\u7528\u6765\u5b58\u50a8\u4e00\u7cfb\u5217\u7684\u4ea7\u54c1\u3002 \u540c\u65f6\u6211\u9700\u8981\u4e00\u4e2a\u529e\u6cd5\u6765\u6bd4\u8f83\u8fd9\u4e9b\u4ea7\u54c1\uff0c\u6240\u4ee5\u6211\u4f20\u5165\u4e86\u4e00\u4e2a\u65e0\u72b6\u6001\u7684 Lambda \u7528\u6765\u6bd4\u8f83\u4ed6\u4eec\u7684\u4ea7\u54c1\u540d\u3002 \u5982\u679c\u7528 C++17 \u7f16\u8bd1\uff0c\u90a3\u4e48\u4f60\u4f1a\u6536\u83b7\u5982\u4e0b\u5173\u4e8e\u4f7f\u7528\u4e86\u5220\u9664\u9ed8\u8ba4\u6784\u9020\u5668\u7684\u9519\u8bef\u8bf4\u660e\uff1a test.h: In constructor 'std::set<_Key, _Compare, _Alloc>... [with _Key = Product; _Compare = main()::<lambda(const auto:1&, const auto:2&)>; ...' test.h:244:29: error: use of deleted function 'main()::<lambda(const auto:1&, const auto:2&)>::<lambda>()' \u4f46\u662f\u5728 C++20 \u4e2d\uff0c\u4f60\u53ef\u4ee5\u5b58\u50a8\u65e0\u72b6\u6001 Lambda\uff0c\u751a\u81f3\u53ef\u4ee5\u62f7\u8d1d\u4ed6\u4eec\uff1a \u4ee3\u7801 5-11 \u5b58\u50a8\u65e0\u72b6\u6001 Lambda template < typename F > struct Product { int _id { 0 }; double _price { 0.0 }; F _predicate ; }; int main () { const auto idCmp = []( const auto & a ) noexcept { return a . _id != 0 ; }; Product p { 10 , 10.0 , idCmp }; [[ maybe_unused ]] auto p2 = p ; }","title":"7. \u65e0\u72b6\u6001 Lambda \u7684\u53d8\u66f4"},{"location":"Chapter5/#\u8865\u5145\u4e00\u4e9b\u5173\u4e8e\u672a\u8bc4\u4f30\u7684-concept","text":"\u8fd8\u6709\u4e00\u4e9b\u4e0e\u9ad8\u7ea7\u7528\u4f8b\u76f8\u5173\u7684\u53d8\u5316\uff0c\u6bd4\u5982\u672a\u8bc4\u4f30\u7684 concept \u3002 \u8fde\u540c\u9ed8\u8ba4\u7684\u53ef\u6784\u9020 Lambda\uff0c\u60a8\u73b0\u5728\u53ef\u4ee5\u7f16\u5199\u8fd9\u6837\u7684\u4ee3\u7801\uff1a std :: map < int , int , decltype ([]( int x , int y ) { return x > y ; }) > map ; \u5982\u60a8\u6240\u89c1\uff0c\u73b0\u5728\u53ef\u4ee5\u5728\u58f0\u660e\u6620\u5c04\u5bb9\u5668\u4e2d\u6307\u5b9a Lambda\u3002\u5b83\u53ef\u4ee5\u7528\u4f5c\u6bd4\u8f83\u5668\u4eff\u51fd\u6570\u3002 \u8fd9\u79cd\u201c\u672a\u8bc4\u4f30 concept \u201d\u5bf9\u4e8e\u9ad8\u7ea7\u6a21\u677f\u5143\u7f16\u7a0b\u7279\u522b\u65b9\u4fbf\u3002 \u4f8b\u5982\uff0c\u5728\u8be5\u529f\u80fd\u7684\u63d0\u6848\u4e2d\uff0c\u4f5c\u8005\u63d0\u5230\u5728\u7f16\u8bd1\u65f6\u4f7f\u7528\u65ad\u8a00\u5bf9\u5143\u7ec4\u5bf9\u8c61\u8fdb\u884c\u6392\u5e8f\uff0c\u8be5\u65ad\u8a00\u662f\u4e00\u4e2a Lambda\u3002 \u66f4\u591a\u7684\u5185\u5bb9\u53ef\u4ee5\u53c2\u8003 P0315R2 \u3002","title":"\u8865\u5145\u4e00\u4e9b\u5173\u4e8e\u201c\u672a\u8bc4\u4f30\u7684 concept\u201d"},{"location":"Chapter5/#8-lambda-\u548c-constexpr-\u7b97\u6cd5","text":"\u56de\u60f3\u4e00\u4e0b\u4e4b\u524d\u7ae0\u8282\u4e2d\u7684\u5185\u5bb9\uff0c\u81ea C++17 \u4f9d\u8d56\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 constexpr Lambda\u3002 \u5e76\u4e14\uff0c\u7531\u4e8e\u8fd9\u9879\u529f\u80fd\uff0c\u6211\u4eec\u53ef\u4ee5\u4f20\u9012 Lambda \u7ed9\u4e00\u4e2a\u9700\u8981\u5728\u7f16\u8bd1\u5668\u8bc4\u4f30\u7684\u51fd\u6570\u3002 \u5728 C++20 \u4e2d\u5927\u591a\u6570\u6807\u6ce8\u7b97\u6cd5\u90fd\u53ef\u4ee5\u88ab\u5173\u952e\u5b57 constexpr \u6807\u8bb0\uff0c\u8fd9\u4f7f\u5f97 constexpr Lambda \u7528\u8d77\u6765\u66f4\u52a0\u65b9\u4fbf\u4e86\u3002 \u770b\u4e00\u4e9b\u4f8b\u5b50\u5427\u8fd8\u662f\u3002 \u4ee3\u7801 5-12 \u5728\u666e\u901a\u7684 constexpr Lambda \u4e2d\u4f7f\u7528 std::accumulate () #include <array> #include <numeric> int main () { constexpr std :: array arr { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 }; // with constexpr lambda static_assert ( std :: accumulate ( begin ( arr ), end ( arr ), 0 , []( auto a , auto b ) noexcept { return a + b ; }) == 55 ); return arr [ 0 ]; } \u672c\u4f8b\u4e2d\uff0c\u5728 Lambda \u4e2d\u4f7f\u7528 std::accumulate \uff0c\u5b9e\u9645\u4e0a\u4f7f\u7528\u7684\u8fd8\u662f std::plus \u64cd\u4f5c\u3002 \u4e0b\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u4f7f\u7528\u4e86\u4e00\u4e2a\u5e26\u6709 cmp \u6bd4\u8f83\u5668 cout_if \u7b97\u6cd5\u7684 constexpr \u51fd\u6570\u3002 \u4ee3\u7801 5-13 \u7ed9\u666e\u901a\u51fd\u6570\u4e2d\u4f20\u5165\u4e00\u4e2a constexpr Lambda #include <algorithm> #include <array> constexpr auto CountValues ( auto container , auto cmp ) { return std :: count_if ( begin ( container ), end ( container ), cmp ); } int main () { constexpr auto minVal = CountValues ( std :: array { -10 , 6 , 8 , 4 , -5 , 2 , 4 , 6 }, []( auto a ) { return a >= 0 ; }); return minVal ; } \u54ea\u4e9b\u6807\u51c6\u7b97\u6cd5\u662f\u53ef\u4ee5 constexpr \u7684\u5462\uff1f \u6240\u6709 <algorithm> \uff0c <utility> \u548c <numeric> \u5934\u6587\u4ef6\u4e2d\u7684\u7b97\u6cd5\u73b0\u5728\u90fd\u53ef\u4ee5\u88ab\u5173\u952e\u5b57 constexpr \u6807\u8bb0\u3002\u9664\u4e86 shuffle , sample , stable_sort , stable_partition , inplace_merge \u8fd9\u4e9b\uff0c\u4ee5\u53ca\u63a5\u53d7\u6267\u884c\u7b56\u7565\u53c2\u6570\u7684\u51fd\u6570\u6216\u91cd\u8f7d\u51fd\u6570\u3002 \u5177\u4f53\u7684\u5185\u5bb9\u53ef\u4ee5\u67e5\u9605 P0202 \uff0c P0879 \u548c P1645 \u3002","title":"8. Lambda \u548c constexpr \u7b97\u6cd5"},{"location":"Chapter5/#9-c20-\u5bf9\u91cd\u8f7d\u6a21\u5f0f\u7684\u66f4\u65b0","text":"\u5728\u524d\u4e00\u7ae0\u4e2d\uff0c\u5b66\u4e60\u8fc7\u5982\u4f55\u4ece\u591a\u4e2a Lambda \u8868\u8fbe\u5f0f\u6d3e\u751f\u5e76\u901a\u8fc7\u91cd\u8f7d\u6a21\u5f0f\u66b4\u9732\u5b83\u4eec\u3002 \u8fd9\u79cd\u6280\u672f\u5bf9\u4e8e std::variant \u8bbf\u95ee\u5f88\u65b9\u4fbf\u3002 \u5f97\u76ca\u4e8e C++20 \u4e2d\u7c7b\u6a21\u677f\u53c2\u6570\u63a8\u65ad\uff08CTAD\uff0cClass Template Argument Deduction\uff09\u7684\u66f4\u65b0\uff0c\u73b0\u5728\u53ef\u4ee5\u7528\u66f4\u7b80\u77ed\u7684\u8bed\u6cd5\u6765\u5b9e\u73b0\u4e86\u3002 \u4e3a\u4ec0\u4e48\uff1f \u8fd9\u662f\u56e0\u4e3a\u5728 C++20 \u4e2d\u6709 CTAD \u7684\u6269\u5c55\u5e76\u4e14\u4f1a\u81ea\u52a8\u5904\u7406\u805a\u5408\u3002 \u8fd9\u610f\u5473\u7740\u65e0\u9700\u7f16\u5199\u81ea\u5b9a\u4e49\u7684\u63a8\u65ad\u3002 \u6765\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a template < typename T , typename U , typename V > struct Triple { T t ; U u ; V v ; }; \u5728 C++20 \u4e2d\u7684\u5199\u6cd5\uff1a Triple ttt { 10.0f , 90 , std :: string { \"hello\" }}; T \u5c06\u88ab\u81ea\u52a8\u63a8\u65ad\u4e3a float \uff0c U \u4e3a int \uff0c V \u4e3a std::string \u3002 C++20 \u4e2d\u7684\u91cd\u8f7d\u6a21\u5f0f\uff1a template < class ... Ts > struct overload : Ts ... { using Ts :: operator ()...; }; \u8fd9\u4e2a\u7279\u6027\u7684\u8349\u6848\u53ef\u4ee5\u5728 P1021 \u548c P1816 \u4e2d\u67e5\u9605\u3002 GCC10 \u4f3c\u4e4e\u5b9e\u73b0\u4e86\u8fd9\u4e2a\u63d0\u8bae\uff0c\u4f46\u662f\u5b83\u4e0d\u9002\u7528\u4e8e\u7ee7\u627f\u7684\u9ad8\u7ea7\u6848\u4f8b\u3002\u56e0\u6b64\u6211\u4eec\u9700\u8981\u7b49\u5f85 GCC \u5bf9\u8be5\u7279\u6027\u8fdb\u884c\u5b8c\u6574\u7684\u652f\u6301\u3002","title":"9. C++20 \u5bf9\u91cd\u8f7d\u6a21\u5f0f\u7684\u66f4\u65b0"},{"location":"Chapter5/#10-\u603b\u7ed3","text":"\u5728\u672c\u7ae0\u4e2d\uff0c\u6211\u4eec\u56de\u987e\u4e86 C++20 \u5e26\u6765\u7684\u53d8\u5316\u3002 \u9996\u5148\uff0c\u4e00\u4e9b\u6f84\u6e05\u548c\u6539\u8fdb\uff1a\u4f8b\u5982\u6355\u83b7 this \u3001\u6355\u83b7\u7ed3\u6784\u5316\u7ed1\u5b9a\u6216\u9ed8\u8ba4\u6784\u9020\u65e0\u72b6\u6001 Lambda \u7684\u80fd\u529b\u3002 \u66f4\u91cd\u8981\u7684\u662f\uff0c\u8fd8\u6709\u66f4\u591a\u91cd\u8981\u7684\u8865\u5145\uff01 \u73b0\u5728\u7a81\u51fa\u7684\u529f\u80fd\u4e4b\u4e00\u662f\u6a21\u677f Lambdas \u548c\u6982\u5ff5\u3002 \u8fd9\u6837\u60a8\u5c31\u53ef\u4ee5\u66f4\u597d\u5730\u63a7\u5236\u901a\u7528 Lambdas\u3002 \u603b\u800c\u8a00\u4e4b\uff0c\u4f7f\u7528 C++20 \u53ca\u5176\u6240\u6709\u529f\u80fd\uff0c\u4f7f\u5f97 Lambda \u6108\u53d1\u6210\u4e3a\u66f4\u5f3a\u5927\u7684\u5de5\u5177\uff01","title":"10. \u603b\u7ed3"}]}